<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress.com" created="2011-05-27 01:43"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>smallfish another blog</title>
	<link>http://ddbean.wordpress.com</link>
	<description>http://ddbean.wordpress.com</description>
	<pubDate>Sat, 16 Apr 2011 01:27:39 +0000</pubDate>
	<generator>http://wordpress.org/?v=MU</generator>
	<language>zh-cn</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://ddbean.wordpress.com</wp:base_blog_url>
		<wp:category><wp:category_nicename>apache</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Apache]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>editor</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Editor]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>go</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Go]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>java</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>memcached</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Memcached]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mongodb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MongoDB]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mysql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MySQL]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>nginx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Nginx]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>other</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Other]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>perl</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Perl]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>postgresql</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[PostgreSQL]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>virtualbox</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[VirtualBox]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>apache</wp:tag_slug><wp:tag_name><![CDATA[Apache]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>cython</wp:tag_slug><wp:tag_name><![CDATA[Cython]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>emacs</wp:tag_slug><wp:tag_name><![CDATA[Emacs]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>gae</wp:tag_slug><wp:tag_name><![CDATA[GAE]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[Git]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>go</wp:tag_slug><wp:tag_name><![CDATA[Go]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>golang</wp:tag_slug><wp:tag_name><![CDATA[Golang]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>memcached</wp:tag_slug><wp:tag_name><![CDATA[Memcached]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[MongoDB]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[MySQL]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>nginx</wp:tag_slug><wp:tag_name><![CDATA[Nginx]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>perl</wp:tag_slug><wp:tag_name><![CDATA[Perl]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>postgresql</wp:tag_slug><wp:tag_name><![CDATA[PostgreSQL]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>pylons</wp:tag_slug><wp:tag_name><![CDATA[Pylons]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>pysvn</wp:tag_slug><wp:tag_name><![CDATA[Pysvn]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ssh</wp:tag_slug><wp:tag_name><![CDATA[SSH]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>tornado</wp:tag_slug><wp:tag_name><![CDATA[tornado]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>virtualbox</wp:tag_slug><wp:tag_name><![CDATA[VirtualBox]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>web-py</wp:tag_slug><wp:tag_name><![CDATA[web.py]]></wp:tag_name></wp:tag>
		
	<generator>http://wordpress.com/</generator>
<cloud domain='ddbean.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>http://0.gravatar.com/blavatar/e16a2db4a2ad9cce2d96301c8df87c20?s=96&#038;d=http%3A%2F%2Fs2.wp.com%2Fi%2Fbuttonw-com.png</url>
		<title>smallfish another blog</title>
		<link>http://ddbean.wordpress.com</link>
	</image>

		<item>
		<title>Python MySQLdb 查询返回字典结构</title>
		<link>http://ddbean.wordpress.com/2009/11/10/python-mysqldb-%e6%9f%a5%e8%af%a2%e8%bf%94%e5%9b%9e%e5%ad%97%e5%85%b8%e7%bb%93%e6%9e%84/</link>
		<pubDate>Tue, 10 Nov 2009 06:20:55 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://pythonchina.org/smallfish/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[MySQLdb默认查询结果都是返回tuple，输出时候不是很方便，必须按照0，1这样读取，无意中在网上找到简单的修改方法，就是传递一个cursors.DictCursor就行。

默认程序：
<pre>import MySQLdb
db = MySQLdb.connect(host = 'localhost', user = 'root', passwd = '123456', db = 'test')
cursor = db.cursor()
cursor.execute('select * from user')
rs = cursor.fetchall()
print rs
# 返回类似如下
# ((1000L, 0L), (2000L, 0L), (3000L, 0L))</pre>
修改后：
<pre>import MySQLdb
import MySQLdb.cursors
db = MySQLdb.connect(host = 'localhost', user = 'root', passwd = '123456', db = 'test',
                     cursorclass = MySQLdb.cursors.DictCursor)
cursor = db.cursor()
cursor.execute('select * from user')
rs = cursor.fetchall()
print rs
# 返回类似如下
# ({'age': 0L, 'num': 1000L}, {'age': 0L, 'num': 2000L}, {'age': 0L, 'num': 3000L})</pre>
或者也可以用下面替换connect和cursor部分
<pre>db = MySQLdb.connect(host = 'localhost', user = 'root', passwd = '123456', db = 'test')
cursor = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2009-11-10 14:20:55</wp:post_date>
		<wp:post_date_gmt>2009-11-10 06:20:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-mysqldb-%e6%9f%a5%e8%af%a2%e8%bf%94%e5%9b%9e%e5%ad%97%e5%85%b8%e7%bb%93%e6%9e%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258360890]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[354]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>5</wp:comment_id>
		<wp:comment_author><![CDATA[23号]]></wp:comment_author>
		<wp:comment_author_email>no.0023@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://n23.appspot.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>219.134.63.121</wp:comment_author_IP>
		<wp:comment_date>2009-11-19 17:31:52</wp:comment_date>
		<wp:comment_date_gmt>2009-11-19 09:31:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[使用web.py更爽，每一条记录返回一个web.storage.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>6</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>61.155.8.66</wp:comment_author_IP>
		<wp:comment_date>2009-11-19 17:33:04</wp:comment_date>
		<wp:comment_date_gmt>2009-11-19 09:33:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-4" rel="nofollow">@23号 </a>
哈哈，确实，就喜欢web.py这点，该有的，方便的都有了，其他手动。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>7</wp:comment_id>
		<wp:comment_author><![CDATA[chanel handbags sale]]></wp:comment_author>
		<wp:comment_author_email>lindaboothman@bagclubs.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.iluxuryonline.com</wp:comment_author_url>
		<wp:comment_author_IP>66.154.107.130</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 15:28:40</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 07:28:40</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Yes, Indeed !]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python Mako Template 学习笔记</title>
		<link>http://ddbean.wordpress.com/2009/11/10/python-mako-template-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Tue, 10 Nov 2009 06:53:31 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://pythonchina.org/smallfish/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[Mako是什么？Moko是Python写的一个模板库，Python官网<a href="http://python.org/" target="_blank">python.org</a>用的就是它哦。其他废话也就不累赘了，直接来点代码，方便阅读与了解把。

(Mako官网地址：<a href="http://www.makotemplates.org/" target="_blank">http://www.makotemplates.org/</a> ，可以下载安装包，推荐使用easy_install安装)
<pre>from mako.template import Template
mytemplate = Template("hello world!")
print mytemplate.render()
mytemplate = Template("hello, ${name}!")
print mytemplate.render(name="jack")</pre>
代码可以参考官方doc部分
<pre>mytemplate = Template(filename='/docs/mytmpl.txt')
print mytemplate.render()</pre>
还可以从设置模板为文件，设置filename属性
<pre>mytemplate = Template(filename='/docs/mytmpl.txt', module_directory='/tmp/mako_modules')
print mytemplate.render()</pre>
文件还可以缓存到某个目录下，下面的/docs/mytmpl.txt会产生一个py：/tmp/mako_modules/docs/mytmpl.txt.py
<pre>from mako.lookup import TemplateLookup
mylookup = TemplateLookup(directories=['/docs'])
mytemplate = Template("""&lt;%include file="header.txt"/&gt; hello world!""", lookup=mylookup)</pre>
查找模板，方便统一模板路径使用。
<pre>mylookup = TemplateLookup(directories=['/docs'], module_directory='/tmp/mako_modules')
def serve_template(templatename, **kwargs):
mytemplate = mylookup.get_template(templatename)
print mytemplate.render(**kwargs)</pre>
改良了上面的查找方式
<pre>
mylookup = TemplateLookup(directories=['/docs'], output_encoding='utf-8',
                                       encoding_errors='replace')
mytemplate = mylookup.get_template("foo.txt")
print mytemplate.render()</pre>
设置输出编码，以及编码错误时候处理方式]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2009-11-10 14:53:31</wp:post_date>
		<wp:post_date_gmt>2009-11-10 06:53:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-mako-template-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258360843]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[411]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>8</wp:comment_id>
		<wp:comment_author><![CDATA[熊]]></wp:comment_author>
		<wp:comment_author_email>xiongcaixing007@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>58.240.89.203</wp:comment_author_IP>
		<wp:comment_date>2009-12-18 16:43:31</wp:comment_date>
		<wp:comment_date_gmt>2009-12-18 08:43:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[很不错。谢谢。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>9</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish » Python Mako Template 学习笔记 -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L1&amp;url=http://chenxiaoyu.org/blog/archives/15</wp:comment_author_url>
		<wp:comment_author_IP>74.112.128.46</wp:comment_author_IP>
		<wp:comment_date>2010-05-02 16:32:43</wp:comment_date>
		<wp:comment_date_gmt>2010-05-02 08:32:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by 白杨树. 白杨树 said: mako 官网地址 http://163.fm/dRFWQ @smallfish9 同学分享的入门教程 http://163.fm/3eH8H7 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Google App Engine 上试用 web.py 笔记</title>
		<link>http://ddbean.wordpress.com/2009/11/10/google-app-engine-%e4%b8%8a%e8%af%95%e7%94%a8-web-py-%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Tue, 10 Nov 2009 07:02:36 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[GAE]]></category>

		<category domain="tag" nicename="gae"><![CDATA[GAE]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://pythonchina.org/smallfish/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[看到有人在坛子里询问在GAE如何发布web.py有关问题，就尝试了一把。具体安装和使用过程如下，请对照自己本地路径相应修改：

1. 复制本地对应web.py目录到GAE对应应用目录

比如：D:\Python25\Lib\site-packages\web 到 e:\googleapp\pynotes

2. 写测试代码
app.yaml
<pre>application: pynotes
version: 1
runtime: python
api_version: 1

handlers:
-  url: /.*
   script: home.py</pre>
home.py
<pre>import web
render = web.template.render('templates/')
urls = (
    '/', 'index'
)
class index:
    def GET(self):
        web.header('Content-type', 'text/html')
        name = 'smallfish'
        return render.index(name)
app = web.application(urls, globals())
main = app.cgirun() # 这行是发布到GAE的关键</pre>
templates/index.html
<pre>$def with (name)
<strong>hello, $name. test by web.py</strong></pre>
3. 发布到GAE，测试

e:\googleapp&gt;appcfg.py update pynotes/

到这里，一个简单web.py应用就完成了，然后刷新。GAE显示500 Error！

看后台GAE Log显示错误信息：”No module named templates“，去web.py官方溜达了一圈，发现在其cookbook里有一篇文档《<a href="http://webpy.org/cookbook/templates_on_gae" target="_blank">How to use templates on Google App Engine</a>》，里面说的很明白啦。

因为web.py的模板在GAE上文件系统会有所限制，所有本地得compile一下，具体命令是：<strong>python web/template.py --compile templates</strong> 最后一个参数是本地对应模板目录templates，如果有多个模板目录则一次运行一次。运行完会在templates会生成一个__init__.py，里面内容有兴趣可以看看，很眼熟的哦。

4. 再次发布到GAE，可以看到OK拉！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2009-11-10 15:02:36</wp:post_date>
		<wp:post_date_gmt>2009-11-10 07:02:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-app-engine-%e4%b8%8a%e8%af%95%e7%94%a8-web-py-%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1262225950]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[370]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>11</wp:comment_id>
		<wp:comment_author><![CDATA[imgui.com &raquo; webpy on GAE 部署实践！]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.imgui.com/leo/?p=4</wp:comment_author_url>
		<wp:comment_author_IP>74.220.215.209</wp:comment_author_IP>
		<wp:comment_date>2009-12-17 17:09:38</wp:comment_date>
		<wp:comment_date_gmt>2009-12-17 09:09:38</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 小鱼笔记：http://chenxiaoyu.org/blog/archives/18 大家族：http://www.keakon.cn/bbs/thread-766-1-1.html [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>12</wp:comment_id>
		<wp:comment_author><![CDATA[bluker]]></wp:comment_author>
		<wp:comment_author_email>bluker@126.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>222.247.56.14</wp:comment_author_IP>
		<wp:comment_date>2010-04-23 16:09:42</wp:comment_date>
		<wp:comment_date_gmt>2010-04-23 08:09:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[--compile]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>13</wp:comment_id>
		<wp:comment_author><![CDATA[bluker]]></wp:comment_author>
		<wp:comment_author_email>bluker@126.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>222.247.56.14</wp:comment_author_IP>
		<wp:comment_date>2010-04-23 16:10:11</wp:comment_date>
		<wp:comment_date_gmt>2010-04-23 08:10:11</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这个地方被自动替换掉了]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>14</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Amy]]></wp:comment_author>
		<wp:comment_author_email>amyb2@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.markzonder.com/</wp:comment_author_url>
		<wp:comment_author_IP>60.217.232.68</wp:comment_author_IP>
		<wp:comment_date>2010-06-06 21:31:54</wp:comment_date>
		<wp:comment_date_gmt>2010-06-06 13:31:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这个地方被自动替换掉了]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python MySQL 库安装笔记</title>
		<link>http://ddbean.wordpress.com/2009/11/10/python-mysql-%e5%ba%93%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Tue, 10 Nov 2009 07:11:05 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://pythonchina.org/smallfish/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[其实MySQL-python安装很简直，以前一直也没在意，今天发觉换了1.2.3新版本，ms蹦出很多问题来了。
做个记录，防止以后有问题无处可查。

一般步骤是：

1. 安装easy_install
<pre>shell &gt; wget http://peak.telecommunity.com/dist/ez_setup.py
shell &gt; python ez_setup.py</pre>
会自动根据本机的py版本选择对应的egg，安装完可以看到有/usr/bin/easy_install程序了

2. 安装MySQL-python
<pre>shell &gt; easy_install MySQL-python</pre>
到这里安装算是完成了，不过接下来测试就郁闷了。

在import MySQLdb出现了两个错误：
<pre>a). ImportError: libmysqlclient_r.so.15: cannot open shared object file: No such file or directory</pre>
这个错误一般解决比较简单，把路径加入到LD_LIBRARY_PATH即可，不过偶的现象比较强，因为没装MySQL，哈哈
<pre>b). ImportError: /lib/tls/libc.so.6: version `GLIBC_2.4' not found</pre>
解决这个错误的办法是不用easy_install了，直接下载MySQL-python-1.2.2.tar.gz包，然后就是三步走：
<pre>shell &gt; tar zxvf MySQL-python-1.2.2.tar.gz
shell &gt; cd MySQL-python-1.2.2
shell &gt; python setup.py install</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2009-11-10 15:11:05</wp:post_date>
		<wp:post_date_gmt>2009-11-10 07:11:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-mysql-%e5%ba%93%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258360610]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[362]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MySQL Query Profile 简单使用</title>
		<link>http://ddbean.wordpress.com/2009/11/16/mysql-query-profile-%e7%ae%80%e5%8d%95%e4%bd%bf%e7%94%a8/</link>
		<pubDate>Mon, 16 Nov 2009 08:27:12 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[MySQL]]></category>

		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>

		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[MySQL Query Profile MySQL 5.0.37 以上开始支持 MySQL Query Profiler, 可以查询到此 SQL 会执行多少时间, 并看出 CPU/Memory 使用量, 执行过程中 System lock, Table lock 花多少时间等等.

详细可以参见官方文档：<a href="http://dev.mysql.com/tech-resources/articles/using-new-query-profiler.html" target="_blank">Using the New MySQL Query Profiler</a>

启动
<pre>mysql&gt; set profiling=1;
Query OK, 0 rows affected (0.00 sec)</pre>
测试查询
<pre>mysql&gt; select count(*) from client where broker_id=2;
+----------+
| count(*) |
+----------+
|      200 |
+----------+
1 row in set (0.00 sec)</pre>
查看profiles
<pre>mysql&gt; show profiles;
+----------+------------+-----------------------------------------------+
| Query_ID | Duration   | Query                                         |
+----------+------------+-----------------------------------------------+
|        0 | 0.00007300 | set profiling=1                               |
|        1 | 0.00044700 | select count(*) from client where broker_id=2 |
+----------+------------+-----------------------------------------------+
2 rows in set (0.00 sec)</pre>
查看单条profile
<pre>mysql&gt; show profile for query 1;
+--------------------+------------+
| Status             | Duration   |
+--------------------+------------+
| (initialization)   | 0.00006300 |
| Opening tables     | 0.00001400 |
| System lock        | 0.00000600 |
| Table lock         | 0.00001000 |
| init               | 0.00002200 |
| optimizing         | 0.00001100 |
| statistics         | 0.00009300 |
| preparing          | 0.00001700 |
| executing          | 0.00000700 |
| Sending data       | 0.00016800 |
| end                | 0.00000700 |
| query end          | 0.00000500 |
| freeing items      | 0.00001200 |
| closing tables     | 0.00000800 |
| logging slow query | 0.00000400 |
+--------------------+------------+
15 rows in set (0.00 sec)

mysql&gt; alter table t engine=myisam;
Query OK, 112050 rows affected (0.64 sec)
Records: 112050  Duplicates: 0  Warnings: 0

mysql&gt; show profiles;
+----------+------------+-----------------------------------------------+
| Query_ID | Duration   | Query                                         |
+----------+------------+-----------------------------------------------+
|        0 | 0.00007300 | set profiling=1                               |
|        1 | 0.00044700 | select count(*) from client where broker_id=2 |
|        2 | 0.00003400 | set profiling=0                               |
|        3 | 0.00007400 | set profiling=1                               |
|        4 | 0.63789700 | alter table t engine=myisam                   |
|        5 | 0.00004000 | set profiling=0                               |
+----------+------------+-----------------------------------------------+
6 rows in set (0.00 sec)

mysql&gt; show profile for query 4;
+----------------------+------------+
| Status               | Duration   |
+----------------------+------------+
| (initialization)     | 0.00002900 |
| checking permissions | 0.00000800 |
| init                 | 0.00004000 |
| Opening table        | 0.00009400 |
| System lock          | 0.00000500 |
| Table lock           | 0.00000700 |
| setup                | 0.00004200 |
| creating table       | 0.00195800 |
| After create         | 0.00010900 |
| copy to tmp table    | 0.52264500 |
| rename result table  | 0.11289400 |
| end                  | 0.00004600 |
| query end            | 0.00000700 |
| freeing items        | 0.00001300 |
+----------------------+------------+
14 rows in set (0.00 sec)</pre>
查看cpu资源等信息
<pre>mysql&gt; show profile cpu for query 4;
+----------------------+------------+------------+------------+
| Status               | Duration   | CPU_user   | CPU_system |
+----------------------+------------+------------+------------+
| (initialization)     | 0.00002900 | 0.00000000 | 0.00000000 |
| checking permissions | 0.00000800 | 0.00000000 | 0.00000000 |
| init                 | 0.00004000 | 0.00000000 | 0.00000000 |
| Opening table        | 0.00009400 | 0.00100000 | 0.00000000 |
| System lock          | 0.00000500 | 0.00000000 | 0.00000000 |
| Table lock           | 0.00000700 | 0.00000000 | 0.00000000 |
| setup                | 0.00004200 | 0.00000000 | 0.00000000 |
| creating table       | 0.00195800 | 0.00000000 | 0.00100000 |
| After create         | 0.00010900 | 0.00000000 | 0.00000000 |
| copy to tmp table    | 0.52264500 | 0.55591600 | 0.04199300 |
| rename result table  | 0.11289400 | 0.00199900 | 0.00000000 |
| end                  | 0.00004600 | 0.00000000 | 0.00000000 |
| query end            | 0.00000700 | 0.00000000 | 0.00000000 |
| freeing items        | 0.00001300 | 0.00000000 | 0.00000000 |
+----------------------+------------+------------+------------+
14 rows in set (0.00 sec)</pre>
其他属性列表

* ALL - displays all information
* BLOCK IO - displays counts for block input and output operations
* CONTEXT SWITCHES - displays counts for voluntary and involuntary context switches
* IPC - displays counts for messages sent and received
* MEMORY - is not currently implemented
* PAGE FAULTS - displays counts for major and minor page faults
* SOURCE - displays the names of functions from the source code, together with the name and line number of the file in which the function occurs
* SWAPS - displays swap counts

设定profiling保存size
<pre>mysql&gt; show variables where variable_name='profiling_history_size'; # 默认15条</pre>
关闭
<pre>mysql&gt; set profiling=0;</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2009-11-16 16:27:12</wp:post_date>
		<wp:post_date_gmt>2009-11-16 08:27:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-query-profile-%e7%ae%80%e5%8d%95%e4%bd%bf%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258360034]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[230]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Win Python Pyrex 扩展</title>
		<link>http://ddbean.wordpress.com/2009/11/17/win-python-pyrex-%e6%89%a9%e5%b1%95/</link>
		<pubDate>Tue, 17 Nov 2009 09:39:32 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[在偶的ubuntu里编写pyrex程序编译成so还是挺爽的，用 timeit.Timer 测试性能提升不少，今天在windows也尝试了一番。

需要的工具有：
- Pyrex <a href="http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/" target="_blank">http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/</a>
- Dev C++ <a href="http://www.bloodshed.net/devcpp.html" target="_blank">http://www.bloodshed.net/devcpp.html</a>

Pyrex 可以通过easy_install Pyrex来安装。
Dev C++ 安装完在系统环境变量Path里加上Dev C++安装目录/bin 目录。

测试扩展代码：
<pre># file: foo.pyx
""" simple pyrex module """
cdef class Foo:
    """ foo doc ... """
    cdef char *name
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return "foo names: %s" % (self.name)

# file: setup.py
from distutils.core import setup
from distutils.extension import Extension
from Pyrex.Distutils import build_ext

setup(
    name='foo', ext_modules=[Extension("foo", ["foo.pyx"])],
    cmdclass={'build_ext':build_ext}
)</pre>
写好两个文件后，进入命令提示符：
<pre>C:\&gt;python setup.py build_ext --inplace -c mingw32
running build_ext
pyrexc foo.pyx --&gt; foo.c
building 'foo' extension
creating build
creating build\temp.win32-2.5
creating build\temp.win32-2.5\Release
C:\Program Files\DEV-CPP\Bin\gcc.exe -mno-cygwin -mdll -O -Wall -ID:\Python25\include -ID:\Python25\PC -c foo.c -o build\temp.win32-2.5\Release\foo.o writing build\temp.win32-2.5\Release\foo.def C:\Program Files\DEV-CPP\Bin\dllwrap.exe -mno-cygwin -mdll -static --entry _DllMain@12 --output-lib build\temp.win32-2.5\Release\libfoo.a --def build\temp.win32-2.5\Release\foo.def -s build\temp.win32-2.5\Release\foo.o -LD:\Python25\libs -L D:\Python25\PCBuild -lpython25 -lmsvcr71 -o foo.pyd</pre>
编译完毕，可以看到当前目录下多了：build目录、foo.c、foo.pyd。foo.pyd 即是编译好的二进制扩展。
<pre>C:\&gt;python
ActivePython 2.5.0.0 (ActiveState Software Inc.) based on
Python 2.5 (r25:51908, Mar 9 2007, 17:40:28) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import foo
&lt;module 'foo' from 'foo.pyd'&gt;
&gt;&gt;&gt; foo.Foo("smallfish")
foo names: smallfish</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2009-11-17 17:39:32</wp:post_date>
		<wp:post_date_gmt>2009-11-17 09:39:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>win-python-pyrex-%e6%89%a9%e5%b1%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258450901]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[263]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cython参考指南 - 编译</title>
		<link>http://ddbean.wordpress.com/2009/11/19/cython%e5%8f%82%e8%80%83%e6%8c%87%e5%8d%97-%e7%bc%96%e8%af%91/</link>
		<pubDate>Thu, 19 Nov 2009 07:03:13 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Cython]]></category>

		<category domain="tag" nicename="cython"><![CDATA[Cython]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[Cython代码跟Python不一样，必须要编译。

编译经过两个阶段：

* Cython编译.pyx文件为.c文件

* C编译器会把.c文件编译成.so文件(Windows上是.pyd)

以下会分节介绍几种方式来建立你的扩展模块。

注意： -a 选项，如果使用该选项将会为.c文件生成一份很漂亮的HTML文件，双击高亮的章节部分会展开代码，这对理解，优化和调试模块将会非常有帮助。

<strong>命令行</strong>

从命令行执行Cython编译器，输入选项和.pyx文件列表。
<pre>$ cython -a yourmod.pyx</pre>
会生成一个yourmod.c文件（指定-a选项会生成一个HTML文件）

编译.c文件取决于你的操作系统，请参考下如何在你的系统写Python扩展模块文档。

下面是一个Linux系统的例子：
<pre>$ gcc -shared -pthread -fPIC -fwrapv -O2 -Wall -fno-strict-aliasing \
 -I/usr/include/python2.5 -o yourmod.so yourmod.c</pre>
gcc需要提供包含的文件和扩展库的链接。

在目录里会生成yourmod.so文件。

现在只需要导入你的yourmod模块就可以了。
<strong>
Distutils</strong>

确保你的系统已经安装好Distutils。

下面假设需要编译的文件叫hello.pyx。

建立一个setup.py的脚本：
<pre>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

ext_modules = [Extension("hello", ["hello.pyx"])]

setup(
    name = ’Hello world app’,
    cmdclass = {’build_ext’: build_ext},
    ext_modules = ext_modules
)</pre>
在命令行执行：python setup.py build_ext --inplace

现在可以在shell或者脚本里正常导入使用了。
<strong>
Pyximport</strong>

在纯Python代码里调用Cython代码：
<pre>&gt;&gt;&gt; import pyximport; pyximport.install()
&gt;&gt;&gt; import helloworld
Hello World</pre>
这仅仅是简单调用Cython，不需要C库也不需要构建脚本。

当然也可以实验性的在Python调用。允许在Python模块中运行Cython代码在任何一个.pyx和.py模块。这包
括标准库和包。如果Cython编译失败的话，pyximport会返回到加载失败的模块处。

.py安装是这样：
<pre>&gt;&gt;&gt; pyximport.install(pyimport = True)</pre>
原文：<a href="http://docs.cython.org/src/reference/compilation.html" target="_blank">http://docs.cython.org/src/reference/compilation.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2009-11-19 15:03:13</wp:post_date>
		<wp:post_date_gmt>2009-11-19 07:03:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cython%e5%8f%82%e8%80%83%e6%8c%87%e5%8d%97-%e7%bc%96%e8%af%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260753478]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[324]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>17</wp:comment_id>
		<wp:comment_author><![CDATA[23号]]></wp:comment_author>
		<wp:comment_author_email>no.0023@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://n23.appspot.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>219.134.63.121</wp:comment_author_IP>
		<wp:comment_date>2009-11-19 17:20:52</wp:comment_date>
		<wp:comment_date_gmt>2009-11-19 09:20:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[不错。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>18</wp:comment_id>
		<wp:comment_author><![CDATA[creferow]]></wp:comment_author>
		<wp:comment_author_email>ngcastillovi@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.google.com</wp:comment_author_url>
		<wp:comment_author_IP>92.241.165.66</wp:comment_author_IP>
		<wp:comment_date>2009-12-14 08:20:25</wp:comment_date>
		<wp:comment_date_gmt>2009-12-14 00:20:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[i'm gonna make my own site about it]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>19</wp:comment_id>
		<wp:comment_author><![CDATA[kobe shoes]]></wp:comment_author>
		<wp:comment_author_email>oajtcnx@sina.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.shoesyahoo.com</wp:comment_author_url>
		<wp:comment_author_IP>66.154.107.130</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 10:00:33</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 02:00:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It is fascinating to me how this article about.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>20</wp:comment_id>
		<wp:comment_author><![CDATA[2010 New Herve Leger Dress]]></wp:comment_author>
		<wp:comment_author_email>chuntianhuahuikair@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.hervelegerdressesbuy.com</wp:comment_author_url>
		<wp:comment_author_IP>66.154.107.130</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 10:32:31</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 02:32:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[cool!!!!!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>21</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Cassandra]]></wp:comment_author>
		<wp:comment_author_email>cassandra53@gawab.com</wp:comment_author_email>
		<wp:comment_author_url>http://bigdiscounts.endoftheinternet.org/</wp:comment_author_url>
		<wp:comment_author_IP>85.72.35.240</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 21:36:58</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 13:36:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[不错。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>22</wp:comment_id>
		<wp:comment_author><![CDATA[quilting]]></wp:comment_author>
		<wp:comment_author_email>Kealy@roadrunner.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.quiltingboard.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.234.49.60</wp:comment_author_IP>
		<wp:comment_date>2010-08-19 13:47:16</wp:comment_date>
		<wp:comment_date_gmt>2010-08-19 05:47:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Wow that is talent! Sewing and knitting are popular answers! I think knitting is something I should take up! Thanks!]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Pysvn 程序员指南</title>
		<link>http://ddbean.wordpress.com/2009/11/20/pysvn-%e7%a8%8b%e5%ba%8f%e5%91%98%e6%8c%87%e5%8d%97/</link>
		<pubDate>Fri, 20 Nov 2009 09:31:48 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pysvn]]></category>

		<category domain="tag" nicename="pysvn"><![CDATA[Pysvn]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[这是一篇关于pysvn模块的指南.

完整和详细的API请参考 <a href="http://pysvn.tigris.org/docs/pysvn_prog_ref.html" target="_blank">pysvn Programmer's Reference</a>.

pysvn是操作Subversion版本控制的Python接口模块. 这个API接口可以管理一个工作副本, 查询档案库, 和同步两个.

该API不能创建新的仓库; 只能作用在现有仓库上. 如果你需要创建一个仓库, 请使用Subversion的svnadmin命令.

使用这个API, 你可以check out一份工作拷贝, 添加, 编辑, 和删除工作文件, 和check in, 比较, 或者放弃更改. 仓库属性, 如关键字扩展, 行字符结束, 或者忽略的列表也可以检查和控制.

<strong>Subversion 模型</strong>

Subversion是一个更新-编辑-提交的模型. 首先在本地建立一个工作副本. 在工作副本上进行修改, 最后提交到中央仓库 (可以是本地或者远程).

这个模型允许多人偶尔会同时修改同一个文件. 大多情况下. Subversion不会干预合并这些不同修改, 如果一个提交失败, 用户或者应用则要重新检查和修改然后再次提交.

<strong>常见任务</strong>

本节给出一些使用pysvn接口的常用例子. 业务可以会递归的处理目录. 添加参数recurse=False以防止这种行为; 例如, 你可以需要添加内容没有增加一个目录.
<strong>
check out一份工作副本</strong>
<pre>import pysvn
client = pysvn.Client()
#check out the current version of the pysvn project
client.checkout('http://localhost/example/trunk',
    './examples/pysvn')
#check out revision 11 of the pysvn project
client.checkout('http://localhost/example/trunk',
   './examples/pysvn-11',
   revision=pysvn.Revision(pysvn.opt_revision_kind.number, 11))</pre>
这是一个建立example测试项目的例子，目录是examples/pysvn. 这个项目是用在剩下的例子.

<strong>添加一个文件或者目录到仓库</strong>
<pre>import pysvn
# write a file foo.txt
f = file('./examples/pysvn/foo.txt', 'w')
f.write('Sample versioned file via pithon\n')
f.close()
client = pysvn.Client()
#schedule the addition;
#  the working copy will now track the file as a scheduled change
client.add('./examples/pysvn/foo.txt')
#committing the change actually adds the file to the repository
client.checkin(['./examples/pysvn/foo.txt'], 'Adding a sample file')</pre>
这个例子是在工作副本中创建了'foo.txt'文件, 然后添加到仓库. 请注意Client.import_()命令会同时增加和提交. 大多数应用, 会在许多修改后再提交.
<strong>
更新工作副本</strong>
<pre>import pysvn
client = pysvn.Client()
client.update('./examples/pysvn')</pre>
从仓库中更新其他用户修改并保存到本地副本. 大多数应用应该经常这样做以防止冲突.
<strong>
提交更新到仓库</strong>
<pre>import pysvn
# edit the file foo.txt
f = open('./examples/pysvn/foo.txt', 'w')
f.write('Sample versioned file via python\n')
f.close()
# checkin the change with a log message
client = pysvn.Client()
client.checkin(['./examples/pysvn'], 'Corrected spelling of python in foo.txt')</pre>
提交到Subversion是原子的. 要么所有修改都成功提交, 要么提交失败. 大部分应用会提交工作副本所有修改, 如本例所示, 或者通过个别文件或者目录, 但必须是同一单位.
<strong>
放弃工作副本修改</strong>
<pre>import pysvn
# edit the file foo.txt
f = file('./examples/pysvn/foo.txt', 'w')
f.write('This change will never be seen\n')
f.close()
#discard the edits
client = pysvn.Client()
client.revert('./examples/pysvn/foo.txt')</pre>
这丢弃在工作拷贝和恢复的文件或目录的任何未提交的未经编辑的状态变化.

正在计划增加或移除留无版本或恢复到工作拷贝.
<strong>
重命名或者移动文件</strong>
<pre>import pysvn
client = pysvn.Client()
#rename the file client side
client.move('./examples/pysvn/foo.txt', './examples/pysvn/foo2.txt')
#checkin the change removes the file from the repository
client.checkin(['./examples/pysvn/foo.txt', './examples/pysvn/foo2.txt'], 'Foo has become Foo2')</pre>
移动或重命名文件删除旧路径或名称的文件, 并增加了在新的位置, 同时保留以前的版本有关的信息.

在这个例子里, 我们通过文件名Client.checkin()传递父目录也将是有效的.

转移和合并可以在服务器端单步完成; 可以参见仓库任务的那节例子.
<strong>
从仓库中删除文件或目录</strong>
<pre>import pysvn
client = pysvn.Client()
#schedule the removal;
#  the file will be removed from the working copy
client.remove('./examples/pysvn/foo2.txt')
#committing the change removes the file from the repository
client.checkin(['./examples/pysvn/foo2.txt'], 'Removing sample file')</pre>
有些人把删除的文件, 或是用完全清除存储库目录. 该文件仍然存在于以前的版本, 可以通过检查或以其他方式进行审查以前修订的内容检索.
<strong>
确定等待变动</strong>
<pre>import pysvn
client = pysvn.Client()
changes = client.status('./examples/pysvn')
print 'files to be added:'
print [f.path for f in changes if f.text_status == pysvn.wc_status_kind.added]
print 'files to be removed:'
print [f.path for f in changes if f.text_status == pysvn.wc_status_kind.deleted]
print 'files that have changed:'
print [f.path for f in changes if f.text_status == pysvn.wc_status_kind.modified]
print 'files with merge conflicts:'
print [f.path for f in changes if f.text_status == pysvn.wc_status_kind.conflicted]
print 'unversioned files:'
print [f.path for f in changes if f.text_status == pysvn.wc_status_kind.unversioned]</pre>
<strong>生成差异或补丁</strong>
<pre>import pysvn
client = pysvn.Client()
diff_text = client.diff('./tmp-file-prefix-', '.')</pre>
<strong>获取仓库URL</strong>
<pre>import pysvn
client = pysvn.Client()
entry = client.info('.')
print 'Url:',entry.url</pre>
<strong>仓库任务</strong>

本节说明任务的例子, 操纵或检查仓库.虽然共同任务, 通过本地工作副本时间的变化, 这些任务直接影响到库
获取仓库目录的清单
<pre>import pysvn
client = pysvn.Client()
entry_list = client.ls('.')</pre>
<strong>从仓库获取文件内容</strong>
<pre>import pysvn
client = pysvn.Client()
file_content = client.cat('file.txt')</pre>
<strong>创建一个标记或分支</strong>
<pre>import pysvn
client = pysvn.Client()
log_message = "reason for change"
def get_log_message():
    return True, log_message
client.callback_get_log_message = get_log_message
client.copy('http://svnrepo.com/svn/trunk', 'http://svnrepo.com/svn/tag/%s' % tag_name )</pre>
<strong>从仓库中转移或者重命名</strong>
<pre>import pysvn
client = pysvn.Client()
client.move( 'file_old.txt', 'file_new.txt' )</pre>
<strong>锁定文件</strong>
<pre>import pysvn
client = pysvn.Client()
client.lock( 'file.txt', 'reason for locking' )</pre>
<strong>锁定文件并锁定其他用户或者工作副本</strong>
<pre>import pysvn
client = pysvn.Client()
client.lock( 'file.txt', 'reason for locking', force=True )</pre>
<strong>解锁</strong>
<pre>import pysvn
client = pysvn.Client()
client.unlock( 'file.txt' )</pre>
<strong>解锁文件并锁定其他用户或工作副本</strong>
<pre>import pysvn
client = pysvn.Client()
client.unlock( 'file.txt', force=True )</pre>
<strong>测试锁定文件</strong>

Method 1:
<pre>all_entries = self.client.info2( path, recurse=False )
for path, info in all_entries:
    if info['lock']:
        if info['lock']['token'] != '':
            print '%s is locked' % path
        print info['lock']['comment']</pre>
Method 2:
<pre>all_status = self.client.status( path, recurse=False, update=True )
for status in all_status:
    if status.entry is not None:
        if status.entry.lock_token is not None:
            print '%s is locked' % status.path</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2009-11-20 17:31:48</wp:post_date>
		<wp:post_date_gmt>2009-11-20 09:31:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pysvn-%e7%a8%8b%e5%ba%8f%e5%91%98%e6%8c%87%e5%8d%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1258709511]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[360]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>24</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention 小鱼笔记 » Pysvn 程序员指南 -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/tb/chenxiaoyu.org/blog/archives/75</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2009-12-04 06:55:19</wp:comment_date>
		<wp:comment_date_gmt>2009-12-03 22:55:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by 陈小鱼, mikale. mikale said: http://chenxiaoyu.org/blog/archives/75 鱼哥这里竟然存在这么多好货,竟然不分享..这家伙要批判啊 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>tornado.database添加PooledDB连接池功能</title>
		<link>http://ddbean.wordpress.com/2009/12/01/tornado-database%e6%b7%bb%e5%8a%a0pooleddb%e8%bf%9e%e6%8e%a5%e6%b1%a0%e5%8a%9f%e8%83%bd/</link>
		<pubDate>Tue, 01 Dec 2009 07:36:57 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[tornado]]></category>

		<category domain="tag" nicename="tornado"><![CDATA[tornado]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[tornado.database模块简单包装了下对MySQL的操作，短小精悍。

无奈源码中无连接池功能，遂加上了一段DBUtils模块功能。

主要修改了reconnect()方法，大致在database.py第86行左右。(tornado 0.2 win版)

原代码如下：
<pre>    def reconnect(self):
        """Closes the existing database connection and re-opens it."""
        self.close()
        self._db = MySQLdb.connect(**self._db_args)
        self._db.autocommit(True)</pre>
修改后：
<pre>    def reconnect(self):
        """Closes the existing database connection and re-opens it."""
        self.close()
        try:
            from DBUtils import PooledDB
            pool_con = PooledDB.PooledDB(creator=MySQLdb, **self._db_args)
            self._db = pool_con.connection()
        except:
            self._db = MySQLdb.connect(**self._db_args)
            self._db.autocommit(True)</pre>
至于安装DBUtils模块可以去<a href="http://pypi.python.org/pypi/DBUtils/" target="_blank">http://pypi.python.org/pypi/DBUtils/</a>下载，也可以简单的用easy_install：
<pre>easy_install -U DBUtils</pre>
PooledDB有这么几个参数：
<pre>
* creator
    可以生成 DB-API 2 连接的任何函数或 DB-API 2 兼容的数据库连接模块。
* mincached
    启动时开启的空连接数量(缺省值 0 意味着开始时不创建连接)
* maxcached
    连接池使用的最多连接数量(缺省值 0 代表不限制连接池大小)
* maxshared
    最大允许的共享连接数量(缺省值 0 代表所有连接都是专用的)
* maxconnections
    最大允许连接数量(缺省值 0 代表不限制)
* blocking
    设置在达到最大数量时的行为(缺省值 0 或 False)
* maxusage
    单个连接的最大允许复用次数(缺省值 0 或 False 代表不限制的复用)
* setsession:
    一个可选的SQL命令列表用于准备每个会话，如 ["set datestyle to german", ...]
</pre>

creator 函数或可以生成连接的函数可以接受这里传入的其他参数，例如主机名、数据库、用户名、密码等。你还可以选择传入creator函数的其他参数，允许失败重连和负载均衡。

具体可以参照下：<a href="http://www.webwareforpython.org/DBUtils/Docs/UsersGuide.zh.html" target="_blank">http://www.webwareforpython.org/DBUtils/Docs/UsersGuide.zh.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2009-12-01 15:36:57</wp:post_date>
		<wp:post_date_gmt>2009-12-01 07:36:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tornado-database%e6%b7%bb%e5%8a%a0pooleddb%e8%bf%9e%e6%8e%a5%e6%b1%a0%e5%8a%9f%e8%83%bd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1259654268]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[454]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>26</wp:comment_id>
		<wp:comment_author><![CDATA[microdict]]></wp:comment_author>
		<wp:comment_author_email>micro.dict@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://newdict.com</wp:comment_author_url>
		<wp:comment_author_IP>218.202.128.12</wp:comment_author_IP>
		<wp:comment_date>2009-12-01 16:20:20</wp:comment_date>
		<wp:comment_date_gmt>2009-12-01 08:20:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这个方法在类中，我觉得通过继承的方式处理这个方法更稳妥些。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>27</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>61.155.8.66</wp:comment_author_IP>
		<wp:comment_date>2009-12-01 16:23:49</wp:comment_date>
		<wp:comment_date_gmt>2009-12-01 08:23:49</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-6" rel="nofollow">@microdict </a>
因为本身这个类就很小，直接修改之~~~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>28</wp:comment_id>
		<wp:comment_author><![CDATA[23号]]></wp:comment_author>
		<wp:comment_author_email>no.0023@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://n23.appspot.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>219.134.63.121</wp:comment_author_IP>
		<wp:comment_date>2009-12-01 21:22:46</wp:comment_date>
		<wp:comment_date_gmt>2009-12-01 13:22:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[from web.py:

        def get_pooled_db():
            from DBUtils import PooledDB

            # In DBUtils 0.9.3, `dbapi` argument is renamed as `creator`
            # see Bug#122112

            if PooledDB.__version__.split('.') &lt; &#039;0.9.3&#039;.split(&#039;.&#039;):
                return PooledDB.PooledDB(dbapi=self.db_module, **keywords)
            else:
                return PooledDB.PooledDB(creator=self.db_module, **keywords)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>29</wp:comment_id>
		<wp:comment_author><![CDATA[23号]]></wp:comment_author>
		<wp:comment_author_email>no.0023@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://n23.appspot.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>219.134.63.121</wp:comment_author_IP>
		<wp:comment_date>2009-12-01 21:23:43</wp:comment_date>
		<wp:comment_date_gmt>2009-12-01 13:23:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[from web.py

        def get_pooled_db():
            from DBUtils import PooledDB

            # In DBUtils 0.9.3, `dbapi` argument is renamed as `creator`
            # see Bug#122112

            if PooledDB.__version__.split('.') &lt; &#039;0.9.3&#039;.split(&#039;.&#039;):
                return PooledDB.PooledDB(dbapi=self.db_module, **keywords)
            else:
                return PooledDB.PooledDB(creator=self.db_module, **keywords)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>30</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>61.155.8.66</wp:comment_author_IP>
		<wp:comment_date>2009-12-04 08:00:43</wp:comment_date>
		<wp:comment_date_gmt>2009-12-04 00:00:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<blockquote cite="#commentbody-9">
<strong><a href="#comment-9" rel="nofollow">23号</a> :</strong>
from web.py
        def get_pooled_db():
            from DBUtils import PooledDB
            # In DBUtils 0.9.3, `dbapi` argument is renamed as `creator`
            # see Bug#122112
            if PooledDB.__version__.split(’.') &lt; '0.9.3'.split('.'):
                return PooledDB.PooledDB(dbapi=self.db_module, **keywords)
            else:
                return PooledDB.PooledDB(creator=self.db_module, **keywords)
</blockquote>
恩，这个代码我看过，我这因为DBUtils版本已经超过0.9了，所以就没加判断。
猜想如果玩tornado的话，肯定应该都是新版的啦]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>31</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Bruce]]></wp:comment_author>
		<wp:comment_author_email>bruce1976@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.dobox.com/</wp:comment_author_url>
		<wp:comment_author_IP>202.108.50.75</wp:comment_author_IP>
		<wp:comment_date>2010-05-23 04:51:24</wp:comment_date>
		<wp:comment_date_gmt>2010-05-22 20:51:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<blockquote cite="#commentbody-9">
<strong><a href="#comment-9" rel="nofollow">23号</a> :</strong>
from web.py
        def get_pooled_db():
            from DBUtils import PooledDB
            # In DBUtils 0.9.3, `dbapi` argument is renamed as `creator`
            # see Bug#122112
            if PooledDB.__version__.split(’.') &lt; &#039;0.9.3&#039;.split(&#039;.&#039;):
                return PooledDB.PooledDB(dbapi=self.db_module, **keywords)
            else:
                return PooledDB.PooledDB(creator=self.db_module, **keywords)
</blockquote>
恩，这个代码我看过，我这因为DBUtils版本已经超过0.9了，所以就没加判断。
猜想如果玩tornado的话，肯定应该都是新版的啦]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>使用Git维护你的网站</title>
		<link>http://ddbean.wordpress.com/2009/12/08/%e4%bd%bf%e7%94%a8git%e7%bb%b4%e6%8a%a4%e4%bd%a0%e7%9a%84%e7%bd%91%e7%ab%99/</link>
		<pubDate>Tue, 08 Dec 2009 02:12:54 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Git]]></category>

		<category domain="tag" nicename="git"><![CDATA[Git]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignnone size-full wp-image-92" title="git-tree" src="http://chenxiaoyu.org/wp-content/uploads/2009/12/git-tree.gif" alt="git-tree" width="263" height="316" />

<strong>简介</strong>

git是由<a href="http://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank">Linus Torvalds</a>编写的一个开放源码的版本控制系统. 它的主要目标是高度分散, 效率超过其他竞争对手.

我就是使用git维护本网站. 我知道git不应该这样的粗重任务的使用, 即每一个开发者维护一份代码拷贝, 但是它工作的很好, 所有我使用它.

本文的目的就是说明如何在家里或者笔记本里维护一个本地拷贝, 然后让这些修改提交到互联网主机上. 下面就是介绍如何设置.

<strong>安装</strong>
<pre># Gentoo
emerge git</pre>
<pre># Debian/Ubuntu
apt-get install git-core</pre>
<pre># RedHat/Fedora
yum install git</pre>
<strong>初始化</strong>

你会进入你的服务器的目录和初始化git仓库.
<pre># 进入你的web目录
cd /$wherever/html/</pre>
<pre># 初始化仓库
git init</pre>
<pre># 添加所有内容
git add .</pre>
<pre># 提交 -m备注
git commit -a -m "The Initial Import."</pre>
然后返回你的html父目录, 克隆新的git-ized web目录.
<pre># 返回你的html目录
cd ..</pre>
<pre># 克隆你的web目录到 html.git
git clone --bare html html.git</pre>
现在你已经初始化好了仓库, 并将整个目录(递归)到该库中, 并进行了初次提交, 为web目录建立了一个git克隆. 这个git目录(html.git)是整个过程的关键.

<strong>获取一份开发环境的拷贝</strong>

1. 转到你的开发系统
2. 安装git
3. 从你的开发目录运行下面命令
<pre>git clone ssh://yoursite.com/path/to/html.git</pre>
现在已经获得一个完整的网站服务器版本的本地拷贝.

使你的web目录克隆Git目录

记住, 你的html.git是这里的关键, 而不是现有的html目录, 所以你要切换出来, 备份目录, 然后:
<pre># 备份html目录, 然后克隆html.git
mv html html.backup; git clone html.git</pre>
这在当前目录获取一份html.git的拷贝, 当然名字还是html. 这就是为什么备份旧的html目录.

<strong>自动推送修改</strong>

把你的html.git目录添加到post-update钩子中
<pre>cd ../htdocs
env -i git pull</pre>
修改钩子程序为可执行
<pre>chmod +x post-update</pre>
<strong>在你的开发环境的变动 </strong>

现在编辑的网站, 打开一个新的TextMate项目(你使用TextMate对吗?), 并拖动到html克隆目录. 整个结构都准备好了.

1. 通常的变动
2. 保存更改
3. 运行下面的程序, 例如(QuickSearchBox, TextMate等)
<pre># This is for an OS X box
cd /Users/daniel/Development/html/
git commit -a -m "Another update."
git push</pre>
这基本上是更新到git仓库最重要的两个命令: commit(注意:你的标记(如果想回滚的话))和push(推送到服务器).

<strong>[根据你的操作系统和git安装, 你可能需要chmod +x 钩子程序, 然后再继续]</strong>

现在你只需要激活post-update 钩子程序, 将会自动的获取web目录.

如果你在服务器端的操作基本也是相同的git commit和git push, 然后你的开发环境下git pull同步备份就可以了. 当然你还可以使用脚本, 如果你需要的话.

原文参见: <a href="http://danielmiessler.com/blog/using-git-to-maintain-your-website" target="_blank">http://danielmiessler.com/blog/using-git-to-maintain-your-website</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2009-12-08 10:12:54</wp:post_date>
		<wp:post_date_gmt>2009-12-08 02:12:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8git%e7%bb%b4%e6%8a%a4%e4%bd%a0%e7%9a%84%e7%bd%91%e7%ab%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1274075112]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[592]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>32</wp:comment_id>
		<wp:comment_author><![CDATA[天缘]]></wp:comment_author>
		<wp:comment_author_email>lovoner@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.metsky.com</wp:comment_author_url>
		<wp:comment_author_IP>119.122.14.224</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 18:47:02</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 10:47:02</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我以前用过CVS，感觉git很类似，一直不大习惯CVS，为了防止误操作，本地工作还是要备份一个，同步换个目录]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>33</wp:comment_id>
		<wp:comment_author><![CDATA[reeze]]></wp:comment_author>
		<wp:comment_author_email>reeze.xia@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://reeze.cn</wp:comment_author_url>
		<wp:comment_author_IP>72.52.94.226</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 19:52:52</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 11:52:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我也是用这种方式管理的，不过每次push好后都ssh到主机上git pull， 忘了还有post-update脚本。。不错。。呵呵]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>34</wp:comment_id>
		<wp:comment_author><![CDATA[reeze]]></wp:comment_author>
		<wp:comment_author_email>reeze.xia@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://reeze.cn</wp:comment_author_url>
		<wp:comment_author_IP>72.52.94.226</wp:comment_author_IP>
		<wp:comment_date>2009-12-13 19:53:27</wp:comment_date>
		<wp:comment_date_gmt>2009-12-13 11:53:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-12" rel="nofollow">@天缘 </a>
cvs还是太难用了。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>emacs windows配置笔记</title>
		<link>http://ddbean.wordpress.com/2009/12/10/emacs-windows%e9%85%8d%e7%bd%ae%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Thu, 10 Dec 2009 08:53:41 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Editor]]></category>

		<category domain="category" nicename="editor"><![CDATA[Editor]]></category>

		<category domain="tag"><![CDATA[Emacs]]></category>

		<category domain="tag" nicename="emacs"><![CDATA[Emacs]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[俺最新.emcas配置地址是：<a href="http://github.com/smallfish/editor/blob/master/emacs/.emacs" target="_blank">http://github.com/smallfish/editor/blob/master/emacs/.emacs</a>

最近手痒，看到不少牛x人物都是用emacs，遂在windows下装一个玩玩。

下载地址：<a href="http://ftp.gnu.org/pub/gnu/emacs/windows/emacs-23.1-bin-i386.zip" target="_blank">http://ftp.gnu.org/pub/gnu/emacs/windows/emacs-23.1-bin-i386.zip</a>

解压到：D:\emacs-23.1

可以看到bin、etc、lisp等目录。主要运行都在bin目录。

runemacs.exe   这个就是运行文件拉，可以发送到桌面快捷方式。

可以运行一下addpm.exe这个，其作用就是把emacs加入到开始程序菜单里。

试着运行一下runemacs.exe，可以发现默认光标的位置，那是一个入门教程喔，还是中文的耶~

建议都看下这个入门的教程，常用的快捷键都有说明。

接下来加点常用的功能把，比如显示行号，goto line的功能。(俺也只配置了这个两项)

配置文件主要是_emacs或者.emacs，win下建议_emacs，点号开头的文件需要到cmd下才行。

_emacs文件放到哪儿呢？俺是直接修改了win注册表选项。

选项是：<strong>HKEY_CURRENT_USER\Software\GNU\Emacs</strong>，注意GNU\Emacs是需要新建的。接下来在Emacs里新建一个<strong>HOME</strong>项，值是你的emacs路径，比如我的：D:\emacs-23.1\bin。

然后需要做的就是把_emacs文件在这个bin目录下。

经过几经周折，显示行号和goto功能的配置如下：
<pre>(global-linum-mode 1)
(global-set-key [(meta g)] 'goto-line)</pre>
第一行是显示行号

第二行是设置meta+g转到goto功能，meta在windows下可以用alt来操作。

其他功能以后在后续补上，快捷键挺多，用了一会手指发酸。C-x 数字(1 2 3)挺好，可以开多窗口浏览了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2009-12-10 16:53:41</wp:post_date>
		<wp:post_date_gmt>2009-12-10 08:53:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>emacs-windows%e9%85%8d%e7%bd%ae%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1261976389]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[350]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>35</wp:comment_id>
		<wp:comment_author><![CDATA[筱白]]></wp:comment_author>
		<wp:comment_author_email>lierby@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.lierby.com.cn</wp:comment_author_url>
		<wp:comment_author_IP>119.161.164.76</wp:comment_author_IP>
		<wp:comment_date>2009-12-14 17:39:52</wp:comment_date>
		<wp:comment_date_gmt>2009-12-14 09:39:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[网站这么快就有广告了哇。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>使用 Perl 快速解析 Apache Log</title>
		<link>http://ddbean.wordpress.com/2009/12/15/%e4%bd%bf%e7%94%a8-perl-%e5%bf%ab%e9%80%9f%e8%a7%a3%e6%9e%90-apache-log/</link>
		<pubDate>Tue, 15 Dec 2009 01:11:24 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<category><![CDATA[Perl]]></category>

		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>

		<category domain="tag"><![CDATA[Perl]]></category>

		<category domain="tag" nicename="perl"><![CDATA[Perl]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>功能简述</strong>

统计出日志里一个或多个页面总共访问的次数，比如aa.jsp, bb.jsp这样页面分别多少次。

<strong>实现简述</strong>

Apache单个日志文件800M。

最初程序使用Python编写，按行来统计，分别使用in(最慢)和index方法去查找，然后使用了正则匹配，程序运行时间从最初的1分50多秒优化到1分10秒左右，参考了<a href="http://www.dup2.org/node/1006" target="_blank">qyb</a>博客中提到的gc.disable()，有了一定的提升，最终还是需要1分左右。

然后随意用了Perl写了一个，用了最土鳖的&lt;LOG&gt;这样的按行分析，最后正则匹配，然后++，速度竟然在40-50秒之间，惊叹！后来经过<a href="http://shucho.org/blog/" target="_blank">shucho</a>指点，在正则部分采用了预编译，效果那是相当惊人！800M文件只用了7秒左右。卧槽！

<strong>程序片段</strong>
<pre># --------------------------------------------------------------------
use strict;
use Benchmark;

my $LOG_FILE = '/usr/local/apache/logs/access.log';
# 下面qr部分起了关键作用，预编译了表达式
my @EXT_LIST = map {qr/$_/} qw{
aaServlet
bbServlet
};

my $startime = new Benchmark;
my %result;
map {$result{$_} = 0} @EXT_LIST;
open LOG_FILE, $LOG_FILE;
while (&lt;LOG_FILE&gt;){
    foreach my $ext (@EXT_LIST){
        $result{$ext}++ if $_ =~ /$ext/;
    }
}
close LOG_FILE;

while (my ($key, $value) = each(%result)){
    $key =~ s/\(\?-xism:(.*?)\)/$1/g;
    print "$key:\t$value\n";
}

printf "** %s\n\n", timestr(timediff(new Benchmark, $startime));</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2009-12-15 09:11:24</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:11:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8-perl-%e5%bf%ab%e9%80%9f%e8%a7%a3%e6%9e%90-apache-log</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345921]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[257]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>SSH Tunnel &amp;&amp; Memcached</title>
		<link>http://ddbean.wordpress.com/2009/12/15/ssh-tunnel-memcached/</link>
		<pubDate>Tue, 15 Dec 2009 01:15:09 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Memcached]]></category>

		<category domain="category" nicename="memcached"><![CDATA[Memcached]]></category>

		<category domain="tag"><![CDATA[Memcached]]></category>

		<category domain="tag" nicename="memcached"><![CDATA[Memcached]]></category>

		<category domain="tag"><![CDATA[SSH]]></category>

		<category domain="tag" nicename="ssh"><![CDATA[SSH]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[最近一台服务器放进了移动机房，需要访问原电信机房一台Memcached服务器，Memcached服务是以内网形式启动。

依靠google大神，搜索出解决思路，在本地起一个SSH链接，通过本地一个端口实现对另外机器的映射或者叫做转发。

上周本来已经搞定，本周突发灵异事件，竟然不管了，最后百般尝试，完成结果如下：

移动机器IP：220.xxx.xxx.xxx 电信机器IP：155.xxx.xxx.xxx

在移动机器上执行：
<pre>shell &gt; ssh -N -f -L 11211:192.168.0.xxx:11211 root@155.xxx.xxx.xxx</pre>
11211:192.168.0.xxx:11211，格式为：本地端口:memcache启动的IP:端口
这里没有用RSA认证，就直接输入密码。-N 是不需要shell，-f 是程序后台执行，其他参数参见ssh --help。
<pre>shell &gt; ps aux</pre>
可以看见进程已经在了，下面开始测试代码。
<pre>
&gt;&gt;&gt; import memcache
&gt;&gt;&gt; mc = memcache.Client(['127.0.0.1:11211'],debug=True)
&gt;&gt;&gt; print mc.get('name')</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2009-12-15 09:15:09</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:15:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssh-tunnel-memcached</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345911]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[237]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Perl 批量跳过 MySQL Slave 复制错误</title>
		<link>http://ddbean.wordpress.com/2009/12/15/perl-%e6%89%b9%e9%87%8f%e8%b7%b3%e8%bf%87-mysql-slave-%e5%a4%8d%e5%88%b6%e9%94%99%e8%af%af/</link>
		<pubDate>Tue, 15 Dec 2009 01:19:12 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[MySQL]]></category>

		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>

		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<category><![CDATA[Perl]]></category>

		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>

		<category domain="tag"><![CDATA[Perl]]></category>

		<category domain="tag" nicename="perl"><![CDATA[Perl]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[发现mysql slave服务器经常因为一些特殊字符或者符号产生的更新语句报错，整个同步也会因此而卡在那，最初的办法只是手动去出错的机器，执行下面三条sql语句，跳过错误即可。
<pre>
slave stop;
set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
slave start;
</pre>
一台slave机器用这样方法还行，多台就麻烦了，就顺手写了个简单的perl脚本，方便统一跳过错误，代码如下：
<pre>
#!/usr/bin/env perl
use strict;
use warnings;

# get slave status
sub get_status {
    my ($ip, $usr, $pass) = @_;
    my $info = `mysql -u$usr -p$pass -h$ip -e 'show slave status\\G;'`;
    if (($info =~ /Slave_IO_Running: Yes/) &amp;&amp; ($info =~ /Slave_SQL_Running: No/)) {
        return 1;
    }
    return 0;
}
# mysql slave skip
sub slaveskip {
    my ($ip, $usr, $pass) = @_;
    print "slave error **\n";
    system("mysql -u$usr -p$pass -h$ip -e 'slave stop;'");
    system("mysql -u$usr -p$pass -h$ip -e 'set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;'");
    system("mysql -u$usr -p$pass -h$ip -e 'slave start;'");
}

my @hosts = qw/
192.168.0.101:root:tt1234
192.168.0.102:root: tt1234
192.168.0.103:root: tt1234
/;
foreach (@hosts) {
    my ($ip, $usr, $pass) = split ':';
    print "// ----- $ip\n";
    my $count = 1;
    while ($count &lt; 100000) {
        my $status = get_status($ip, $usr, $pass);
        print "i: $count status: $status\n";
        last if $status == 0;
        slaveskip($ip, $usr, $pass);
        select(undef, undef, undef, 0.1);
        $count++;
    }
    print "\n";
}

exit;
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2009-12-15 09:19:12</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:19:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>perl-%e6%89%b9%e9%87%8f%e8%b7%b3%e8%bf%87-mysql-slave-%e5%a4%8d%e5%88%b6%e9%94%99%e8%af%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345896]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[243]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>mysqldumpslow 慢查询日志分析工具</title>
		<link>http://ddbean.wordpress.com/2009/12/15/mysqldumpslow-%e6%85%a2%e6%9f%a5%e8%af%a2%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90%e5%b7%a5%e5%85%b7/</link>
		<pubDate>Tue, 15 Dec 2009 01:21:27 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[MySQL]]></category>

		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>

		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[mysql自带的这个玩意挺好使的，可以对慢查询里的sql进行排序、计算等操作。

首先得配置my.cnf：
<pre>
log_slow_queries = /path/slow.log # 定义log位置，注意要有写入的权限
</pre>
具体的使法如下：
<pre>
mysqldumpslow -s c -t 40 /path/slow.log
</pre>
出来的结果是访问次数最多的40个sql，几个参数大概意思如下：
<pre>
-t 显示多少条
-s 排序，默认是at。c是次数，t是时间，l是lock时间，r是返回结果。如果是ac，at，al，ar则是倒序
-g 可以用正则匹配部分语句
</pre>
可以参考mysqldumpslow --help，通过这个工具可以看到哪些锁表，或者其他性能问题，还能看到某些SQL_NO_CACHE提示呢，去想办法优化把！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2009-12-15 09:21:27</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:21:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysqldumpslow-%e6%85%a2%e6%9f%a5%e8%af%a2%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90%e5%b7%a5%e5%85%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260840089]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[205]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Memcached Java &amp;&amp; Python Client API 共享</title>
		<link>http://ddbean.wordpress.com/2009/12/15/memcached-java-python-client-api-%e5%85%b1%e4%ba%ab/</link>
		<pubDate>Tue, 15 Dec 2009 01:24:22 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Java]]></category>

		<category domain="category" nicename="java"><![CDATA[Java]]></category>

		<category domain="tag"><![CDATA[Java]]></category>

		<category domain="tag" nicename="java"><![CDATA[Java]]></category>

		<category><![CDATA[Memcached]]></category>

		<category domain="category" nicename="memcached"><![CDATA[Memcached]]></category>

		<category domain="tag"><![CDATA[Memcached]]></category>

		<category domain="tag" nicename="memcached"><![CDATA[Memcached]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[用Python写了一个计划任务，定时更新Memcached中一个key值，写的很happy，几分钟搞定。

然后在Java Servlet测试，代码写的也很happy，编译 - 刷新，一气呵成。

然后发现值一直是null，再tail日志看看，异常不断：
<pre>com.danga.MemCached.MemCachedClient Mon Jul 20 09:37:04 CST 2009 - ++++ exception thrown while trying to get object from cache for key: test_num
 com.danga.MemCached.MemCachedClient Mon Jul 20 09:37:04 CST 2009 - 3
 com.danga.MemCached.NestedIOException: 3
 at com.danga.MemCached.MemCachedClient.get(MemCachedClient.java:1408)
 at com.danga.MemCached.MemCachedClient.get(MemCachedClient.java:1270)</pre>
晕倒，记得以前为了让两个语言实现API读写共享，手动去修改了两个的API包，实现了中文互读写。难不成今儿个还要手动去搞一把？

然后手动试了下：
<pre>
shell&gt; telnet xxxxxx 11211
get test_num
VALUE test_num 4 2
23</pre>
经查证VALUE协议返回的是 key flags len \r\n value 这样的格式，大悟：原来flags不一样啊，Java里面对int型赋值以后flags是0，而Python里则不一样，两者序列化的东西不同啊。懒得去 折腾两者序列化有啥不同。来点直接的把。

然后打开Python Memcached API，大概578行_val_to_store_info方法里，可以看到flags部分，是根据变量类型进行定义的，isinstance(val, str) 如果是str则pass。

到这里就简单了，直接在py代码里：mc.set('test_num', str(num))

Java读取OK。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2009-12-15 09:24:22</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:24:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memcached-java-python-client-api-%e5%85%b1%e4%ba%ab</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345881]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[263]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Pexpect通过SSH执行远程命令</title>
		<link>http://ddbean.wordpress.com/2009/12/15/pexpect%e9%80%9a%e8%bf%87ssh%e6%89%a7%e8%a1%8c%e8%bf%9c%e7%a8%8b%e5%91%bd%e4%bb%a4/</link>
		<pubDate>Tue, 15 Dec 2009 01:26:53 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=117</guid>
		<description></description>
		<content:encoded><![CDATA[pexpect是python一个模块，可以通过：easy_install pexpect 来安装。

这里主要是用pexpect执行ssh，查看远程uptime和df -h看硬盘状况。
<pre>#ssh_cmd.py
#coding:utf-8
import pexpect

def ssh_cmd(ip, user, passwd, cmd):
    ssh = pexpect.spawn('ssh %s@%s "%s"' % (user, ip, cmd))
    r = ''
    try:
        i = ssh.expect(['password: ', 'continue connecting (yes/no)?'])
        if i == 0 :
            ssh.sendline(passwd)
        elif i == 1:
            ssh.sendline('yes')
    except pexpect.EOF:
        ssh.close()
    else:
        r = ssh.read()
        ssh.expect(pexpect.EOF)
        ssh.close()
    return r

hosts = '''
192.168.0.12:smallfish:1234:df -h,uptime
192.168.0.13:smallfish:1234:df -h,uptime
'''

for host in hosts.split("\n"):
    if host:
        ip, user, passwd, cmds = host.split(":")
        for cmd in cmds.split(","):
            print "-- %s run:%s --" % (ip, cmd)
            print ssh_cmd(ip, user, passwd, cmd)</pre>
hosts数组格式是：主机IP:用户名:密码:命令 (多个命令用逗号, 隔开)
可以看出打印出相应的结果了，可以拼成html发送mail看起来比较美观些咯！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2009-12-15 09:26:53</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:26:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pexpect%e9%80%9a%e8%bf%87ssh%e6%89%a7%e8%a1%8c%e8%bf%9c%e7%a8%8b%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345859]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[426]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>36</wp:comment_id>
		<wp:comment_author><![CDATA[Cheap Nike Air Force]]></wp:comment_author>
		<wp:comment_author_email>jeromenichols@mydvdsblogline.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.af1star.com</wp:comment_author_url>
		<wp:comment_author_IP>66.154.127.66</wp:comment_author_IP>
		<wp:comment_date>2010-06-30 11:38:25</wp:comment_date>
		<wp:comment_date_gmt>2010-06-30 03:38:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thank you for the motivation and inspiration.! ;-)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Apache Mod_Perl 防盗链</title>
		<link>http://ddbean.wordpress.com/2009/12/15/apache-mod_perl-%e9%98%b2%e7%9b%97%e9%93%be/</link>
		<pubDate>Tue, 15 Dec 2009 01:31:15 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<category><![CDATA[Perl]]></category>

		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>

		<category domain="tag"><![CDATA[Perl]]></category>

		<category domain="tag" nicename="perl"><![CDATA[Perl]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[大体思路是这样的，比如有 一个地址：http://www.aa.com/down/1.mp3，不幸搜索引擎或者迅雷扒到了，就无偿为他们奉献流量了。 但是假如在http://www.aa.com/down/1.mp3?key=123，key参数每天变化或者几分钟变化一次，在apache服务端校 验下这个参数，不正确则显示拒绝访问或者找不到的话，那样防盗链的效果就算达到了把。

modperl强大到可以任意应用apache内部API，官方地址是：<a href="http://perl.apache.org/" target="_blank">http://perl.apache.org</a> 。根据apache版本选择相应的modperl版本，现在大部分都apache2了，就选择modperl2把。具体安装配置可以看官方文档。

先建立/home/httpd/modperl/startup.pl(目录请自行修改)，内容如下：
<pre>use strict;

use lib qw(/home/httpd/modperl); # 把这个路径加入到perl lib路径

use Apache2::RequestRec ();
use Apache2::RequestIO ();
use Apache2::Connection ();
use Apache2::RequestUtil ();
use Apache2::ServerUtil ();
use Apache2::Log ();
use Apache2::Request ();

1;</pre>
部分本机httpd.conf配置：
<pre>
LoadModule perl_module                modules/mod_perl.so
LoadModule apreq_module             modules/mod_apreq2.so
PerlPostConfigRequire /home/httpd/modperl/startup.pl
&lt;Location /down &gt;
    SetHandler modperl # 设置该目录交给modper处理
    PerlAccessHandler Down # Down是模块名称
    PerlSetVar key 123 # 设置校验参数值
&lt;/Location&gt;
</pre>
mod_apreq2.so这个模块需要安装Apache2::Request，具体安装：<a href="http://pyh7.spaces.live.com/blog/cns%2147D8D44208AC51E5%21128.entry" target="_blank">http://pyh7.spaces.live.com/blog/cns!47D8D44208AC51E5!128.entry</a>

startup.pl文件一般modperl应用都有，加载一些常用库，可以在apache启动时预先载入，避免重复加载。

修改这些后可以重启下apache，看下logs/error_log里最后是否有mod_apreq和mod_perl字样，如果有就说明成功了。剩下都就是写校验的perl脚本了，/home/httpd/modperl/Down.pm，内容如下：
<pre>
package Down;
use strict;
use Apache2::RequestRec ();
use Apache2::RequestIO ();
use Apache2::Connection ();
use Apache2::RequestUtil ();
use Apache2::ServerUtil ();
use Apache2::Log ();
use Apache2::Const -compile =&gt; qw(OK FORBIDDEN);
use Apache2::Request ();

sub handler {
    my $r = shift;
    my $req = Apache2::Request-&gt;new($r);
    my $ip = $r-&gt;connection-&gt;remote_ip;
    my $k = $req-&gt;param('key') || ''; # 判断访问时是否带key参数
    my $key = $r-&gt;dir_config('key') || '123'; # 加载httpd.conf配置中的key值
    if ($key eq $k) { # 相等可以正常访问
        return Apache2::Const::OK;
    } else { # 否则显示拒绝访问
        my $s = Apache2::ServerUtil-&gt;server;
        $s-&gt;log_error("[$ip--------forbidden.]");
        return Apache2::Const::FORBIDDEN;
    }
}

1;
</pre>
提示一下，以上两个perl脚本文件末尾记得加上1;

重启下apache。现在可以通过http://www.aa.com/down/1.mp3和http://www.aa.com/down /1.mp3?key=123测试下。可以看见不加参数拒绝访问了把。这里只是简单的判断，实际上可以根据日期或者IP加密生成一个字符串来判断。

写这个帖子完全是无意中搜索modperl应用时候发现了，具体可以参见：
<a href="http://pyh7.spaces.live.com/blog/cns%2147D8D44208AC51E5%21140.entry" target="_blank">http://pyh7.spaces.live.com/blog/cns!47D8D44208AC51E5!140.entry</a>

上面的文档已经写都很详细了，包括怎么安装modperl、Apache2::Request等模块以及配置apache的http.conf就不在累赘都重复了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2009-12-15 09:31:15</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:31:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apache-mod_perl-%e9%98%b2%e7%9b%97%e9%93%be</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>enclosure</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.aa.com/down/1.mp3
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345848]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[365]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>enclosure</wp:meta_key>
		<wp:meta_value><![CDATA[http://www.aa.com/down/1.mp3?key=123
0
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Apache Mod_Perl实现 URL Rewrite</title>
		<link>http://ddbean.wordpress.com/2009/12/15/apache-mod_perl%e5%ae%9e%e7%8e%b0-url-rewrite/</link>
		<pubDate>Tue, 15 Dec 2009 01:33:07 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<category><![CDATA[Perl]]></category>

		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>

		<category domain="tag"><![CDATA[Perl]]></category>

		<category domain="tag" nicename="perl"><![CDATA[Perl]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[相信apache的mod_rewrite模块都很熟悉了，今天这儿换个思路，利用mod_perl来实现下，发现竟然是如此的简单！

首先得保证apache已经安装了mod_perl模块，具体安装配置可以看上一篇文章哦。

修改下http.conf配置，添加一下内容：
<pre>
PerlTransHandler MyTrans # MyTrans 这个是自己添加的处理模块名
</pre>
具体MyTrans.pm脚本如下：
<pre>
package MyTrans;

use strict;
use Apache2::Const qw(DECLINED);

sub handler {
    my $r = shift;
    my $uri = $r-&gt;uri;
    my ($id) = ($url =~ m|^/news/(.*)\.html|);
    $r-&gt;uri("/news.php");
    $r-&gt;args("id=$id");
    return Apache2::Const::DECLINED;
}
1;
</pre>
实现就是：/news/12345.html  =&gt; /news.php?id=12345]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2009-12-15 09:33:07</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:33:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apache-mod_perl%e5%ae%9e%e7%8e%b0-url-rewrite</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345839]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[259]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Apache 虚拟主机配置笔记</title>
		<link>http://ddbean.wordpress.com/2009/12/15/apache-%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e9%85%8d%e7%bd%ae%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Tue, 15 Dec 2009 01:36:44 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[环境：Linux Apache2.2 （路径 /usr/local/apache）

步骤：

1. 修改 conf/httpd.conf，找到如下位置，去除 # 注释符
<pre>
# Virtual hosts
Include conf/extra/httpd-vhosts.conf
</pre>
2.修改 conf/extra/httpd-vhosts.conf
<pre>
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@aa.com
    DocumentRoot "/usr/aa"
    ServerName ww.aa.com
    ServerAlias ww.aa.com
    ErrorLog "logs/ww.aa.com-error_log"
    CustomLog "logs/ww.aa.com-access_log" common
&lt;/VirtualHost&gt;
</pre>
注意CustomLog这行，默认给的配置是："logs/dummy-host.example.com-access_log common"

这个其实是错误的，Apache启动时候会报错，common这个应该放在双引号外面：
<pre>
Syntax error on line 32 of /usr/local/apache/conf/extra/httpd-vhosts.conf:
CustomLog takes two or three arguments, a file name, a custom log format string or format name, and an optional "env=" clause (see docs)
</pre>
另外还有个问题，在Apache+Tomcat时候出现的，在配置好mod_jk之后，通过默认80端口访问jsp总会提示403禁止访问，纳闷了！后来 才发现是Directory配置问题，因为每个VirtualHost配置的目录不是默认的DocumentRoot目录，在Apache2以后对于权限 和安全有了更高的要求，所以必须手动配置下每个Directory属性。
<pre>
&lt;Directory "/usr/aa"&gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</pre>
OK，到这里虚拟主机部分已经配置完成！

补充一点，加上日志按天保存，避免一个巨大无比的文件！
<pre>
CustomLog "|/usr/local/apache/bin/rotatelogs /usr/local/apache/logs/ww.aa.com-access-%y%m%d.log 86400 480 " combined
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2009-12-15 09:36:44</wp:post_date>
		<wp:post_date_gmt>2009-12-15 01:36:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apache-%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e9%85%8d%e7%bd%ae%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260842284]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[233]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>SSH, SCP 不输入密码</title>
		<link>http://ddbean.wordpress.com/2009/12/16/ssh-scp-%e4%b8%8d%e8%be%93%e5%85%a5%e5%af%86%e7%a0%81/</link>
		<pubDate>Wed, 16 Dec 2009 01:17:44 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[SSH]]></category>

		<category domain="tag" nicename="ssh"><![CDATA[SSH]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[经常在不同linux机器之间互相scp拷文件，每次总是要输入密码才可行。

通过ssh-keygen生成公钥，在两台机器之间互相建立信任通道即可。假设本地机器client，远程机器为server。

1. 生成rsa keygen
<pre>[winter@client winter] $ ssh-keygen -b 1024 -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/winter/.ssh/id_rsa): &lt;Enter&gt;
Enter passphrase (empty for no passphrase): &lt;Enter&gt;
Enter same passphrase again: &lt;Enter&gt;
Your identification has been saved in /home/winter/.ssh/id_rsa.
Your public key has been saved in /home/winter/.ssh/id_rsa.pub.
The key fingerprint is:
33:d4:7b:9c:87:04:cf:14:40:22:6d:c7:15:78:97:6a winter@client</pre>
直接上面公钥和私钥存放地址可以直接回车，私钥密码可以直接回车，也可以输入。

2. 查看.ssh目录下了多私钥和公钥文件
<pre>[winter@client winter] $ ls .ssh/
id_rsa  id_rsa.pub  known_hosts</pre>
3. 拷贝公钥到目标机器上，并改名成authorized_keys

首次scp命令时候还是会提示输入密码，还有是否继续链接的提示，以后

4. 测试ssh进入
<pre>[winter@client winter] $ ssh 192.168.0.110</pre>
5. ok，搞定！
<pre>[winter@server winter] # it's ok!</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2009-12-16 09:17:44</wp:post_date>
		<wp:post_date_gmt>2009-12-16 01:17:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssh-scp-%e4%b8%8d%e8%be%93%e5%85%a5%e5%af%86%e7%a0%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345817]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[221]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Java调用Linux SCP操作</title>
		<link>http://ddbean.wordpress.com/2009/12/16/java%e8%b0%83%e7%94%a8linux-scp%e6%93%8d%e4%bd%9c/</link>
		<pubDate>Wed, 16 Dec 2009 01:18:21 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Java]]></category>

		<category domain="category" nicename="java"><![CDATA[Java]]></category>

		<category domain="tag"><![CDATA[Java]]></category>

		<category domain="tag" nicename="java"><![CDATA[Java]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[先来回顾下linux下scp命令的用法：
<pre>[shell $] scp -r /本地目录或文件 user@192.168.0.110:/远程目录</pre>
这条命令是把本地的目录或者文件拷贝到远程192.168.0.110一个目录下，如果是从远程拷到本地，则反一下ip和目录。-r则是递归目录。更多参见scp --help

最近在Java里调用scp，是通过一个JSP页面来触发。为了在调用系统命令时候不出现提示密码，两台机器配置好了信任关系，可以参考<a href="http://chenxiaoyu.org/blog/archives/133" target="_blank">ssh, scp不输入密码</a>，大致代码如下：
<pre>Runtime.getRuntime().exec("scp /aa.txt root@192.168.0.110:/bb");</pre>
try时候也没任何异常，但是文件没拷贝过去，最后根据Process的waitFor()获取命令返回值是1。

这下可以肯定的是调用系统命令失败，在System.out.println里打印出command，linux下运行是没错的。为何呢？

后来发现原来是用户权限的问题，默认apache运行用户是nobody，根本没权限调用scp命令，配置的信任关系也是本机的root用户。

那就重新加一个user把，adduser...到配置好信任关系，在scp -i 指定一个rsa文件，并把rsa文件复制到/tmp目录下，权限为0755，继续刷新，后台可以看到提示输入密码之类的output了。

貌似还比较棘手，最后还是搜了下，发现有关Java scp的库，<a href="http://www.ganymed.ethz.ch/ssh2/" target="_blank">Ganymed SSH-2 for Java</a>。貌似比较老，先来测试一下把。
<pre>Connection conn = new Connection(“192.168.0.110”);
conn.connect();
boolean isAuthenticated = conn.authenticateWithPassword(“root”, "***********");
if (isAuthenticated == false)
    throw new IOException("Authentication failed.");
SCPClient client = new SCPClient(conn);
client.put("/aa.txt", "/bb");
conn.close();</pre>
OK！发现竟然可以一次运行了。算了就不调用系统命令了，直接使用这个库把。

client.put方法第一个参数可以是个数组，即文件名的数组。暂时没找到整个目录的方法，就自己手动获取下目录文件列表把。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2009-12-16 09:18:21</wp:post_date>
		<wp:post_date_gmt>2009-12-16 01:18:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java%e8%b0%83%e7%94%a8linux-scp%e6%93%8d%e4%bd%9c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345807]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[240]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>修改 ModPython 下 PYTHON_EGG_CACHE 报错</title>
		<link>http://ddbean.wordpress.com/2009/12/16/%e4%bf%ae%e6%94%b9-modpython-%e4%b8%8b-python_egg_cache-%e6%8a%a5%e9%94%99/</link>
		<pubDate>Wed, 16 Dec 2009 01:43:01 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=137</guid>
		<description></description>
		<content:encoded><![CDATA[环境：Linux Apache Python(mod_python)

换了一台新机器，没有配置Mod_Python了，在一些应用里<strong>import MySQLdb</strong>出现了下面错误：
<pre>ExtractionError: Can't extract file(s) to egg cache
The following error occurred while trying to extract file(s) to the Python egg
cache:
  [Errno 13] Permission denied: '/root/.python-eggs'
The Python egg cache directory is currently set to:
  /root/.python-eggs
Perhaps your account does not have write access to this directory?  You can
change the cache directory by setting the PYTHON_EGG_CACHE environment
variable to point to an accessible directory.</pre>
解决办法有两种：

1.设置PYTHON_EGG_CACHE环境变量
<pre>$ SetEnv PYTHON_EGG_CACHE /tmp/aaa/</pre>
目录权限注意要是apache用户，或者简单点就777

2.把egg格式转成目录
<pre>$ cd /python-path/site-packages/
$ mv MySQL_python-1.2.3c1-py2.5-linux-x86_64.egg foo.zip
$ mkdir MySQL_python-1.2.3c1-py2.5-linux-x86_64.egg
$ cd MySQL_python-1.2.3c1-py2.5-linux-x86_64.egg
$ unzip ../foo.zip
$ rm ../foo.zip</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2009-12-16 09:43:01</wp:post_date>
		<wp:post_date_gmt>2009-12-16 01:43:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bf%ae%e6%94%b9-modpython-%e4%b8%8b-python_egg_cache-%e6%8a%a5%e9%94%99</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260934783]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[319]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>37</wp:comment_id>
		<wp:comment_author><![CDATA[lebron basketball shoes]]></wp:comment_author>
		<wp:comment_author_email>saragilliam@hairstraighteneronsale.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.shoesyahoo.com</wp:comment_author_url>
		<wp:comment_author_IP>213.5.65.19</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 09:54:34</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 01:54:34</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Wow, looks great LO]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>C Apache Module 开发入门</title>
		<link>http://ddbean.wordpress.com/2009/12/16/c-apache-module-%e5%bc%80%e5%8f%91%e5%85%a5%e9%97%a8/</link>
		<pubDate>Wed, 16 Dec 2009 01:52:27 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>前言：</strong>

扩展Apache模块开发网上大部分教程都是围绕Perl语言，老外的《Writing Apache Modules with Perl and C》可以算是经典之作了，可惜一直都是针对老版本开发，而且主力语言是Perl，C语言部分只是略有介绍。不过相比较而言用Perl来扩展模块功能确实比 C语言来的快速以及便捷多了，也简单容易。我自己也在工作里应用了一部分，主要是在防盗链上面写了两个简单都模块，可以参考我写的另外两篇文章：<a href="http://chenxiaoyu.org/blog/archives/120" target="_blank">apache+mod_perl防盗链</a>以及<a href="http://chenxiaoyu.org/blog/archives/123" target="_blank">apache+mod_perl实现url rewrite</a>。说了那么多题外话，回到正题，这里只是用C语言实现一个简单的hello模块，模块功能是查询MySQL自带mysql数据库里都user表。

<strong>系统环境：</strong>

ArchLinux Apache2.2 MySQL 5.0

<strong>具体开发步骤：</strong>

<strong>1. </strong>利用Apache自带都apxs建立hello模块：
<pre>[root#localhost] apxs -g -n hello</pre>
这样就会在当前目录下新建一个hello模块的文件目录，可以看到里面有：Makefile mod_hello.c modules.mk这样的文件，具体apxs路径查询下本机apache/bin目录。

<strong>2.</strong> 预览下mod_hello.c，可以看到里面apxs自动帮你生成一堆代码了，我们需要的只是修改里面的代码部分，先简单都介绍下里面的函数说明。

include 部分就是引入了一些必要都头文件
hello_handler 这个就是hello模块都主体部分，所有的显示、处理请求什么的都在这里。
hello_register_hooks hello_module 这俩个是需要导出的函数所必须的，先可以不管他们，按照生成的不动即可。

<strong>3. </strong>修改hello_handler函数，里面可以看到request_rec *r，r有很多函数和变量，具体要参见文档了。里面的ap_rputs是输出，可以简单的理解为把字符串输出到r。
<pre>static int hello_handler(request_rec *r)
{
if (strcmp(r-&gt;handler, "hello")) { // 判断apache配置文件里handler是否等于hello，不是就跳过
          return DECLINED;
     }
     r-&gt;content_type = "text/html"; // 设置content-type
     if (!r-&gt;header_only)
          ap_rputs("The sample page from mod_hello.c\n", r); // 输出一段文字
     return OK;// 返回 200 OK状态
}</pre>
增加#include "mysq.h"，查询需要用到这个头文件。
具体代码参见本文结尾部分。

<strong>4. </strong>编译模块
<pre>[root#localhost] apxs -c -a -i -I/usr/include/mysql/ -lmysqlclient mod_hello.c</pre>
可以看到一堆编译指令，加上-I和-l是编译mysql必须的，编译完会自动在httpd.conf加上 LoadModule hello_module modules/mod_hello.so

<strong>5.</strong> 修改httpd.conf
&lt;Location /hello&gt;
SetHandler hello
&lt;/Location
<strong>6. </strong>重启apache，访问http://localhost/hello，看是否成功。

=====================

完整代码：
<pre>#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"
/* 头文件，本文用到了ap_rprintf函数 */
#include "apr.h"
#include "apr_lib.h"
#include "apr_strings.h"
#include "apr_want.h"
#include "mysql.h"

/* 定义mysql数据变量 */
const char *host = "localhost";
const char *user = "root";
const char *pass = "smallfish";
const char *db    = "mysql";

/* The sample content handler */
static int hello_handler(request_rec *r)
{
    if (strcmp(r-&gt;handler, "hello")) {
        return DECLINED;
    }
    r-&gt;content_type = "text/html";
    /* 定义mysql变量 */
    MYSQL mysql;
    MYSQL_RES *rs;
    MYSQL_ROW row;
    mysql_init(&amp;mysql); /* 初始化 */
    if (!mysql_real_connect(&amp;mysql, host, user, pass, db, 0, NULL, 0)) {/* 连接数据库 */
        ap_rprintf(r, "&lt;li&gt;Error:%d %s&lt;/li&gt;\n", mysql_errno(&amp;mysql), mysql_error(&amp;mysql));
        return OK;
    }
    char *sql = "select host,user from user order by rand()";
    if (mysql_query(&amp;mysql, sql)!=0) { /* 查询 */
        ap_rprintf(r, "&lt;li&gt;Error : %d %s&lt;/li&gt;\n", mysql_errno(&amp;mysql), mysql_error(&amp;mysql));
        return OK;
    }
    rs = mysql_store_result(&amp;mysql); /* 获取查询结果 */
    while ((row = mysql_fetch_row(rs))) { /* 获取每一行记录 */
        ap_rprintf(r, "&lt;li&gt;%s - %s&lt;/li&gt;\n", row[0], row[1]);
    }
    mysql_free_result(rs); /* 释放结果集 */
    mysql_close(&amp;mysql); /* 关闭连接 */
    return OK;
}

static void hello_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(hello_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA hello_module = {
    STANDARD20_MODULE_STUFF,
    NULL,                            /* create per-dir              config structures */
    NULL,                            /* merge  per-dir              config structures */
    NULL,                            /* create per-server config structures */
    NULL,                            /* merge  per-server config structures */
    NULL,                            /* table of config file commands                 */
    hello_register_hooks  /* register hooks                                */
};</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2009-12-16 09:52:27</wp:post_date>
		<wp:post_date_gmt>2009-12-16 01:52:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-apache-module-%e5%bc%80%e5%8f%91%e5%85%a5%e9%97%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345793]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[293]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>PostgreSQL tablespace 表空间</title>
		<link>http://ddbean.wordpress.com/2009/12/22/postgresql-tablespace-%e8%a1%a8%e7%a9%ba%e9%97%b4/</link>
		<pubDate>Tue, 22 Dec 2009 07:59:52 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[pgsql允许管理员在文件系统里定义表空间存储位置，这样创建数据库对象时候就可以引用这个表空间了。好处就不用多说了，可以把数据库对象存储到不同的分区上，比如更好的存储之类。默认initdb之后会有两个表空间pg_global和pg_default。

查看pgsql当前表空间有哪些可以试试下面：
<pre>
postgres=&gt; SELECT spcname FROM pg_tablespace;
  spcname
------------
 pg_default
 pg_global
(2 rows)
</pre>
或：
<pre>
postgres=&gt; \db
    Name    |  Owner   | Location
------------+----------+----------
 pg_default | postgres |
 pg_global  | postgres |
</pre>
建立表空间需要注意的主要的是权限问题，而且要在新的空目录上建立，权限属于数据库管理员比如默认postgres。

1. 建立目录
<pre>
$ mkdir /home/smallfish/pgdata
$ sudo chown -R postgres:postgres /home/smallfish/pgdata
</pre>
2. 进入psql
<pre>
$ psql -U postgres -h 192.168.0.122
</pre>
如果权限没设置好下面语句会报错
<pre>
postgres=&gt; CREATE TABLESPACE space1 LOCATION '/home/smallfish/pgdata';
</pre>
建测试表
<pre>
postgres=&gt; CREATE TABLE foo(i int) TABLESPACE space1;
</pre>
可以查看表空间目录下多了文件
<pre>
postgres=&gt; \! ls /home/smallfish/pgdata
</pre>
删除表空间，需要注意的是先要删除所有该表空间里的对象
<pre>
postgres=&gt; DROP TABLESPACE space1;
</pre>
ok，到这里已经建立好表空间了。当然每次建表都指定TABLESPACE也有点麻烦，来点默认的把。
<pre>
postgres=&gt; SET default_tablespace = space1;
postgres=&gt; CREATE TABLE foo(i int);
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2009-12-22 15:59:52</wp:post_date>
		<wp:post_date_gmt>2009-12-22 07:59:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-tablespace-%e8%a1%a8%e7%a9%ba%e9%97%b4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1261468979]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[318]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>39</wp:comment_id>
		<wp:comment_author><![CDATA[marc jacobs handbags]]></wp:comment_author>
		<wp:comment_author_email>wagnerwagner@theskying.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.thecheapbags.com</wp:comment_author_url>
		<wp:comment_author_IP>66.154.127.66</wp:comment_author_IP>
		<wp:comment_date>2010-06-19 16:37:55</wp:comment_date>
		<wp:comment_date_gmt>2010-06-19 08:37:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I love your works and read all of them.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>40</wp:comment_id>
		<wp:comment_author><![CDATA[hoorace]]></wp:comment_author>
		<wp:comment_author_email>longtask@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://longtask.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.239</wp:comment_author_IP>
		<wp:comment_date>2010-08-13 16:06:53</wp:comment_date>
		<wp:comment_date_gmt>2010-08-13 08:06:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我靠，mysql应该学习下postgresql啊。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>41</wp:comment_id>
		<wp:comment_author><![CDATA[Arcelia Wojcik]]></wp:comment_author>
		<wp:comment_author_email>Franza86@sky.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.girlygirl201000.weebly.com</wp:comment_author_url>
		<wp:comment_author_IP>173.212.209.160</wp:comment_author_IP>
		<wp:comment_date>2010-08-18 07:17:13</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 23:17:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[The maker of this blog ought to be extremely proud. I like to reckon myself to have a keen eye for writing, and entries such as this really do make me recognise your potential. Keep it up.]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>PostgreSQL Partitioning 表分区</title>
		<link>http://ddbean.wordpress.com/2009/12/22/postgresql-partitioning-%e8%a1%a8%e5%88%86%e5%8c%ba/</link>
		<pubDate>Tue, 22 Dec 2009 08:20:12 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[测试版本：pg 8.3 (ubuntu)

在pg里表分区是通过表继承来实现的，一般都是建立一个主表，里面是空，然后每个分区都去继承它。

创建表分区步骤如下：

1. 创建主表
<pre>CREATE TABLE users ( uid int not null primary key, name varchar(20));</pre>
2. 创建分区表(必须继承上面的主表)
<pre>CREATE TABLE users_0 ( check (uid &gt;= 0 and uid&lt; 100) ) INHERITS (users);
CREATE TABLE users_1 ( check (uid &gt;= 100)) INHERITS (users);</pre>
3. 在分区表上建立索引，其实这步可以省略的哦
<pre>CREATE INDEX users_0_uidindex on users_0(uid);
CREATE INDEX users_1_uidindex on users_1(uid);</pre>
4. 创建规则RULE
<pre>CREATE RULE users_insert_0 AS
    ON INSERT TO users WHERE
        (uid &gt;= 0 and uid &lt; 100)
    DO INSTEAD
        INSERT INTO users_0 VALUES (NEW.uid,NEW.name);

CREATE RULE users_insert_1 AS
    ON INSERT TO users WHERE
        (uid &gt;= 100)
    DO INSTEAD
        INSERT INTO users_1 VALUES (NEW.uid,NEW.name);</pre>
下面就可以测试写入数据啦：
<pre>postgres=# INSERT INTO users VALUES (100,'smallfish');
INSERT 0 0
postgres=# INSERT INTO users VALUES (20,'aaaaa');
INSERT 0 0
postgres=# select * from users;
uid  |   name
-----+-----------
20   | aaaaa
100  | smallfish
(2 笔资料列)
postgres=# select * from users_0;
uid  | name
-----+-------
20   | aaaaa
(1 笔资料列)

postgres=# select * from users_1;
uid  |   name
-----+-----------
100  | smallfish
(1 笔资料列)</pre>
到这里表分区已经可以算完了，不过还有个地方需要修改下，先看count查询把。
<pre>postgres=# EXPLAIN SELECT count(*) FROM users where uid&lt;100;
QUERY PLAN
------------------------------------------------
Aggregate  (cost=62.75..62.76 rows=1 width=0)
    -&gt;  Append  (cost=6.52..60.55 rows=879 width=0)
    -&gt;  Bitmap Heap Scan on users  (cost=6.52..20.18 rows=293 width=0)
Recheck Cond: (uid &lt; 100)
    -&gt;  Bitmap Index Scan on users_pkey  (cost=0.00..6.45 rows=293 width=0)
Index Cond: (uid &lt; 100)
    -&gt;  Bitmap Heap Scan on users_0 users  (cost=6.52..20.18 rows=293 width=0)
Recheck Cond: (uid &lt; 100)
    -&gt;  Bitmap Index Scan on users_0_uidindex  (cost=0.00..6.45 rows=293 width=0)
Index Cond: (uid &lt; 100)
    -&gt;  Bitmap Heap Scan on users_1 users  (cost=6.52..20.18 rows=293 width=0)
Recheck Cond: (uid &lt; 100)
    -&gt;  Bitmap Index Scan on users_1_uidindex  (cost=0.00..6.45 rows=293 width=0)
Index Cond: (uid &lt; 100)
(14 笔资料列)</pre>
按照本来想法，uid小于100，理论上应该只是查询users_0表，通过EXPLAIN可以看到其他他扫描了所有分区的表。
<pre>postgres=# SET constraint_exclusion = on;
SET
</pre>
<pre>
postgres=# EXPLAIN SELECT count(*) FROM users where uid&lt;100;
QUERY PLAN
------------------------------------------------
Aggregate  (cost=41.83..41.84 rows=1 width=0)
    -&gt;  Append  (cost=6.52..40.37 rows=586 width=0)
    -&gt;  Bitmap Heap Scan on users  (cost=6.52..20.18 rows=293 width=0)
Recheck Cond: (uid &lt; 100)
    -&gt;  Bitmap Index Scan on users_pkey  (cost=0.00..6.45 rows=293 width=0)
Index Cond: (uid &lt; 100)
    -&gt;  Bitmap Heap Scan on users_0 users  (cost=6.52..20.18 rows=293 width=0)
Recheck Cond: (uid &lt; 100)
    -&gt;  Bitmap Index Scan on users_0_uidindex  (cost=0.00..6.45 rows=293 width=0)
Index Cond: (uid &lt; 100)
(10 笔资料列)</pre>
到这里整个过程都OK啦！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2009-12-22 16:20:12</wp:post_date>
		<wp:post_date_gmt>2009-12-22 08:20:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-partitioning-%e8%a1%a8%e5%88%86%e5%8c%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1261470247]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[331]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>42</wp:comment_id>
		<wp:comment_author><![CDATA[筱白]]></wp:comment_author>
		<wp:comment_author_email>lierby@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.baiyiyu.com/</wp:comment_author_url>
		<wp:comment_author_IP>119.161.164.76</wp:comment_author_IP>
		<wp:comment_date>2010-01-25 15:13:12</wp:comment_date>
		<wp:comment_date_gmt>2010-01-25 07:13:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我得学好之后才能看得懂—_—!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python 下载</title>
		<link>http://ddbean.wordpress.com/python/</link>
		<pubDate>Tue, 22 Dec 2009 08:38:53 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?page_id=157</guid>
		<description></description>
		<content:encoded><![CDATA[<div id="wikicontent">
<h2><a name="Python文档">Python文档</a></h2>
<ul>
	<li><a name="Python文档">Python 2.6 文档 </a><a rel="nofollow" href="http://pynotes.appspot.com/static/python-docs/2.6/index.html">在线阅读</a> <a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.x4-docs-pdf-a4.zip">PDF(A4)</a> <a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.x4-docs-html.zip">HTML</a></li>
	<li>Python 3.1 文档 <a rel="nofollow" href="http://pynotes.appspot.com/static/python-docs/3.1/index.html">在线阅读</a> <a rel="nofollow" href="http://smallfish.googlecode.com/files/python-3.1.1-docs-pdf-a4.zip">PDF(A4)</a> <a rel="nofollow" href="http://smallfish.googlecode.com/files/python-3.1.1-docs-html.zip">HTML</a></li>
</ul>
<h2><a name="Python_2.7_alpha_1_released_on_December_5th,_2009">Python 2.7 alpha 1 released on December 5th, 2009</a></h2>
<ul>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.7a1.tgz">Gzipped source tar ball (2.7a1)</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.7a1.tar.bz2">Bzipped source tar ball (2.7a1)</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.7a1.msi">Windows x86 MSI Installer (2.7a1)</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.7a1.amd64.msi">Windows AMD64 MSI Installer (2.7a1)</a></li>
</ul>
MD5 checksums and sizes of the released files:
<pre>1dead8228f03928b69c123ef32ab36c0  13318706  Python-2.7a1.tgz
a40bf8640668ea1125c72a69cb2963e5  11109123  Python-2.7a1.tar.bz2
bbe79c2603553d601331ebfcfe3e067a  15777792  python-2.7a1.amd64.msi
7a28da036157dc83c4b0ea06f10d5b32  15230976  python-2.7a1.msi</pre>
<h2><a name="Python_2.6.x4">Python 2.6.x4</a></h2>
<ul>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.x4.msi">Python 2.6.x4 Windows installer</a> <em>(Windows binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.x4.amd64.msi">Python 2.6.x4 Windows AMD64 installer</a> <em>(Windows AMD64 binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.x4_macosx10.3.dmg">Python 2.6.x4 Mac Installer Disk Image</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.6.x4.tgz">Python 2.6.x4 compressed source tarball</a> <em>(for Linux, Unix or OS X)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.6.x4.tar.bz2">Python 2.6.x4 bzipped source tarball</a> <em>(for Linux, Unix or OS X, more compressed)</em></li>
</ul>
MD5 checksums and sizes of the released files:
<pre>17dcac33e4f3adb69a57c2607b6de246  13322131  Python-2.6.x4.tgz
fee5408634a54e721a93531aba37f8c1  11249486  Python-2.6.x4.tar.bz2
d6c51dfa162bbecc22cfcf11544243f7  15223296  python-2.6.x4.amd64.msi
2e2b60ae73e9e99cd343a3fe9ed6e770  14890496  python-2.6.x4.msi
252c4d06cb84132c42d00fae93ee8ceb  20347856  python-2.6.x4_macosx10.3.dmg</pre>
<h2><a name="Python_2.5.4">Python 2.5.4</a></h2>
<ul>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.5.4.msi">Python 2.5.4 Windows installer</a> <em>(Windows binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.5.4.ia64.msi">Python 2.5.4 Win64-Itanium</a> <em>(Win64-Itanium -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.5.4.amd64.msi">Python 2.5.4 Windows AMD64 installer</a> <em>(Windows AMD64 binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.5.4-macosx.dmg">Python 2.5.4 Mac Installer Disk Image</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.5.4.tgz">Python 2.5.4 compressed source tarball</a> <em>(for Linux, Unix or OS X)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.5.4.tar.bz2">Python 2.5.4 bzipped source tarball</a> <em>(for Linux, Unix or OS X, more compressed)</em></li>
</ul>
MD5 checksums and sizes of the released files:
<pre>ad47b23778f64edadaaa8b5534986eed  11604497  Python-2.5.4.tgz
394a5f56a5ce811fb0f023197ec0833e  9821313   Python-2.5.4.tar.bz2
b4bbaf5a24f7f0f5389706d768b4d210  11323392  Python-2.5.4.msi
b1e1e2a43324b0b6ddaff101ecbd8913  11340800  Python-2.5.4.amd64.msi
1acf900a3daf3f99d1a5511c2df98853  13567488  Python-2.5.4.ia64.msi
d8bd62fd175f5f9e9f4573e31096747e  19277129  Python-2.5.4-macosx.dmg</pre>
<h2><a name="Python_2.6.3">Python 2.6.3</a></h2>
<ul>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.3.msi">Python 2.6.3 Windows installer</a> <em>(Windows binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.3.amd64.msi">Python 2.6.3 Windows AMD64 installer</a> <em>(Windows AMD64 binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-2.6.3-macosx.dmg">Python 2.6.3 Mac Installer Disk Image</a></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.6.3.tgz">Python 2.6.3 compressed source tarball</a> <em>(for Linux, Unix or OS X)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-2.6.3.tar.bz2">Python 2.6.3 bzipped source tarball</a> <em>(for Linux, Unix or OS X, more compressed)</em></li>
</ul>
MD5 checksums and sizes of the released files:
<pre>c4842532170fc0a6f9e878497efc0ddf  13319447  Python-2.6.3.tgz
8755fc03075b1701ca3f13932e6ade9f  11249543  Python-2.6.3.tar.bz2
f7382afe57e21ced274eeec614dbda37  15214592  python-2.6.3.amd64.msi
9ff76b6101fdb1c935970476ed428569  14871552  python-2.6.3.msi
114d26c741d4c0b8ee91191a7a06aa2a  20329350  python-2.6.3-macosx.dmg</pre>
<h2><a name="Python_3.1.1">Python 3.1.1</a></h2>
<ul>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-3.1.1.msi">Python 3.1.1 Windows x86 MSI Installer</a> <em>(Windows binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-3.1.1.amd64.msi">Python 3.1.1 Windows AMD64 MSI Installer</a> <em>(Windows AMD64 binary -- does not include source)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-3.1.1.tgz">Python 3.1.1 compressed source tarball</a> <em>(for Linux, Unix or OS X)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/Python-3.1.1.tar.bz2">Python 3.1.1 bzipped source tarball</a> <em>(for Linux, Unix or OS X, more compressed)</em></li>
	<li><a rel="nofollow" href="http://smallfish.googlecode.com/files/python-3.1.1.dmg">Python 3.1.1 Mac Installer disk image</a></li>
</ul>
MD5 checksums and sizes of the released files:
<pre>f1317dbb2398374d6691edd5bff1b91d  11525876 python-3.1.1.tgz
d1ddd9f16e3c6a51c7208f33518cd674   9510105 python-3.1.1.tar.bz2
d31e3e91c2ddd3e5ea7c40abe436917e  14130176 python-3.1.1.amd64.msi
e05a6134b920ae86f0e33b8a43a801b3  13737984 python-3.1.1.msi
9c7f85cc7fb5a2fa533d338c88229633  17148746 python-3.1.1.dmg</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2009-12-22 16:38:53</wp:post_date>
		<wp:post_date_gmt>2009-12-22 08:38:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1264644878]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1104]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>43</wp:comment_id>
		<wp:comment_author><![CDATA[hoorace]]></wp:comment_author>
		<wp:comment_author_email>longtask@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.longtask.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.239</wp:comment_author_IP>
		<wp:comment_date>2010-07-20 13:55:23</wp:comment_date>
		<wp:comment_date_gmt>2010-07-20 05:55:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[搜索到鱼哥这来，留个脚印。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>197</wp:comment_id>
		<wp:comment_author><![CDATA[PropeciaDRrx]]></wp:comment_author>
		<wp:comment_author_email>jolisaallotox@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://forum.beats365.com/member.php?u=24914</wp:comment_author_url>
		<wp:comment_author_IP>193.37.156.146</wp:comment_author_IP>
		<wp:comment_date>2011-05-25 11:38:54</wp:comment_date>
		<wp:comment_date_gmt>2011-05-25 03:38:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[This condition occurs because not enough blood can get into, or stay in the penis long enough to allow an erection.  <a href="http://forum.beats365.com/member.php?u=24914" rel="nofollow">Buying Propecia Online</a> For SaleErectile dysfunction is a problem among men who has trouble getting or having no erection.  
<a href="http://www.vietdownloads.com/member.php?u=26622" rel="nofollow">Buy </a>]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>196</wp:comment_id>
		<wp:comment_author><![CDATA[PropeciaDRrx]]></wp:comment_author>
		<wp:comment_author_email>jolisaallotox@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://forum.beats365.com/member.php?u=24914</wp:comment_author_url>
		<wp:comment_author_IP>193.37.156.146</wp:comment_author_IP>
		<wp:comment_date>2011-05-15 18:51:22</wp:comment_date>
		<wp:comment_date_gmt>2011-05-15 10:51:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Endopeika The inserts are visible and give a capacity of erection and ejaculation, which is no different from physics that most patients would prefer to recover.  <a href="http://udfa.taylormedia.org/viewtopic.php?f=2&amp;t=7641" rel="nofollow">Propecia</a> I have personally and unequivocally experiences these enhancements myself and have had feedback from thousands of patients and users of these products.  
<a href="http://www.clubpeachez.com/member.php?u=15079" rel="nofollow">Buy Cialis Online</a>]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>MySQL &amp; PostgreSQL 小命令对比</title>
		<link>http://ddbean.wordpress.com/2010/02/05/mysql-postgresql-%e5%b0%8f%e5%91%bd%e4%bb%a4%e5%af%b9%e6%af%94/</link>
		<pubDate>Fri, 05 Feb 2010 04:24:36 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[MySQL]]></category>

		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>

		<category domain="tag"><![CDATA[MySQL]]></category>

		<category domain="tag" nicename="mysql"><![CDATA[MySQL]]></category>

		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[对比下一些两个数据库常用的操作。分别使用自带的client程序。

MySQL命令行：
<pre>mysql -u 用户名 -h 主机地址 -P 端口号 数据库名 -p</pre>
PostgreSQL命令行：
<pre>psql -U 用户名 -h 主机地址 -p 端口号 数据库名</pre>
操作对比：
<pre>mysql                      psql

SHOW DATABASES;           \l
USE db-name;              \c db-name
SHOW TABLES;              \d
SHOW USERS;               \du
SHOW COLUMNS;             \d table-name
SHOW PROCESSLIST;         SELECT * FROM pg_stat_activity;
SELECT now()\G            \x 可以打开和关闭类似\G功能
SOURCE /path.sql          \i /path.sql
LOAD DATA INFILE ...      \copy ...
\h                        \?</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2010-02-05 12:24:36</wp:post_date>
		<wp:post_date_gmt>2010-02-05 04:24:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-postgresql-%e5%b0%8f%e5%91%bd%e4%bb%a4%e5%af%b9%e6%af%94</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265345752]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[353]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>44</wp:comment_id>
		<wp:comment_author><![CDATA[MySQL &amp; PostgreSQL 小命令对比 zz | flykobe的技术与生活杂谈]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://flykobe.com/index.php/2010/05/18/mysql-postgresql-command/</wp:comment_author_url>
		<wp:comment_author_IP>69.164.203.206</wp:comment_author_IP>
		<wp:comment_date>2010-05-18 13:49:20</wp:comment_date>
		<wp:comment_date_gmt>2010-05-18 05:49:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] zz from: http://chenxiaoyu.org/blog/archives/175 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>PostgreSQL RPM 安装笔记</title>
		<link>http://ddbean.wordpress.com/2010/02/06/postgresql-rpm-%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Sat, 06 Feb 2010 02:21:23 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=197</guid>
		<description></description>
		<content:encoded><![CDATA[测试环境：REHL 5.3
PostgreSQL版本：8.4.2

1. 首先检查下是否已经有PostgreSQL安装程序(俺的机器有pg-libs 8.1，无视之)
<pre>
shell&gt; rpm -qa | grep postgres
</pre>
2. 下载最新的8.4.2RPM安装包，这个FTP速度挺快的。:)
<pre>
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-server-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-contrib-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-libs-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-devel-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; wget http://ftp.easynet.be/postgresql/binary/v8.4.2/linux/rpms/redhat/rhel-5-x86_64/postgresql-plpython-8.4.2-1PGDG.rhel5.x86_64.rpm
</pre>
3. 安装PostgreSQL(要注意下顺序)，首先需要更新pg-libs版本。
后面几个不需要的话可以不装。主要是一些扩展功能。
<pre>
shell&gt; rpm -ivh postgresql-libs-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; rpm -ivh postgresql-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; rpm -ivh postgresql-server-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; rpm -ivh postgresql-contrib-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; rpm -ivh postgresql-devel-8.4.2-1PGDG.rhel5.x86_64.rpm
shell&gt; rpm -ivh postgresql-plpython-8.4.2-1PGDG.rhel5.x86_64.rpm
</pre>
4. RPM安装完后，需要初始化PostgreSQL库。service初次启动会提示。
如果是源码安装这个过程就是对应的initdb -D，指定data目录。RPM默认对应目录是/var/lib/pgsql/data。
<pre>
shell&gt; service postgresql initdb
</pre>
5. service启动PostgreSQL
<pre>
shell&gt; service postgresql start
</pre>

到上面这一步基本是安装完成了。下面的是修改数据库用户密码和登陆相关。

6. 切换到postgres用户，修改数据库密码。(注意系统用户和数据库用户密码是两个概念，虽然名字都叫postgres)
修改完需要重启数据库，这里咱不重启，等修改完认证配置再一起重启。
<pre>
shell&gt; su - postgres
shell&gt; psql
postgres=# ALTER USER postgres WITH PASSWORD '123456';
postgres=# \q
</pre>
7. 修改认证文件/var/lib/pgsql/data/pg_hba.conf，登陆使用密码。md5格式。
<pre>
shell&gt; vi /var/lib/pgsql/data/pg_hba.conf
修改ident为md5 (local, host)
</pre>
8. service重启PostgreSQL
<pre>
shell&gt; service postgresql restart
</pre>
9. 再次进入测试，应该会提示输入密码鸟 :)
<pre>
shell&gt;psql -U postgres
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2010-02-06 10:21:23</wp:post_date>
		<wp:post_date_gmt>2010-02-06 02:21:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-rpm-%e5%ae%89%e8%a3%85%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1265423168]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[321]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>PostgreSQL UUID 函数</title>
		<link>http://ddbean.wordpress.com/2010/02/26/postgresql-uuid-%e5%87%bd%e6%95%b0/</link>
		<pubDate>Fri, 26 Feb 2010 07:10:45 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=209</guid>
		<description></description>
		<content:encoded><![CDATA[测试环境：PostgreSQL 8.4

默认PostgreSQL是木有UUID函数可使用，而不像MySQL提供uuid()函数，不过在contrib里有，只需要导入一下uuid-ossp.sql即可。（PS：注意权限问题，要Pg可读改文件。）

导入很简单，下面是win下面测试，其他平台类似该操作：
<pre>D:\&gt;psql -U postgres -h localhost -f D:\PostgreSQL\8.4\share\contrib\uuid-ossp.sql
Password for user postgres:
SET
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION
CREATE FUNCTION</pre>
进入psql，执行：
<pre>postgres=# select uuid_generate_v1();
           uuid_generate_v1
--------------------------------------
 86811bd4-22a5-11df-b00e-ebd863f5f8a7
(1 row)

postgres=# select uuid_generate_v4();
           uuid_generate_v4
--------------------------------------
 5edbfcbb-1df8-48fa-853f-7917e4e346db
(1 row)</pre>
主要就是uuid_generate_v1和uuid_generate_v4，当然还有uuid_generate_v3和uuid_generate_v5。其他使用可以参见PostgreSQL官方文档 <a href="http://www.postgresql.org/docs/8.3/static/uuid-ossp.html" target="_blank">uuid-ossp</a>。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>209</wp:post_id>
		<wp:post_date>2010-02-26 15:10:45</wp:post_date>
		<wp:post_date_gmt>2010-02-26 07:10:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-uuid-%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1267168371]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[405]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>45</wp:comment_id>
		<wp:comment_author><![CDATA[仁心博客]]></wp:comment_author>
		<wp:comment_author_email>24066908@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.9sh.net</wp:comment_author_url>
		<wp:comment_author_IP>218.75.89.109</wp:comment_author_IP>
		<wp:comment_date>2010-03-03 09:42:19</wp:comment_date>
		<wp:comment_date_gmt>2010-03-03 01:42:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[纯技术]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python(Stackless) + MongoDB Apache 日志(2G)分析</title>
		<link>http://ddbean.wordpress.com/2010/03/04/pythonstackless-mongodb-apache-2g%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90/</link>
		<pubDate>Thu, 04 Mar 2010 01:49:34 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Apache]]></category>

		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>

		<category domain="tag"><![CDATA[Apache]]></category>

		<category domain="tag" nicename="apache"><![CDATA[Apache]]></category>

		<category><![CDATA[MongoDB]]></category>

		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<category domain="tag"><![CDATA[MongoDB]]></category>

		<category domain="tag" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>为何选择Stackless？</strong> <a href="http://www.stackless.com" target="_blank">http://www.stackless.com</a>

Stackless可以简单的认为是Python一个增强版，最吸引眼球的非“微线程”莫属。微线程是轻量级的线程，与线程相比切换消耗的资源更小，线程内共享数据更加便捷。相比多线程代码更加简洁和可读。此项目是由EVE Online推出，在并发和性能上确实很强劲。安装和Python一样，可以考虑替换原系统Python。:)

<strong>为何选择MongoDB？</strong> <a href="http://www.mongodb.org" target="_blank">http://www.mongodb.org</a>

可以在官网看到很多流行的应用采用MongoDB，比如sourceforge，github等。相比RDBMS有啥优势？首先在速度和性能上优势最为明显，不仅可以当作类似KeyValue数据库来使，还包含了一些数据库查询（Distinct、Group、随机、索引等特性）。再有一点特性就是：简单。不论是应用还是文档，还是第三方API，几乎略过一下就可以使用。不过有点遗憾的就是，存储的数据文件很大，超过正常数据的2-4倍之间。本文测试的Apache日志大小是2G，生产的数据文件有6G。寒...希望在新版里能有所缩身，当然这个也是明显的以空间换速度的后果。

本文除去上面提及到的两个软件，还需要安装pymongo模块。<a href="http://api.mongodb.org/python/" target="_blank">http://api.mongodb.org/python/</a>

模块安装方式有源码编译和easy_install，这里就不再累赘。

1. 从Apache日志中分析出需要保存的资料，比如IP，时间，GET/POST，返回状态码等。
<pre>fmt_str  = '(?P&lt;ip&gt;[.\d]+) - - \[(?P&lt;time&gt;.*?)\] "(?P&lt;method&gt;.*?) (?P&lt;uri&gt;.*?) HTTP/1.\d" (?P&lt;status&gt;\d+) (?P&lt;length&gt;.*?) "(?P&lt;referere&gt;.*?)" "(?P&lt;agent&gt;.*?)"'
fmt_name = re.findall('\?P&lt;(.*?)&gt;', fmt_str)
fmt_re   = re.compile(fmt_str)</pre>
定义了一个正则用于提取每行日志的内容。fmt_name就是提取尖括号中间的变量名。

2. 定义MongoDB相关变量，包括需要存到collection名称。Connection采取的是默认Host和端口。
<pre>conn     = Connection()
apache   = conn.apache
logs     = apache.logs</pre>
3. 保存日志行
<pre>def make_line(line):
    m = fmt_re.search(line)
    if m:
        logs.insert(dict(zip(fmt_name, m.groups())))</pre>
4. 读取Apache日志文件
<pre>def make_log(log_path):
    with open(log_path) as fp:
        for line in fp:
            make_line(line.strip())</pre>
5. 运行把。
<pre>if __name__ == '__main__':
    make_log('d:/apachelog.txt')</pre>
脚本大致情况如此，这里没有放上stackless部分代码，可以参考下面代码：
<pre>import stackless
def print_x(x):
    print x
stackless.tasklet(print_x)('one')
stackless.tasklet(print_x)('two')
stackless.run()</pre>
tasklet操作只是把类似操作放入队列中，run才是真正的运行。这里主要用于替换原有多线程threading并行分析多个日志的行为。

<strong>补充：</strong>

Apache日志大小是2G，671万行左右。生成的数据库有6G。

硬件：Intel(R) Core(TM)2 Duo CPU E7500 @ 2.93GHz 台式机

系统：RHEL 5.2 文件系统ext3

其他：Stackless 2.6.4 MongoDB 1.2

在保存300万左右时候，一切正常。不管是CPU还是内存，以及插入速度都很不错，大概有8-9000条/秒。和以前笔记本上测试结果基本一致。再往以后，内存消耗有点飙升，插入速度也降低。500万左右记录时候CPU达到40%，内存消耗2.1G。在生成第二个2G数据文件时候似乎速度和效率又提升上去了。最终保存的结果不是太满意。

后加用笔记本重新测试了一下1000万数据，速度比上面的671万明显提升很多。初步怀疑有两个地方可能会影响性能和速度：

1. 文件系统的差异。笔记本是Ubuntu 9.10，ext4系统。搜了下ext3和ext4在大文件读写上会有所差距。

2. 正则匹配上。单行操作都是匹配提取。大文件上应该还有优化的空间。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2010-03-04 09:49:34</wp:post_date>
		<wp:post_date_gmt>2010-03-04 01:49:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pythonstackless-mongodb-apache-2g%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1267668334]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1087]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>46</wp:comment_id>
		<wp:comment_author><![CDATA[mrluanma]]></wp:comment_author>
		<wp:comment_author_email>mrluanma@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>220.172.222.29</wp:comment_author_IP>
		<wp:comment_date>2010-03-04 10:36:20</wp:comment_date>
		<wp:comment_date_gmt>2010-03-04 02:36:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[您在哪里看到 Github 用了 MongoDB 了?
我前两天才看到这个 slide(http://www.slideshare.net/err/inside-github), 讲 Github 的发展历程和技术架构, 并没有提到 MongoDB.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>47</wp:comment_id>
		<wp:comment_author><![CDATA[mrluanma]]></wp:comment_author>
		<wp:comment_author_email>mrluanma@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>220.172.222.29</wp:comment_author_IP>
		<wp:comment_date>2010-03-04 10:50:44</wp:comment_date>
		<wp:comment_date_gmt>2010-03-04 02:50:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[对不起, 在 MongoDB 的网站上看到 Github 的确在内部系统中用了 MongoDB http://www.mongodb.org/display/DOCS/Production+Deployments]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>48</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>61.155.8.66</wp:comment_author_IP>
		<wp:comment_date>2010-03-04 11:01:13</wp:comment_date>
		<wp:comment_date_gmt>2010-03-04 03:01:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-263" rel="nofollow">@mrluanma </a>
呵呵，是的，还有sf。有这些支持应该还是比较有前景的，而且最大的优势就是简单。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>49</wp:comment_id>
		<wp:comment_author><![CDATA[超群.com]]></wp:comment_author>
		<wp:comment_author_email>fuchaoqun@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.fuchaoqun.com</wp:comment_author_url>
		<wp:comment_author_IP>61.135.172.68</wp:comment_author_IP>
		<wp:comment_date>2010-03-04 15:12:34</wp:comment_date>
		<wp:comment_date_gmt>2010-03-04 07:12:34</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[stackless不能利用多核，在这里分析日志，作用在哪里？有没有单进程处理和stackless处理时间的对比？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>50</wp:comment_id>
		<wp:comment_author><![CDATA[jeff]]></wp:comment_author>
		<wp:comment_author_email>bbmyth@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://fallever.com</wp:comment_author_url>
		<wp:comment_author_IP>116.199.114.15</wp:comment_author_IP>
		<wp:comment_date>2010-03-07 18:05:18</wp:comment_date>
		<wp:comment_date_gmt>2010-03-07 10:05:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼哥的测试好像是单线程（或协程）写操作？测试过并行写入如何？我在笔记本上测50并发，平均1.6K条/每秒,每数据是4KB的博客文章。依数据size来看还算过得去。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>51</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Bruce]]></wp:comment_author>
		<wp:comment_author_email>bruce1976@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.dobox.com/</wp:comment_author_url>
		<wp:comment_author_IP>60.190.223.54</wp:comment_author_IP>
		<wp:comment_date>2010-05-22 04:04:13</wp:comment_date>
		<wp:comment_date_gmt>2010-05-21 20:04:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-263" rel="nofollow">@mrluanma </a>
呵呵，是的，还有sf。有这些支持应该还是比较有前景的，而且最大的优势就是简单。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>web.py 数据库操作指南</title>
		<link>http://ddbean.wordpress.com/2010/03/19/web-py-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%93%8d%e4%bd%9c%e6%8c%87%e5%8d%97/</link>
		<pubDate>Fri, 19 Mar 2010 03:30:39 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[web.py]]></category>

		<category domain="tag" nicename="web-py"><![CDATA[web.py]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[官网地址：<a href="http://webpy.org/">http://webpy.org/</a>

web.py是一个小巧灵活的框架，最新稳定版是0.33。这里不介绍web开发部分，介绍下关于数据库的相关操作。

很多Pyer一开始都喜欢自己封装数据库操作类，本人亦如此。不过后来通过观摩web.py的源码，发现其数据库操作部分相当紧凑实用。推荐懒人可以尝试一下。

废话不多，先来安装，有两种方式：

<strong>1. easy_install方式</strong>，如果木有此工具，可以参考：<a href="http://chenxiaoyu.org/blog/archives/23">http://chenxiaoyu.org/blog/archives/23</a>
<pre>easy_install web.py</pre>
<strong>2. 下载源码编译</strong>。地址： <a href="http://webpy.org/static/web.py-0.33.tar.gz">http://webpy.org/static/web.py-0.33.tar.gz</a> ，解压后执行：
<pre>python setup.py install</pre>
web.py安装算到此结束，如果想使用其中的db功能，还得借助与相应数据库操作模块，比如MySQLdb、psycopg2。如果需要尝试连接池(database pool)功能，还得装下DBUtils。这几个模块都可以通过easy_install来安装。

下面开始使用吧！

<strong>1. 导入模块，定义数据库连接db。</strong>
<pre>import web
db = web.database(dbn='postgres', db='mydata', user='dbuser', pw='')</pre>
<strong>2. select 查询</strong>
<pre># 查询表
entries = db.select('mytable')

# where 条件
myvar = dict(name="Bob")
results = db.select('mytable', myvar, where="name = $name")
results = db.select('mytable', where="id&gt;100")

# 查询具体列
results = db.select('mytable', what="id,name")

# order by
results = db.select('mytable', order="post_date DESC")

# group
results = db.select('mytable', group="color")

# limit
results = db.select('mytable', limit=10)

# offset
results = db.select('mytable', offset=10)</pre>
<strong>3. 更新</strong>
<pre>db.update('mytable', where="id = 10", value1 = "foo")</pre>
<strong>4. 删除</strong>
<pre>db.delete('mytable', where="id=10")</pre>
<strong>5. 复杂查询</strong>
<pre># count
results = db.query("SELECT COUNT(*) AS total_users FROM users")
print results[0].total_users

# join
results = db.query("SELECT * FROM entries JOIN users WHERE entries.author_id = users.id")

# 防止SQL注入可以这么干
results = db.query("SELECT * FROM users WHERE id=$id", vars={'id':10})</pre>
<strong>6 多数据库操作 (web.py大于0.3)</strong>
<pre>db1 = web.database(dbn='mysql', db='dbname1', user='foo')
db2 = web.database(dbn='mysql', db='dbname2', user='foo')

print db1.select('foo', where='id=1')
print db2.select('bar', where='id=5')</pre>
<strong>7. 事务</strong>
<pre>t = db.transaction()
try:
    db.insert('person', name='foo')
    db.insert('person', name='bar')
except:
    t.rollback()
    raise
else:
    t.commit()

# Python 2.5+ 可以用with
from __future__ import with_statement
with db.transaction():
    db.insert('person', name='foo')
    db.insert('person', name='bar')</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2010-03-19 11:30:39</wp:post_date>
		<wp:post_date_gmt>2010-03-19 03:30:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-py-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%93%8d%e4%bd%9c%e6%8c%87%e5%8d%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1268969442]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[913]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>53</wp:comment_id>
		<wp:comment_author><![CDATA[这周我加星 &#8211; 2010年03月20日 : 这周我加星]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://weekly.laiyonghao.com/2010/03/20/14/</wp:comment_author_url>
		<wp:comment_author_IP>119.88.56.193</wp:comment_author_IP>
		<wp:comment_date>2010-03-20 09:32:08</wp:comment_date>
		<wp:comment_date_gmt>2010-03-20 01:32:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] web.py 数据库操作指南 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>54</wp:comment_id>
		<wp:comment_author><![CDATA[[转]web.py 数据库操作指南 &raquo; Eric Lo]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.lxneng.com/?p=59</wp:comment_author_url>
		<wp:comment_author_IP>74.220.215.218</wp:comment_author_IP>
		<wp:comment_date>2010-03-20 22:23:26</wp:comment_date>
		<wp:comment_date_gmt>2010-03-20 14:23:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 原文地址：http://chenxiaoyu.org/blog/archives/226 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>55</wp:comment_id>
		<wp:comment_author><![CDATA[Zoom.Quiet]]></wp:comment_author>
		<wp:comment_author_email>Zoom.Quiet@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://zoomquiet.org</wp:comment_author_url>
		<wp:comment_author_IP>113.106.106.131</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 10:01:09</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 02:01:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[真用 SQLAlchemy 就好哪...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>189</wp:comment_id>
		<wp:comment_author><![CDATA[cme]]></wp:comment_author>
		<wp:comment_author_email>cmesoft@126.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>114.251.86.0</wp:comment_author_IP>
		<wp:comment_date>2011-03-08 14:43:33</wp:comment_date>
		<wp:comment_date_gmt>2011-03-08 06:43:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[玉帝牛逼]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Nginx 启动/重启脚本笔记</title>
		<link>http://ddbean.wordpress.com/2010/03/27/nginx-%e5%90%af%e5%8a%a8%e9%87%8d%e5%90%af%e8%84%9a%e6%9c%ac%e7%ac%94%e8%ae%b0/</link>
		<pubDate>Sat, 27 Mar 2010 06:28:10 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Nginx]]></category>

		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>

		<category domain="tag"><![CDATA[Nginx]]></category>

		<category domain="tag" nicename="nginx"><![CDATA[Nginx]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=232</guid>
		<description></description>
		<content:encoded><![CDATA[Nginx本身可以通过
<pre>kill -HUP `cat /usr/local/nginx/logs/nginx.pid`
</pre>
进行平滑重启的，可以通过ps进程查看一下。效果还是挺不错的。

这里介绍的是另外一种方式service，适合RHEL/CentOS系列。

1. kill nginx进程
<pre>kill `cat /usr/local/nginx/logs/nginx.pid`
</pre>
2. 建立 /etc/init.d/nginx 文件
<pre>#!/bin/sh
#
# nginx - this script starts and stops the nginx daemin
#
# chkconfig:   - 85 15
# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /usr/local/nginx/conf/nginx.conf
# pidfile:     /usr/local/nginx/logs/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] &amp;&amp; exit 0

nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)

NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"

lockfile=/var/lock/subsys/nginx

start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] &amp;&amp; touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc $prog -QUIT
    retval=$?
    echo
    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile
    return $retval
}

restart() {
    configtest || return $?
    stop
    start
}

reload() {
    configtest || return $?
    echo -n $"Reloading $prog: "
    killproc $nginx -HUP
    RETVAL=$?
    echo
}

force_reload() {
    restart
}

configtest() {
  $nginx -t -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status &gt;/dev/null 2&gt;&amp;1
}

case "$1" in
    start)
        rh_status_q &amp;&amp; exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac</pre>
3. 设置脚本为可执行
<pre>chmod +x /etc/init.d/nginx
</pre>
4.
<pre>/sbin/chkconfig nginx on
</pre>
5. 检查下
<pre>/sbin/chkconfig --list nginx
nginx           0:off   1:off   2:on    3:on    4:on    5:on    6:off
</pre>
完成咯~可以尝试下面方式启动或者重启
<pre>service nginx start
service nginx stop
service nginx restart
service nginx reload

/etc/init.d/nginx start
/etc/init.d/nginx stop
/etc/init.d/nginx restart
/etc/init.d/nginx reload
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>232</wp:post_id>
		<wp:post_date>2010-03-27 14:28:10</wp:post_date>
		<wp:post_date_gmt>2010-03-27 06:28:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nginx-%e5%90%af%e5%8a%a8%e9%87%8d%e5%90%af%e8%84%9a%e6%9c%ac%e7%ac%94%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1269671292]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[517]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>56</wp:comment_id>
		<wp:comment_author><![CDATA[白杨树]]></wp:comment_author>
		<wp:comment_author_email>meflyingfish@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://dbahacker.com</wp:comment_author_url>
		<wp:comment_author_IP>60.12.227.4</wp:comment_author_IP>
		<wp:comment_date>2010-04-01 12:45:59</wp:comment_date>
		<wp:comment_date_gmt>2010-04-01 04:45:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我还没接触过nginx呢，有空要玩玩｀～]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>57</wp:comment_id>
		<wp:comment_author><![CDATA[lostsnow]]></wp:comment_author>
		<wp:comment_author_email>lostsnow@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.lsproc.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>202.106.180.62</wp:comment_author_IP>
		<wp:comment_date>2010-04-22 16:43:50</wp:comment_date>
		<wp:comment_date_gmt>2010-04-22 08:43:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[nginx version &gt;= 0.7.53 已经支持了 stop, quit, reopen, reload

-s signal Send signal to a master process: stop, quit, reopen, reload.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>梦想与坚持</title>
		<link>http://ddbean.wordpress.com/2010/04/09/%e6%a2%a6%e6%83%b3%e4%b8%8e%e5%9d%9a%e6%8c%81/</link>
		<pubDate>Thu, 08 Apr 2010 16:15:32 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Other]]></category>

		<category domain="category" nicename="other"><![CDATA[Other]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[经过几天的适应总算在杭州安定下来了，回归到简单而快乐的上班生活轨道上。

夜深人静的时侯才能静下心来写点关于自己的话题，不再浮躁。

回想这毕业后的六年多的时间，自己都在做些什么？工作的内容在不停的变化，唯一不变的就是坚持了自己的梦想，一个小小的技术梦想。梦想只是目标，而坚持应该是梦想的过程。结果不一定很绚烂，但过程一定要精彩。

第一份工作真的很稚嫩，从文科啥也不懂，菜鸟起步，做起了Web设计和简单的程序编写。当然起步都是需要点时间和积累的。现在还记得为自己做出一个个简单的动画效果而激动无比的场景。随着时间的推移，发觉自己在创意方面的缺乏，两年之后就离开了生活的那个城市。

第二份工作时间很长，四年半的时间。算是一个正规军把 :) 只不过后来也变得有点山寨。收获最大的就是伴随着公司的发展对技术的不断提高要求，接触的很越来越多。最初那种土鳖式的代码工已经不符合了。逐步了解了分层模式，框架，服务器，数据库等等很多有趣的东西。而不仅仅的是把代码写完就完事了。技术上面的提高，当然也带来视野上的扩展。从开始的单一语言发展到后来的多语言结合，单一的数据库到几十台的主从结构，数据应用的分离，数据的切分，缓存系统的应用，以及服务器模块的开发。现在还记得某年的夏天没有空调一帮人赤膊写代码的场景，多hi阿。回想起过去的种种，内心真的难以平静。有时侯想想真的不是想离开，有点无奈。

最近踏上了新的起点，六年以后的第三份工作：淘宝。最初喜欢上淘宝是因为看到的网上办公环境照片，通过一些朋友的了解，里面的武侠文化很吸引自己，想想自己曾经也疯狂迷恋过武侠小说，导致正经的文学没学几篇，很是遗憾阿。经过这几天的初步接触，每天都会有着不同的收获。虽然从事的工作跟过去的内容和岗位都不太一样，但是正因为如此才有更多的好奇与向往。

一直相信只要有坚持，就会有梦想。而不是倒过来，本子电也不多了，洗洗睡吧。祝自己好运，good night！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2010-04-09 00:15:32</wp:post_date>
		<wp:post_date_gmt>2010-04-08 16:15:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%a2%a6%e6%83%b3%e4%b8%8e%e5%9d%9a%e6%8c%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1270743684]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[374]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>58</wp:comment_id>
		<wp:comment_author><![CDATA[白杨树]]></wp:comment_author>
		<wp:comment_author_email>meflyingfish@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://dbahacker.com</wp:comment_author_url>
		<wp:comment_author_IP>60.186.198.219</wp:comment_author_IP>
		<wp:comment_date>2010-04-09 01:30:14</wp:comment_date>
		<wp:comment_date_gmt>2010-04-08 17:30:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[经历很精彩嘛~

希望你在淘宝会有更精彩的生活]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>59</wp:comment_id>
		<wp:comment_author><![CDATA[灰太狼大王]]></wp:comment_author>
		<wp:comment_author_email>mykingheaven@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://davidx.me/</wp:comment_author_url>
		<wp:comment_author_IP>219.144.206.200</wp:comment_author_IP>
		<wp:comment_date>2010-04-09 09:14:42</wp:comment_date>
		<wp:comment_date_gmt>2010-04-09 01:14:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼哥该换本子了, 电池就这么点电了, 去淘宝了, 赶紧买个mbp庆祝下啊]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>60</wp:comment_id>
		<wp:comment_author><![CDATA[花猫]]></wp:comment_author>
		<wp:comment_author_email>willcwei+86@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://aggron.org</wp:comment_author_url>
		<wp:comment_author_IP>114.114.96.24</wp:comment_author_IP>
		<wp:comment_date>2010-04-15 20:59:56</wp:comment_date>
		<wp:comment_date_gmt>2010-04-15 12:59:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[在淘宝应该很不错吧。
加油~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>61</wp:comment_id>
		<wp:comment_author><![CDATA[流浪猫]]></wp:comment_author>
		<wp:comment_author_email>mysqldba@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://hi.baidu.com/ytjwt</wp:comment_author_url>
		<wp:comment_author_IP>124.126.125.146</wp:comment_author_IP>
		<wp:comment_date>2010-04-29 15:58:33</wp:comment_date>
		<wp:comment_date_gmt>2010-04-29 07:58:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[淘宝的啊，很厉害]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>62</wp:comment_id>
		<wp:comment_author><![CDATA[squirrel]]></wp:comment_author>
		<wp:comment_author_email>abc@163.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>116.204.112.15</wp:comment_author_IP>
		<wp:comment_date>2010-05-15 13:57:16</wp:comment_date>
		<wp:comment_date_gmt>2010-05-15 05:57:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼儿原来是学文科的？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>63</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>60.177.58.113</wp:comment_author_IP>
		<wp:comment_date>2010-05-15 16:57:14</wp:comment_date>
		<wp:comment_date_gmt>2010-05-15 08:57:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[嗯，见笑了。勉强算文科生把。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>62</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>64</wp:comment_id>
		<wp:comment_author><![CDATA[tinyfool]]></wp:comment_author>
		<wp:comment_author_email>tinyfool@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>159.226.43.61</wp:comment_author_IP>
		<wp:comment_date>2010-05-31 14:36:24</wp:comment_date>
		<wp:comment_date_gmt>2010-05-31 06:36:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[路过。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>65</wp:comment_id>
		<wp:comment_author><![CDATA[Bo]]></wp:comment_author>
		<wp:comment_author_email>docsun.bo@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>114.255.74.226</wp:comment_author_IP>
		<wp:comment_date>2010-06-07 11:22:17</wp:comment_date>
		<wp:comment_date_gmt>2010-06-07 03:22:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[路过，呵呵，我才毕业一年，师兄好！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python ConfigParser 与 ConfigObj INI 配置读写顺序</title>
		<link>http://ddbean.wordpress.com/2010/04/19/python-configparser-%e4%b8%8e-configobj-ini-%e9%85%8d%e7%bd%ae%e8%af%bb%e5%86%99%e9%a1%ba%e5%ba%8f/</link>
		<pubDate>Mon, 19 Apr 2010 12:27:25 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[默认的ConfigParser对于选项是按照字母顺序排列的。如下代码：
<pre>&gt;&gt;&gt; from ConfigParser import ConfigParser
&gt;&gt;&gt; cf = ConfigParser()
&gt;&gt;&gt; cf.add_section('d')
&gt;&gt;&gt; cf.set('d', 'name', 'smallfish')
&gt;&gt;&gt; cf.add_section('a')
&gt;&gt;&gt; cf.set('a', 'name', 'smallfish2')
&gt;&gt;&gt; cf.write(open('d:/a.ini', 'w'))
&gt;&gt;&gt; cf = None</pre>
生成配置如下：
<pre>[a]
name = smallfish2
[d]
name = smallfish</pre>
翻阅了官方文档似乎对ConfigParser中section的顺序没啥解说，毕竟字典本身就是无序的，如果想修改估计只能从源码入手把。不过有一个ConfigObj库还不错，可以实现顺序，当然功能不仅仅如此啦。下载地址：<a href="http://www.voidspace.org.uk/python/configobj.html" target="_blank">http://www.voidspace.org.uk/python/configobj.html</a>

代码片段如下：
<pre>&gt;&gt;&gt; from configobj import ConfigObj
&gt;&gt;&gt; config = ConfigObj()
&gt;&gt;&gt; config.filename = 'd:/a.ini'
&gt;&gt;&gt; config['d'] = {}
&gt;&gt;&gt; config['d']['name'] = 'smallfish'
&gt;&gt;&gt; config['a'] = {}
&gt;&gt;&gt; config['a']['name'] = 'smallfish2'
&gt;&gt;&gt; config.write()</pre>
生成配置如下：
<pre>[d]
name = smallfish
[a]
name = smallfish2</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2010-04-19 20:27:25</wp:post_date>
		<wp:post_date_gmt>2010-04-19 12:27:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-configparser-%e4%b8%8e-configobj-ini-%e9%85%8d%e7%bd%ae%e8%af%bb%e5%86%99%e9%a1%ba%e5%ba%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1272133407]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[499]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>66</wp:comment_id>
		<wp:comment_author><![CDATA[这周我加星 &#8211; 2010年04月23日 : 这周我加星]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://weekly.laiyonghao.com/2010/04/23/29/</wp:comment_author_url>
		<wp:comment_author_IP>119.88.56.193</wp:comment_author_IP>
		<wp:comment_date>2010-04-23 14:02:52</wp:comment_date>
		<wp:comment_date_gmt>2010-04-23 06:02:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Python ConfigParser 与 ConfigObj INI 配置读写顺序 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>[译] MongoDB 入门教程</title>
		<link>http://ddbean.wordpress.com/2010/04/27/%e8%af%91-mongodb-%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b/</link>
		<pubDate>Tue, 27 Apr 2010 12:39:05 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[MongoDB]]></category>

		<category domain="category" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<category domain="tag"><![CDATA[MongoDB]]></category>

		<category domain="tag" nicename="mongodb"><![CDATA[MongoDB]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[原文参见：<a href="http://www.mongodb.org/display/DOCS/Tutorial" target="_blank">http://www.mongodb.org/display/DOCS/Tutorial</a>

<strong>启动数据库</strong>

下载 <a href="http://www.mongodb.org/display/DOCS/Downloads" target="_blank">MongoDB</a>, 解压后并启动:
<pre>$ bin/mongod</pre>
MongoDB 默认存储数据目录为 /data/db/ (或者 c:\data\db), 当然你也可以修改成不同目录, 只需要指定 --dbpath 参数:
<pre>$ bin/mongod --dbpath /path/to/my/data/dir</pre>
<strong>获取数据库连接</strong>

现在我们就可以使用自带的shell工具来操作数据库了. (我们也可以使用各种编程语言的驱动来使用MongoDB, 自带的shell工具可以方便我们管理数据库)

启动 MongoDB JavaScript 工具:
<pre>$ bin/mongo</pre>
默认 shell 连接的是本机localhost 上面的 test库, 会看到:
<pre>MongoDB shell version: 0.9.8
url: test
connecting to: test
type "help" for help
&gt;</pre>
"connecting to:" 这个会显示你正在使用的数据库的名称. 想换数据库的话可以:
<pre>&gt; use mydb</pre>
可以输入 help 来查看所有的命令.

<strong>插入数据到集合</strong>

下面我们来建立一个test的集合并写入一些数据. 建立两个对象, j 和 t , 并保存到集合中去.
在例子里  '&gt;'  来表示是 shell 输入提示符
<pre>&gt; j = { name : "mongo" };
{"name" : "mongo"}
&gt; t = { x : 3 };
{ "x" : 3  }
&gt; db.things.save(j);
&gt; db.things.save(t);
&gt; db.things.find();
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
{"x" : 3 , "_id" : ObjectId("497cf61651712cf7758fbdbc")}
&gt;</pre>
有几点需要注意下 :
<ul>
	<li>不需要预先建立一个集合. 在第一次插入数据时候会自动建立.</li>
	<li>在例子其实可以存储任何结构的数据, 当然在实际应用我们存储的还是相同元素的集合. 这个特性其实可以在应用里很灵活, 你不需要类似 alter table 来修改你的数据结构</li>
	<li>每次插入数据时候对象都会有一个ID, 名字叫 _id.</li>
</ul>
当你运行不同的例子, 你的对象ID值都是不同的.

下面再加点数据:
<pre>&gt; for( var i = 1; i &lt; 10; i++ ) db.things.save( { x:4, j:i } ); &gt; db.things.find();
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
{"x" : 3 , "_id" : ObjectId("497cf61651712cf7758fbdbc")}
{"x" : 4 , "j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
{"x" : 4 , "j" : 2 , "_id" : ObjectId("497cf87151712cf7758fbdbe")}
{"x" : 4 , "j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}
{"x" : 4 , "j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}
{"x" : 4 , "j" : 5 , "_id" : ObjectId("497cf87151712cf7758fbdc1")}
{"x" : 4 , "j" : 6 , "_id" : ObjectId("497cf87151712cf7758fbdc2")}
{"x" : 4 , "j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"x" : 4 , "j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}</pre>
请注意下, 这里循环次数是10, 但是只显示到8, 还有2条数据没有显示.

如果想继续查询下面的数据只需要使用 it 命令, 就会继续下面的数据:
<pre>{"x" : 4 , "j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"x" : 4 , "j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}</pre>
继续
<pre>&gt; it
{"x" : 4 , "j" : 9 , "_id" : ObjectId("497cf87151712cf7758fbdc5")}
{"x" : 4 , "j" : 10 , "_id" : ObjectId("497cf87151712cf7758fbdc6")}</pre>
从技术上讲 find() 返回一个游标对象. 但在上面的例子里, 并没有拿到一个游标的变量. 所以 shell 自动遍历游标, 返回一个初始化的set, 并允许我们继续用 it 迭代输出.

当然我们也可以直接用游标来输出, 不过这个是下一部分的内容了.

<strong>查询数据</strong>

在没有深入查询之前, 我们先看看怎么从一个查询中返回一个游标对象. 可以简单的通过 find() 来查询, 他返回一个任意结构的集合. 如果实现特定的查询稍后讲解.

实现上面同样的查询, 然后通过 while 来输出:
<pre>&gt; var cursor = db.things.find();
&gt; while (cursor.hasNext()) { print(tojson(cursor.next())); }
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
{"x" : 3 , "_id" : ObjectId("497cf61651712cf7758fbdbc")}
{"x" : 4 , "j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
{"x" : 4 , "j" : 2 , "_id" : ObjectId("497cf87151712cf7758fbdbe")}
{"x" : 4 , "j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}
{"x" : 4 , "j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}
{"x" : 4 , "j" : 5 , "_id" : ObjectId("497cf87151712cf7758fbdc1")}
{"x" : 4 , "j" : 6 , "_id" : ObjectId("497cf87151712cf7758fbdc2")}
{"x" : 4 , "j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"x" : 4 , "j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}
{"x" : 4 , "j" : 9 , "_id" : ObjectId("497cf87151712cf7758fbdc5")}
&gt;</pre>
上面的例子显示了游标风格的迭代输出. hasNext() 函数告诉我们是否还有数据, 如果有则可以调用 next() 函数. 这里我们也用了自带的 tojson() 方法返回一个标准的 JSON 格式数据.

当我们使用的是 JavaScript shell, 可以用到JS的特性, forEach 就可以输出游标了. 下面的例子就是使用 forEach() 来循环输出:
<pre>&gt; db.things.find().forEach( function(x) { print(tojson(x));});
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
{"x" : 3 , "_id" : ObjectId("497cf61651712cf7758fbdbc")}
{"x" : 4 , "j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
{"x" : 4 , "j" : 2 , "_id" : ObjectId("497cf87151712cf7758fbdbe")}
{"x" : 4 , "j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}
{"x" : 4 , "j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}
{"x" : 4 , "j" : 5 , "_id" : ObjectId("497cf87151712cf7758fbdc1")}
{"x" : 4 , "j" : 6 , "_id" : ObjectId("497cf87151712cf7758fbdc2")}
{"x" : 4 , "j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"x" : 4 , "j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}
{"x" : 4 , "j" : 9 , "_id" : ObjectId("497cf87151712cf7758fbdc5")}
&gt;</pre>
forEach() 必须定义一个函数供每个游标元素调用.

在 mongo shell 里, 我们也可以把游标当作数组来用 :
<pre>&gt; var cursor = db.things.find();
&gt; print (tojson(cursor[4]));
{"x" : 4 , "j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}</pre>
使用游标时候请注意占用内存的问题, 特别是很大的游标对象, 有可能会内存溢出. 所以应该用迭代的方式来输出.

下面的示例则是把游标转换成真实的数组类型:
<pre>&gt; var arr = db.things.find().toArray();
&gt; arr[5];
{"x" : 4 , "j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}</pre>
请注意这些特性只是在 mongo shell 里使用, 而不是所有的其他应用程序驱动都支持.

MongoDB 游标对象不是没有快照 - 如果有其他用户在集合里第一次或者最后一次调用 next(), 你可以得不到游标里的数据. 所以要明确的锁定你要查询的游标.

<strong>指定条件的查询</strong>

到这里我们已经知道怎么从游标里实现一个查询并返回数据对象, 下面就来看看怎么根据指定的条件来查询.

下面的示例就是说明如何执行一个类似SQL的查询, 并演示了怎么在 MongoDB 里实现. 这是在 MongoDB shell 里查询, 当然你也可以用其他的应用驱动或者语言来实现:
<pre>SELECT * FROM things WHERE name="mongo"</pre>
<pre>&gt; db.things.find({name:"mongo"}).forEach(function(x) { print(tojson(x));});
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
&gt;</pre>
<pre>SELECT * FROM things WHERE x=4</pre>
<pre>&gt; db.things.find({x:4}).forEach(function(x) { print(tojson(x));});
{"x" : 4 , "j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
{"x" : 4 , "j" : 2 , "_id" : ObjectId("497cf87151712cf7758fbdbe")}
{"x" : 4 , "j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}
{"x" : 4 , "j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}
{"x" : 4 , "j" : 5 , "_id" : ObjectId("497cf87151712cf7758fbdc1")}
{"x" : 4 , "j" : 6 , "_id" : ObjectId("497cf87151712cf7758fbdc2")}
{"x" : 4 , "j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"x" : 4 , "j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}
{"x" : 4 , "j" : 9 , "_id" : ObjectId("497cf87151712cf7758fbdc5")}
&gt;</pre>
查询条件是 { a:A, b:B, ... } 类似 "where a==A and b==B and ...", 更多的查询方式可以参考 Mongo 开发教程部分.

上面显示的是所有的元素, 当然我们也可以返回特定的元素, 类似于返回表里某字段的值, 只需要在 find({x:4}) 里指定元素的名字, 比如 j:
<pre>SELECT j FROM things WHERE x=4</pre>
<pre>&gt; db.things.find({x:4}, {j:true}).forEach(function(x) { print(tojson(x));});
{"j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
{"j" : 2 , "_id" : ObjectId("497cf87151712cf7758fbdbe")}
{"j" : 3 , "_id" : ObjectId("497cf87151712cf7758fbdbf")}
{"j" : 4 , "_id" : ObjectId("497cf87151712cf7758fbdc0")}
{"j" : 5 , "_id" : ObjectId("497cf87151712cf7758fbdc1")}
{"j" : 6 , "_id" : ObjectId("497cf87151712cf7758fbdc2")}
{"j" : 7 , "_id" : ObjectId("497cf87151712cf7758fbdc3")}
{"j" : 8 , "_id" : ObjectId("497cf87151712cf7758fbdc4")}
{"j" : 9 , "_id" : ObjectId("497cf87151712cf7758fbdc5")}
&gt;</pre>
请注意 "_id" 元素会一直被返回.

<strong>findOne() - 语法糖</strong>

为了方便, mongo shell (其他驱动) 避免游标的可能带来的开销, 提供一个findOne() 函数. 这个函数和 find() 参数一样, 不过他返回游标里第一条数据, 或者返回 null 空数据库.

作为一个例子, name=='mongo' 可以用很多方法来实现, 可以用 next() 来循环游标(需要校验是否为null), 或者当做数组返回第一个元素.

但是用 findOne() 方法则更简单和高效:
<pre>&gt; var mongo = db.things.findOne({name:"mongo"});
&gt; print(tojson(mongo));
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
&gt;</pre>
findOne 方法更跟 find({name:"mongo"}).limit(1) 一样.

<strong>limit() 查询</strong>

你可以需要限制结果集的长度, 可以调用 limit 方法.

这是强烈推荐高性能的原因, 通过限制条数来减少网络传输, 例如:
<pre>&gt; db.things.find().limit(3);
in cursor for : DBQuery: example.things -&gt;
{"name" : "mongo" , "_id" : ObjectId("497cf60751712cf7758fbdbb")}
{"x" : 3 , "_id" : ObjectId("497cf61651712cf7758fbdbc")}
{"x" : 4 , "j" : 1 , "_id" : ObjectId("497cf87151712cf7758fbdbd")}
&gt;</pre>
<strong>更多帮助</strong>

除非了一般的 help 之外, 你还可以查询 help 数据库和db.whatever 来查询具体的说明.

如果你对一个函数要做什么, 你可以不输入 {{()}} 这些结束的括号则可以输出实现的源码, 例如:
<pre>&gt; db.foo.insert
function (obj, _allow_dot) {
    if (!obj) {
        throw "no object passed to insert!";
    }
    if (!_allow_dot) {
        this._validateForStorage(obj);
    }
    return this._mongo.insert(this._fullName, obj);
}</pre>
mongo 是一个完整的 JavaScript shell程序, 所以在 shell 里完全可以私用JS的方法、类、语法. 此外, MongoDB 定义很多自己的类和全局变量 (比如 db). 这里可以查看完整的API说明 <a href="http://api.mongodb.org/js/" target="_blank">http://api.mongodb.org/js/</a>.

<strong>接下来</strong>

看完这篇教程后下一步则看MongoDB更详细的文档 <a href="http://www.mongodb.org/display/DOCS/Manual" target="_blank">http://www.mongodb.org/display/DOCS/Manual</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2010-04-27 20:39:05</wp:post_date>
		<wp:post_date_gmt>2010-04-27 12:39:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%af%91-mongodb-%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1272371947]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[2089]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>68</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish » [译] MongoDB 入门教程 -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/trackback?utm_source=pingback&amp;utm_campaign=L2&amp;url=http://chenxiaoyu.org/blog/archives/242</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-04-27 21:03:56</wp:comment_date>
		<wp:comment_date_gmt>2010-04-27 13:03:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by MC.Spring, hmsea and 感染源, smallfish. smallfish said: [译] MongoDB 入门教程 http://chenxiaoyu.org/blog/archives/242 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>69</wp:comment_id>
		<wp:comment_author><![CDATA[xLight]]></wp:comment_author>
		<wp:comment_author_email>xbluelight@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>114.246.156.43</wp:comment_author_IP>
		<wp:comment_date>2010-04-28 01:33:23</wp:comment_date>
		<wp:comment_date_gmt>2010-04-27 17:33:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Limit 可以像mysql一样limit 30,10吗？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>70</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.237</wp:comment_author_IP>
		<wp:comment_date>2010-04-28 08:52:52</wp:comment_date>
		<wp:comment_date_gmt>2010-04-28 00:52:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[当然可以的我啊，有 limit 和 offset 的用法。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>69</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>71</wp:comment_id>
		<wp:comment_author><![CDATA[这周我加星 &#8211; 2010年04月30日 : 这周我加星]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://weekly.laiyonghao.com/2010/04/30/32/</wp:comment_author_url>
		<wp:comment_author_IP>119.88.56.193</wp:comment_author_IP>
		<wp:comment_date>2010-04-30 09:24:15</wp:comment_date>
		<wp:comment_date_gmt>2010-04-30 01:24:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] [译] MongoDB 入门教程 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>72</wp:comment_id>
		<wp:comment_author><![CDATA[HouXinJie]]></wp:comment_author>
		<wp:comment_author_email>houxinjie@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>125.37.13.79</wp:comment_author_IP>
		<wp:comment_date>2010-05-04 14:23:00</wp:comment_date>
		<wp:comment_date_gmt>2010-05-04 06:23:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-484" rel="nofollow">@smallfish </a>
是limit和skip]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>73</wp:comment_id>
		<wp:comment_author><![CDATA[Nicholas]]></wp:comment_author>
		<wp:comment_author_email>macre@sohu.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>110.184.102.146</wp:comment_author_IP>
		<wp:comment_date>2010-05-06 20:59:54</wp:comment_date>
		<wp:comment_date_gmt>2010-05-06 12:59:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[请问一个问题：
在往mongodb 中insert一条记录中包含有中文的时候，mongodb给我一个以下错误提示：

&gt; db.TestTabel.insert({'name':"测试",'age':2})
Thu May 06 20:33:21 JS Error: malformed UTF-8 character sequence at offset 29

这个问题怎么解决呢？
我的mongodb的版本是：
mongodb-win32-x86_64-1.4.0

谢谢。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>74</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>60.177.59.19</wp:comment_author_IP>
		<wp:comment_date>2010-05-09 14:51:09</wp:comment_date>
		<wp:comment_date_gmt>2010-05-09 06:51:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[嗯，确实有这个问题。你可以尝试下第三方程序API里插入试试。把文件设置为utf8编码。
或者做一个utf文本，然后load进来。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>73</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>75</wp:comment_id>
		<wp:comment_author><![CDATA[wolf]]></wp:comment_author>
		<wp:comment_author_email>vipmail6@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>221.221.161.135</wp:comment_author_IP>
		<wp:comment_date>2010-05-18 23:04:13</wp:comment_date>
		<wp:comment_date_gmt>2010-05-18 15:04:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[db.users.find({}, {}, 10, 20);]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>[图文解说] Virtual Box 通过 NAT(默认) 共享虚拟机中的服务</title>
		<link>http://ddbean.wordpress.com/2010/05/10/%e5%9b%be%e6%96%87%e8%a7%a3%e8%af%b4-virtual-box-%e9%80%9a%e8%bf%87-nat%e9%bb%98%e8%ae%a4-%e5%85%b1%e4%ba%ab%e8%99%9a%e6%8b%9f%e6%9c%ba%e4%b8%ad%e7%9a%84%e6%9c%8d%e5%8a%a1/</link>
		<pubDate>Mon, 10 May 2010 13:13:11 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[VirtualBox]]></category>

		<category domain="category" nicename="virtualbox"><![CDATA[VirtualBox]]></category>

		<category domain="tag"><![CDATA[VirtualBox]]></category>

		<category domain="tag" nicename="virtualbox"><![CDATA[VirtualBox]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/blog/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[Virtual Box 是个不错的虚拟机，小巧，功能也齐全。好像有点推销鸟。说正题，上次有个朋友就提到怎么能主机里访问虚拟机里的服务，昨晚实验了下，颇为顺利。记录下。这里利用的是默认的NAT上网，也就是共享主机上网，而不是设置独立的IP。

主机：Win XP
虚拟：Ubuntu 9.10

目的：Win里ssh进Ubuntu，能访问里面提供的服务。

主要是通过 VBoxManage setextradata 设置一些属性。

先上几个步骤图把。注意一下修改，先得关闭虚拟机，修改完事以后再启动。

<strong>1. 查看虚拟机中的名称：ubuntu9</strong>

<img title="vbox-nat-0" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-0.gif" alt="" />

<strong>2. 进入本机Vbox目录，运行VBoxManage，查看下。</strong>

<img class="alignnone size-full wp-image-249" title="vbox-nat-1" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-1.gif" alt="" width="669" height="315" />

<a href="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-5.gif"></a>
<strong> 3. 添加三个项目</strong>

下面的pcnet是vbox里的网络设置，0是表示第一个网卡，后面一次类推。22是ssh端口，映射到主机的22端口。
<pre>VBoxManage setextradata "ubuntu9"  "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/Protocol" TCP
VBoxManage setextradata "ubuntu9"  "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/GuestPort" 22
VBoxManage setextradata "ubuntu9"  "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/HostPort" 22</pre>
<img title="vbox-nat-2" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-2.gif" alt="" width="660" height="391" />

<a href="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-2.gif"></a><strong>4. 再次查看</strong>

<img class="alignnone size-full wp-image-251" title="vbox-nat-3" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-3.gif" alt="" width="662" height="348" />

<strong>5. 启动虚拟机。</strong>

<strong>6. 设置putty登陆之。</strong>

<img class="alignnone size-full wp-image-252" title="vbox-nat-4" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-4.gif" alt="" width="454" height="272" />

<img class="alignnone size-full wp-image-253" title="vbox-nat-5" src="http://chenxiaoyu.org/wp-content/uploads/2010/05/vbox-nat-5.gif" alt="" width="569" height="175" />

到这里已经顺利ssh 到127.0.0.1，如果想访问虚拟机里的web服务器呢？同样很简单。

只要如下设置，web端口为81，跟上面也雷同：
<pre>VBoxManage setextradata "ubuntu9" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/web/Protocol" TCP
VBoxManage setextradata "ubuntu9" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/web/GuestPort" 81
VBoxManage setextradata "ubuntu9" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/web/HostPort" 81</pre>
另外如果想清空上面设置的选项，只要不设置后面的值即可：
<pre>VBoxManage setextradata "ubuntu9" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/web/Protocol"</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2010-05-10 21:13:11</wp:post_date>
		<wp:post_date_gmt>2010-05-10 13:13:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%9b%be%e6%96%87%e8%a7%a3%e8%af%b4-virtual-box-%e9%80%9a%e8%bf%87-nat%e9%bb%98%e8%ae%a4-%e5%85%b1%e4%ba%ab%e8%99%9a%e6%8b%9f%e6%9c%ba%e4%b8%ad%e7%9a%84%e6%9c%8d%e5%8a%a1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1274075068]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1108]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>77</wp:comment_id>
		<wp:comment_author><![CDATA[午夜兰花手札]]></wp:comment_author>
		<wp:comment_author_email>376939837@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.xyzlove.com</wp:comment_author_url>
		<wp:comment_author_IP>218.6.56.130</wp:comment_author_IP>
		<wp:comment_date>2010-05-11 15:30:26</wp:comment_date>
		<wp:comment_date_gmt>2010-05-11 07:30:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[辛苦了，图文并茂，我这样的菜鸟也学得会。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>78</wp:comment_id>
		<wp:comment_author><![CDATA[QWW]]></wp:comment_author>
		<wp:comment_author_email>122131@123.COM</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>111.193.205.47</wp:comment_author_IP>
		<wp:comment_date>2010-05-16 22:08:14</wp:comment_date>
		<wp:comment_date_gmt>2010-05-16 14:08:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[谢谢大哥，我一看你的文章后照着做一切OK。感谢]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>79</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 空虚]]></wp:comment_author>
		<wp:comment_author_email>c@c.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.coozd.com.cn</wp:comment_author_url>
		<wp:comment_author_IP>220.184.195.30</wp:comment_author_IP>
		<wp:comment_date>2010-05-20 19:40:11</wp:comment_date>
		<wp:comment_date_gmt>2010-05-20 11:40:11</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[果然内涵。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>80</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Steve]]></wp:comment_author>
		<wp:comment_author_email>steve1956@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.auterytech.com/</wp:comment_author_url>
		<wp:comment_author_IP>189.3.89.151</wp:comment_author_IP>
		<wp:comment_date>2010-05-29 20:54:00</wp:comment_date>
		<wp:comment_date_gmt>2010-05-29 12:54:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[辛苦了，图文并茂，我这样的菜鸟也学得会。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>81</wp:comment_id>
		<wp:comment_author><![CDATA[硬盘被格]]></wp:comment_author>
		<wp:comment_author_email>gjflsl111@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.lisunlou.com</wp:comment_author_url>
		<wp:comment_author_IP>74.86.0.138</wp:comment_author_IP>
		<wp:comment_date>2010-07-01 15:51:13</wp:comment_date>
		<wp:comment_date_gmt>2010-07-01 07:51:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[还是喜欢桥接模式....]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>其实我就是个演员</title>
		<link>http://ddbean.wordpress.com/2010/05/21/%e5%85%b6%e5%ae%9e%e6%88%91%e5%b0%b1%e6%98%af%e4%b8%aa%e6%bc%94%e5%91%98/</link>
		<pubDate>Fri, 21 May 2010 14:05:33 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Other]]></category>

		<category domain="category" nicename="other"><![CDATA[Other]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[注：此文系纯水贴，正经人士请绕道。 :)

场景1
某日很HI的写着程序，凑巧做网页的美工不在，活又耽误不得，只能捋起袖子，装起了Dreamweaver+Fireworks，三下五除二搞定了前端页面。话说自从开始写程序起，就很少碰这些高级玩意了。现在只是偶尔PS修修抠抠图，享受下钢笔抠图小YY一把就足够了。
其实在做程序之前，俺一直是个美工，作图做页面只不过信手拈来。

场景2
简历给某朋友看了之后，很惊讶道：原来你是做Java的？只好含泪不语+内流满面了。难道我博客只写Python或者Perl，不意味着俺就是折腾这些的哇。只好幽幽的坦然回答之：其实我的主业是Java开发者，做了六年多。
其实动态语言只是我的业余爱好，顺带写了点分享的博文而已。只不过对外闭口没提Java。

场景3
有些朋友看我经常推荐PostgreSQL，就问俺：Pg和MySQL到底有哪些区别？描述种种，感觉可能他也云里雾里。遂让他自己说说需求，最后还是推荐他用MySQL。顺带讲述了一些常用优化和监控的办法。丫又惊讶的说原来你一直用的MySQL啊。好吧，只好再次内流。
其实我正儿八经用数据库最长久的就是MySQL了，基本也有六年多了把。Pg只是我的业余爱好，没事研究了下，寻找下乐趣而已。

如此场景会继续重现，遂略过数字。。。

其实，我就是个演员。对系统（Linux）、语言（Java/Python/Perl）、数据库（MySQL/PostgreSQL）都略懂的角色。

不同的时间，演绎不同的角色。过去是，现在是，将来也是。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2010-05-21 22:05:33</wp:post_date>
		<wp:post_date_gmt>2010-05-21 14:05:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b6%e5%ae%9e%e6%88%91%e5%b0%b1%e6%98%af%e4%b8%aa%e6%bc%94%e5%91%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1274450966]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[705]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>84</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Laguna Beach Jeans]]></wp:comment_author>
		<wp:comment_author_email>LagunaBeachJeans@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.pickmyjeans.com/laguna-beach-jeans-c-12</wp:comment_author_url>
		<wp:comment_author_IP>59.58.114.53</wp:comment_author_IP>
		<wp:comment_date>2010-05-23 15:32:16</wp:comment_date>
		<wp:comment_date_gmt>2010-05-23 07:32:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[写得不错，博主辛苦了，支持下]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>85</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] B2b Trade]]></wp:comment_author>
		<wp:comment_author_email>rich5005@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.zoneb2b.com/</wp:comment_author_url>
		<wp:comment_author_IP>110.86.91.153</wp:comment_author_IP>
		<wp:comment_date>2010-05-23 16:11:21</wp:comment_date>
		<wp:comment_date_gmt>2010-05-23 08:11:21</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[This is a good idea! hope to be better!


 -------- __@
 ----- _`\&lt;,_
 ---- (*)/ (*)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>86</wp:comment_id>
		<wp:comment_author><![CDATA[six7]]></wp:comment_author>
		<wp:comment_author_email>lixu67@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>120.195.65.184</wp:comment_author_IP>
		<wp:comment_date>2010-05-24 10:36:08</wp:comment_date>
		<wp:comment_date_gmt>2010-05-24 02:36:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[真能装]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>87</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 导购]]></wp:comment_author>
		<wp:comment_author_email>83634194@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.tb-dg.com</wp:comment_author_url>
		<wp:comment_author_IP>117.87.10.11</wp:comment_author_IP>
		<wp:comment_date>2010-05-24 11:20:50</wp:comment_date>
		<wp:comment_date_gmt>2010-05-24 03:20:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[好文章，支持观点！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>88</wp:comment_id>
		<wp:comment_author><![CDATA[aggron]]></wp:comment_author>
		<wp:comment_author_email>willcwei+86@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://aggron.org</wp:comment_author_url>
		<wp:comment_author_IP>124.232.145.189</wp:comment_author_IP>
		<wp:comment_date>2010-05-24 12:00:42</wp:comment_date>
		<wp:comment_date_gmt>2010-05-24 04:00:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我也算演员，工作C#，windows
业余学习python，ubuntu，目前跑龙套中~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>89</wp:comment_id>
		<wp:comment_author><![CDATA[hahakubile]]></wp:comment_author>
		<wp:comment_author_email>yifeng133@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://yifeng.c.la</wp:comment_author_url>
		<wp:comment_author_IP>222.240.165.132</wp:comment_author_IP>
		<wp:comment_date>2010-05-24 21:21:22</wp:comment_date>
		<wp:comment_date_gmt>2010-05-24 13:21:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[赞同，能成为这样的演员也不错 :)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>90</wp:comment_id>
		<wp:comment_author><![CDATA[GreatGhoul]]></wp:comment_author>
		<wp:comment_author_email>greatghoul@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://greatghoul.javaeye.com</wp:comment_author_url>
		<wp:comment_author_IP>124.114.234.210</wp:comment_author_IP>
		<wp:comment_date>2010-05-25 08:47:16</wp:comment_date>
		<wp:comment_date_gmt>2010-05-25 00:47:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[老江湖呀。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>91</wp:comment_id>
		<wp:comment_author><![CDATA[adamghost]]></wp:comment_author>
		<wp:comment_author_email>adamghost1@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://adamghost.com</wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.237</wp:comment_author_IP>
		<wp:comment_date>2010-05-25 17:17:01</wp:comment_date>
		<wp:comment_date_gmt>2010-05-25 09:17:01</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[演员路过～]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>92</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 淘宝风云榜]]></wp:comment_author>
		<wp:comment_author_email>51taoy@sina.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.51taoy.com/fengyunbang/</wp:comment_author_url>
		<wp:comment_author_IP>211.144.32.26</wp:comment_author_IP>
		<wp:comment_date>2010-05-27 07:54:07</wp:comment_date>
		<wp:comment_date_gmt>2010-05-26 23:54:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[飘过，博主交个朋友;-)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>93</wp:comment_id>
		<wp:comment_author><![CDATA[D。]]></wp:comment_author>
		<wp:comment_author_email>waituy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.liubaikui.com</wp:comment_author_url>
		<wp:comment_author_IP>123.120.31.87</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 09:52:14</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 01:52:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[向着这个演员的目标迈进吧！！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>94</wp:comment_id>
		<wp:comment_author><![CDATA[Zoom.Quiet]]></wp:comment_author>
		<wp:comment_author_email>Zoom.Quiet@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://zoomquiet.org</wp:comment_author_url>
		<wp:comment_author_IP>113.106.106.131</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 09:59:33</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 01:59:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[me 2 ...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>95</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 51淘丫]]></wp:comment_author>
		<wp:comment_author_email>51taoy@sina.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.51taoy.com</wp:comment_author_url>
		<wp:comment_author_IP>124.78.129.197</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 16:35:45</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 08:35:45</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[写得相当好]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>96</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 淘宝网减肥药]]></wp:comment_author>
		<wp:comment_author_email>1496411@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.taobaowangjianfeiyao.cn/</wp:comment_author_url>
		<wp:comment_author_IP>221.201.101.133</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 17:53:20</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 09:53:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[郁闷 怎么上次的留言没显示出来呢？ 请问是怎么回事呀 谢谢]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>97</wp:comment_id>
		<wp:comment_author><![CDATA[FUN]]></wp:comment_author>
		<wp:comment_author_email>fun@funnow.me</wp:comment_author_email>
		<wp:comment_author_url>http://funnow.me</wp:comment_author_url>
		<wp:comment_author_IP>117.88.32.170</wp:comment_author_IP>
		<wp:comment_date>2010-05-28 22:08:42</wp:comment_date>
		<wp:comment_date_gmt>2010-05-28 14:08:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我汗啊
小玉同学和我一款主题啊]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>98</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>125.120.161.47</wp:comment_author_IP>
		<wp:comment_date>2010-05-29 10:56:41</wp:comment_date>
		<wp:comment_date_gmt>2010-05-29 02:56:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[猿粪啊。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>97</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>99</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 备案中心]]></wp:comment_author>
		<wp:comment_author_email>858909931@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.315beian.com</wp:comment_author_url>
		<wp:comment_author_IP>120.32.116.147</wp:comment_author_IP>
		<wp:comment_date>2010-05-30 00:45:56</wp:comment_date>
		<wp:comment_date_gmt>2010-05-29 16:45:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[打酱油路过，嘿嘿~~！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>100</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 十八快播]]></wp:comment_author>
		<wp:comment_author_email>18qvod@qvod.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.18qvod.net</wp:comment_author_url>
		<wp:comment_author_IP>59.56.87.140</wp:comment_author_IP>
		<wp:comment_date>2010-05-30 13:40:08</wp:comment_date>
		<wp:comment_date_gmt>2010-05-30 05:40:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[支持一下，欢迎回访!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>101</wp:comment_id>
		<wp:comment_author><![CDATA[EJEJ]]></wp:comment_author>
		<wp:comment_author_email>pydocument@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>202.106.180.62</wp:comment_author_IP>
		<wp:comment_date>2010-05-31 11:36:27</wp:comment_date>
		<wp:comment_date_gmt>2010-05-31 03:36:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[膜拜楼主淘宝大牛！！！！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Cython 教程 - 调用外部C语言函数</title>
		<link>http://ddbean.wordpress.com/2010/05/30/cython-%e6%95%99%e7%a8%8b-%e8%b0%83%e7%94%a8%e5%a4%96%e9%83%a8c%e8%af%ad%e8%a8%80%e5%87%bd%e6%95%b0/</link>
		<pubDate>Sun, 30 May 2010 11:11:01 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Cython]]></category>

		<category domain="tag" nicename="cython"><![CDATA[Cython]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[一般情况完全可以在 Python 里导入 from math import sin 然后调用 sin() 函数。然而，调用C里面的 sin() 函数速度会更快，尤其在复杂的循环里。在 Cython 里可以这样声明和使用：
<pre>cdef extern from "math.h":
    double sin(double)

cdef double f(double x):
    return sin(x*x)</pre>
请注意，上面的代码声明了 math.h 里的函数，提供给 Cython 使用。C编译器在编译时将会看到 math.h 的声明，但 Cython 不会去分析 math.h 和单独的定义。

当调用一个C函数时，一定要注意引入适当的链接库。这个依赖于特定的平台；下面的例子可以在Linux和Mac OS X下运行：
<pre>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

ext_modules=[
    Extension("demo",
              ["demo.pyx"],
              libraries=["m"]) # Unix-like specific
]

setup(
  name = "Demos",
  cmdclass = {"build_ext": build_ext},
  ext_modules = ext_modules
)</pre>
跟从 math 库里使用 sin() 函数一样，它可以声明和导入任何C库，Cython会生成正确的共享或者静态链接库。

参考：<a href="http://docs.cython.org/src/tutorial/external.html">http://docs.cython.org/src/tutorial/external.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2010-05-30 19:11:01</wp:post_date>
		<wp:post_date_gmt>2010-05-30 11:11:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cython-%e6%95%99%e7%a8%8b-%e8%b0%83%e7%94%a8%e5%a4%96%e9%83%a8c%e8%af%ad%e8%a8%80%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1275218049]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[452]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>102</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] ZNZBLOG]]></wp:comment_author>
		<wp:comment_author_email>vjuke@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.amznz.com</wp:comment_author_url>
		<wp:comment_author_IP>112.3.254.33</wp:comment_author_IP>
		<wp:comment_date>2010-05-30 20:10:38</wp:comment_date>
		<wp:comment_date_gmt>2010-05-30 12:10:38</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[HELLO,网上晃悠看到了您的博客，很不错，踩踩，记得也到我博客看看。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Go 语言模块安装工具：goinstall</title>
		<link>http://ddbean.wordpress.com/2010/05/30/go-%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9d%97%e5%ae%89%e8%a3%85%e5%b7%a5%e5%85%b7%ef%bc%9agoinstall/</link>
		<pubDate>Sun, 30 May 2010 13:27:00 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Go]]></category>

		<category domain="category" nicename="go"><![CDATA[Go]]></category>

		<category domain="tag"><![CDATA[Go]]></category>

		<category domain="tag" nicename="go"><![CDATA[Go]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=279</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://golang.org/doc/logo-153x55.png" alt="" />

文档地址：<a href="http://golang.org/cmd/goinstall/" target="_blank">http://golang.org/cmd/goinstall/</a> Go模块列表：<a href="http://godashboard.appspot.com/package" target="_blank">http://godashboard.appspot.com/package</a>

goinstall 主要是方便安装第三方模块，目前支持 hg(mercurial)，git，svn三种版本控制系统。

下面来举例怎么安装 web.go 模块。源地址是：<a href="http://github.com/hoisie/web.go" target="_blank">http://github.com/hoisie/web.go</a>
<pre>smallfish@debian:~$ goinstall -dashboard=true github.com/hoisie/web.go</pre>
根据网速快慢，过一段时间会结束。期间木有任何提示。（可以加上 -v=true 参数，可以显示安装过程和提示。）

查看下安装的目录和路径：
<pre>smallfish@debian:~$ ls $GOROOT/src/pkg/github.com/hoisie/web.go/
examples  _go_.8   Makefile  Readme.md   scgi.go       status.go  web_test.go
fcgi.go   LICENSE  _obj      request.go  servefile.go  web.go</pre>
代码示例：
<pre>import (web "github.com/hoisie/web.go")</pre>
另外注意点，官方文档里 -update 选项现在版本里已经缩写，改成 -u。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2010-05-30 21:27:00</wp:post_date>
		<wp:post_date_gmt>2010-05-30 13:27:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>go-%e8%af%ad%e8%a8%80%e6%a8%a1%e5%9d%97%e5%ae%89%e8%a3%85%e5%b7%a5%e5%85%b7%ef%bc%9agoinstall</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1275559012]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[530]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>103</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 义乌妇科]]></wp:comment_author>
		<wp:comment_author_email>yiwufuke@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.yiwufuke.com</wp:comment_author_url>
		<wp:comment_author_IP>58.210.13.18</wp:comment_author_IP>
		<wp:comment_date>2010-05-30 22:42:24</wp:comment_date>
		<wp:comment_date_gmt>2010-05-30 14:42:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这篇文章写的很不错，不过好像还有些地方写的不是太好，还得多加修改呀！]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>PostgreSQL COPY 导入/导出数据</title>
		<link>http://ddbean.wordpress.com/2010/06/02/postgresql-copy-%e5%af%bc%e5%85%a5%e5%af%bc%e5%87%ba%e6%95%b0%e6%8d%ae/</link>
		<pubDate>Wed, 02 Jun 2010 12:30:20 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[COPY 命令可以快速的导入数据到 PostgreSQL 中，文件格式类似CVS之类。适合批量导入数据，比 \i 和恢复数据表快。

导出表数据到文件或 STDOUT ：
<pre>COPY tablename [(column [, ...])]
   TO {'filename' | STDOUT}
   [[WITH]
      [BINARY]
      [OIDS]
      [DELIMITER [AS] 'delimiter']
      [NULL [AS] 'null string']
      [CSV [HEADER]
         [QUOTE [AS] 'quote']
         [ESCAPE [AS] 'escape']
         [FORCE NOT NULL column [, ...]]</pre>
导入文件或者 STDIN 到表中：
<pre>COPY tablename [(column [, ...])]
   FROM {'filename' | STDIN}
   [[WITH]
      [BINARY]
      [OIDS]
      [DELIMITER [AS] 'delimiter']
      [NULL [AS] 'null string']
      [CSV [HEADER]
         [QUOTE [AS] 'quote']
         [ESCAPE [AS] 'escape']
         [FORCE QUOTE column [, ...]]</pre>
导出表 employee 到默认输出 STDOUT：
<pre>psql&gt; COPY employee TO STDOUT;
1       JG100011        Jason Gilmore         jason@example.com
2       RT435234        Robert Treat          rob@example.com
3       GS998909        Greg Sabino Mullane   greg@example.com
4       MW777983        Matt Wade             matt@example.com</pre>
导出表 employee 到 sql 文件：
<pre>psql&gt; COPY employee TO '/home/smallfish/employee.sql';</pre>
从文件导入数据：
<pre>psql&gt; COPY employeenew FROM '/home/smallfish/employee.sql';
psql&gt; SELECT * FROM employeenew;
employeeid  | employeecode |     name            |       email
------------+--------------+---------------------+---------------
          1 | JG100011     | Jason Gilmore       | jason@example.com
          2 | RT435234     | Robert Treat        | rob@example.com
          3 | GS998909     | Greg Sabino Mullane | greg@example.com
          4 | MW777983     | Matt Wade           | matt@example.com
(4 rows)</pre>
输出对象ID（OIDS）：
<pre>psql&gt; COPY employee TO STDOUT OIDS;
24627  1       GM100011        Jason Gilmore         jason@example.com
24628  2       RT435234        Robert Treat          rob@example.com
24629  3       GS998909        Greg Sabino Mullane   greg@example.com
24630  4       MW777983        Matt Wade             matt@example.com</pre>
指定导出间隔符，默认是 \t ，这里为 | ：
<pre>psql&gt;COPY employee TO STDOUT DELIMITER '|';
1|GM100011|Jason Gilmore|jason@example.com
2|RT435234|Robert Treat|rob@example.com
3|GS998909|Greg Sabino Mullane|greg@example.com
4|MW777983|Matt Wade|matt@example.com</pre>
导入文件数据，指定间隔符为 | ：
<pre>psql&gt; COPY employeenew FROM '/home/smallfish/employee.sql' DELIMITER |;</pre>
导出指定字段的数据：
<pre>psql&gt; COPY employee (name,email) TO STDOUT;
Jason Gilmore         jason@example.com
Robert Treat          rob@example.com
Greg Sabino Mullane   greg@example.com
Matt Wade             matt@example.com</pre>
为 NULL 字段设置默认值：
<pre>psql&gt; COPY employee TO STDOUT NULL 'no email';
Jason Gilmore         no email
Robert Treat          rob@example.com
Greg Sabino Mullane   greg@example.com
Matt Wade             no email</pre>
导出为CVS格式：
<pre>psql&gt; COPY employee (name, email) TO '/home/smallfish/employee.csv' CSV HEADER;</pre>
参考资料：<a href="http://apress.com/book/view/9781590595473" target="_blank">Apress Beginning PHP and PostgreSQL 8: From Novice to Professional </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2010-06-02 20:30:20</wp:post_date>
		<wp:post_date_gmt>2010-06-02 12:30:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-copy-%e5%af%bc%e5%85%a5%e5%af%bc%e5%87%ba%e6%95%b0%e6%8d%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1275481889]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[705]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>104</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 网赚资源]]></wp:comment_author>
		<wp:comment_author_email>alidado@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.lead123.cn</wp:comment_author_url>
		<wp:comment_author_IP>111.0.224.48</wp:comment_author_IP>
		<wp:comment_date>2010-06-05 23:05:16</wp:comment_date>
		<wp:comment_date_gmt>2010-06-05 15:05:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[博客不错
围观一下，欢迎回访~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>105</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 有的]]></wp:comment_author>
		<wp:comment_author_email>youde@sina.cn</wp:comment_author_email>
		<wp:comment_author_url>http://www.youde88.com</wp:comment_author_url>
		<wp:comment_author_IP>222.64.78.204</wp:comment_author_IP>
		<wp:comment_date>2010-06-06 06:32:36</wp:comment_date>
		<wp:comment_date_gmt>2010-06-05 22:32:36</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这个是什么现象]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>106</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 400电话]]></wp:comment_author>
		<wp:comment_author_email>admin@400999.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.400999.com</wp:comment_author_url>
		<wp:comment_author_IP>60.213.101.180</wp:comment_author_IP>
		<wp:comment_date>2010-06-07 09:09:16</wp:comment_date>
		<wp:comment_date_gmt>2010-06-07 01:09:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[你的博客写的不错，向你学习~~~，介意我转到我的博客上吗？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>107</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 短信大全]]></wp:comment_author>
		<wp:comment_author_email>www@jxnhw.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.jxnhw.com</wp:comment_author_url>
		<wp:comment_author_IP>58.45.74.236</wp:comment_author_IP>
		<wp:comment_date>2010-06-08 14:12:33</wp:comment_date>
		<wp:comment_date_gmt>2010-06-08 06:12:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[有机会多交流]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>108</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] Leela Godin]]></wp:comment_author>
		<wp:comment_author_email>leelagodin@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.internetbankloan.info</wp:comment_author_url>
		<wp:comment_author_IP>89.103.132.159</wp:comment_author_IP>
		<wp:comment_date>2010-06-18 02:45:24</wp:comment_date>
		<wp:comment_date_gmt>2010-06-17 18:45:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<i>你的博客写的不错，向你学习~~~，介意我转到我的博客上吗？</i>
+1]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>109</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 赣州SEO]]></wp:comment_author>
		<wp:comment_author_email>258147569@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.335156.com/</wp:comment_author_url>
		<wp:comment_author_IP>115.150.77.99</wp:comment_author_IP>
		<wp:comment_date>2010-06-27 15:31:55</wp:comment_date>
		<wp:comment_date_gmt>2010-06-27 07:31:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[博客文采写的不错！我还喜欢你其他文章]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>110</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 激光打标机]]></wp:comment_author>
		<wp:comment_author_email>27389387@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.jnfrd.com/</wp:comment_author_url>
		<wp:comment_author_IP>123.233.255.210</wp:comment_author_IP>
		<wp:comment_date>2010-06-28 09:20:52</wp:comment_date>
		<wp:comment_date_gmt>2010-06-28 01:20:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[呵呵，新的一周开始了，祝博主，新的一周里，开心快乐~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>111</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 博百优]]></wp:comment_author>
		<wp:comment_author_email>bobaiyou@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.mggyp.cn/</wp:comment_author_url>
		<wp:comment_author_IP>117.22.136.101</wp:comment_author_IP>
		<wp:comment_date>2010-06-28 11:04:57</wp:comment_date>
		<wp:comment_date_gmt>2010-06-28 03:04:57</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[博主的文章不错 感谢回访
我会持续关注中]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>112</wp:comment_id>
		<wp:comment_author><![CDATA[[Blocked by CFC] 淘宝网包包]]></wp:comment_author>
		<wp:comment_author_email>1496411@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.tb89.com/</wp:comment_author_url>
		<wp:comment_author_IP>222.140.162.27</wp:comment_author_IP>
		<wp:comment_date>2010-06-28 15:05:19</wp:comment_date>
		<wp:comment_date_gmt>2010-06-28 07:05:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[有意转载博主这篇文章，请问是否允许，盼回复 谢谢]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Pylons 入门实例教程 - Hello</title>
		<link>http://ddbean.wordpress.com/2010/06/28/pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b%e4%b8%80/</link>
		<pubDate>Mon, 28 Jun 2010 12:41:20 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pylons]]></category>

		<category domain="tag" nicename="pylons"><![CDATA[Pylons]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://pylonshq.com/" target="_blank">Pylons</a> 是 Python 的一个轻量级 MVC Web 开发框架，跟另外一个框架 <a href="http://turbogears.org/" target="_blank">TurboGears</a> 比较相似，都是集合了一些优秀的组件而成。比如对 Request URL 采用了 Route，Template 采用了 <a href="http://www.makotemplates.org/" target="_blank">Mako</a>，数据库层则采用了ORM <a href="http://sqlalchemy.org/" target="_blank">SQLAlchemy</a>，当然，这些组件只是默认，你还可以根据自己喜好来选择其他组件，比如你可以采用 Jinja2 或 Genshi 模板，ORM也可以采用 SQLObject。完全是自由组合。

废话少说，现在开始安装吧。
<pre>smallfish@debian:~$ sudo aptitude install python-pylons</pre>
Debian/Ubuntu 系列系统可以直接 aptitude 安装，当然你也可以使用 easy_install 或者源码安装。
<pre>smallfish@debian:~$ sudo easy_install Pylons</pre>
更多安装文档请参考官网安装部分，<a href="http://pylonshq.com/docs/en/1.0/gettingstarted/#installing">http://pylonshq.com/docs/en/1.0/gettingstarted/#installing</a>

好了，安装结束，来一个经典的Hello程序吧。
<pre>smallfish@debian:~/workspace/python$ paster create -t pylons hello
Selected and implied templates:
  Pylons#pylons  Pylons application template

Variables:
  egg:      hello
  package:  hello
  project:  hello
Enter template_engine (mako/genshi/jinja2/etc: Template language) ['mako']:
Enter sqlalchemy (True/False: Include SQLAlchemy 0.5 configuration) [False]:
Creating template pylons
Creating directory ./hello</pre>
下面输出略过，大致解说一下。Pylons 程序可以用 Paste 自动生成一些代码，包括controller。还可以运行 HTTP 服务来测试。

-t  表示自动创建的模板，可以如下来查看有哪些选项，更多就参考 help 吧。
<pre>smallfish@debian:~/workspace/python/hello$ paster create --list-templates
Available templates:
  basic_package:   A basic setuptools-enabled package
  paste_deploy:    A web application deployed through paste.deploy
  pylons:          Pylons application template
  pylons_minimal:  Pylons minimal application template</pre>
看一下hello的目录结构：
<pre>smallfish@debian:~/workspace/python/hello$ ls
development.ini  ez_setup.py  hello.egg-info  README.txt  setup.py
docs             hello        MANIFEST.in     setup.cfg   test.ini</pre>
这里具体各个文件意思就不讲解了，程序主体部分都在hello/hello目录下，development.ini 和 test.ini 分别是服务启动的配置文件，用于测试和开发环境。开始先运行一下，看效果吧。。
<pre>smallfish@debian:~/workspace/python/hello$ paster serve --reload development.ini
Starting subprocess with file monitor
Starting server in PID 1519.
serving on http://127.0.0.1:5000</pre>
在浏览器中打开：http://127.0.0.1:5000 看到页面了吧？恭喜。

继续，写一个简单的显示 hi的 controller 程序吧。
<pre>smallfish@debian:~/workspace/python/hello$ paster controller hi
Creating /home/smallfish/workspace/python/hello/hello/controllers/hi.py
Creating /home/smallfish/workspace/python/hello/hello/tests/functional/test_hi.py</pre>
自动生成程序和 test 文件。paster 启动服务不需要重启会自动加载，可以浏览器访问：http://127.0.0.1:5000/hi/index

很简单吧，打开 hi.py，基本如下：
<pre>class HiController(BaseController):

    def index(self):
        # Return a rendered template
        #return render('/hi.mako')
        # or, return a response
        return 'Hello World'</pre>
上面注释部分可以 return 一个模板文件，模板放入 templates 目录下即可。

去除上面的 return 'Hello' 返回 return render('/hi.mako')
<pre>smallfish@debian:~/workspace/python/hello$ vi hello/templates/hi.mako
% for key, value in request.environ.items():
 ${key} = ${value}
% endfor</pre>
刷新 http://127.0.0.1:5000/hi/index ，可以看到一些环境变量的输出了吧。

今天就简单的说到这里吧，下回来一个完整的例子，包括URL、模板、数据库和Session的实例。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2010-06-28 20:41:20</wp:post_date>
		<wp:post_date_gmt>2010-06-28 12:41:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b%e4%b8%80</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1277897663]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[976]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>118</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish's log » Pylons 入门实例教程一 关注 Python, Perl, Go, PostgreSQL, MySQL, MongoDB, Linux... -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/chenxiaoyu.org/blog/archives/294?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-06-28 21:14:27</wp:comment_date>
		<wp:comment_date_gmt>2010-06-28 13:14:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by mikespook and Shane, smallfish. smallfish said: Pylons 入门实例教程一 http://chenxiaoyu.org/blog/archives/294 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>119</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish&#039;s log &raquo; Pylons 入门实例教程 – 表单和文件上传 关注 Python, Perl, Go, PostgreSQL, MySQL, MongoDB, Linux...]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://chenxiaoyu.org/blog/archives/306</wp:comment_author_url>
		<wp:comment_author_IP>67.228.120.137</wp:comment_author_IP>
		<wp:comment_date>2010-06-30 20:26:14</wp:comment_date>
		<wp:comment_date_gmt>2010-06-30 12:26:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] 继续上一篇《Pylons 入门实例教程 &#8211; Hello》，现在开始讲在 Pylons 里如何提交表单和上传文件。 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>如何写 Go 代码？</title>
		<link>http://ddbean.wordpress.com/2010/06/29/%e5%a6%82%e4%bd%95%e5%86%99-go-%e4%bb%a3%e7%a0%81%ef%bc%9f/</link>
		<pubDate>Tue, 29 Jun 2010 13:03:54 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Go]]></category>

		<category domain="category" nicename="go"><![CDATA[Go]]></category>

		<category domain="tag"><![CDATA[Go]]></category>

		<category domain="tag" nicename="go"><![CDATA[Go]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[原文：<a href="http://golang.org/doc/code.html" target="_blank">http://golang.org/doc/code.html</a>

<strong>简述</strong>

<strong></strong>这篇文档描述了如何去写一个新的 package 和怎么去测试。本文假设你已经按照<a href="http://golang.org/doc/install.html" target="_blank">安装文档</a>装好Go。

在修改一个存在的 package 或者新建立一个package，确保先发一封邮件到 <a href="http://groups.google.com/group/golang-nuts" target="_blank">mailing list</a>，告诉大家你想做什么。这样有助于不要重复造轮子，在写代码之前最好讨论下。

<strong>社区资源</strong>

<strong></strong>如果想获取实时帮助，可以加入 <a href="http://freenode.net/" target="_blank">Freenode</a> 上 IRC 频道 #go-nuts。

Go 语言官方邮件列表是 <a href="http://groups.google.com/group/golang-nuts" target="_blank">Go nuts</a>.

Bugs 可以参考<a href="http://code.google.com/p/go/issues/list" target="_blank"> Go issue</a>.

对于那些想尝试开发代码的用户，这里有另外一个邮件列表 <a href="http://groups.google.com/group/golang-checkins" target="_blank">golang-checkins</a>，邮件里包含了那些刚提交到 Go 代码库的消息。

<strong>建立Go包</strong>

<strong></strong>下面的源码假设 package 的导入路径是 x/y，约定下保存的路径是：$GOROOT/src/pkg/x/y

<strong>Makefile</strong>

这将是很好的利用 Go-specific 工具里安排源码结构，如何按照顺序和构建代码。Go 使用 GUN make。所以首先在一个新的package 文件夹里建立一个 Makefile。最简单的做法就是从 <a href="http://golang.org/src/pkg/container/vector/Makefile" target="_blank">src/pkg/container/vector/Makefile</a> 源码包里拷贝一份。
<pre>include ../../../Make.$(GOARCH)

TARG=container/vector
GOFILES=\
	intvector.go\
	stringvector.go\
	vector.go\

include ../../../Make.pkg</pre>
当然在上面的源码包之外写一个新的 package ，通常的 Makefile 如下：
<pre>include $(GOROOT)/src/Make.$(GOARCH)

TARG=mypackage
GOFILES=\
	my1.go\
	my2.go\

include $(GOROOT)/src/Make.pkg</pre>
第一行 include 标准的定义和规则，package 的路径一般相对路径来代替 $(GOROOT)/src ，这样做到目的就是防止 make 时候 $(GOROOT) 含有空格，这样做很方便开发中使用Go。

TRAG 是包安装路径，这行就是其他程序导入到名字。在 Go 源码中，这个名字必须和文件夹中的 Makefile 中的一致，不需要 $GOROOT/src/pkg/ 前缀。在源码之外，你可以任意起名而不要和标准 package 的重名即可。常见的做法是独立一个 package 名：myname/tree, myname/filter，确保你的代码在 myname 里，运行 make install，将会编译后把二进制文件放入 $GOROOT/pkg，可以很方便的找到。

GOFILES 放入文件内需要编译的源码列表。多行用 \ 字符隔开。

如果想在 Go 源码树中新建包，需要添加列表到 $GOROOT/src/pkg/Makefile 中作为标准库编译，编译运行：
<pre>cd $GOROOT/src/pkg
./deps.b</pre>
更新依赖文件 Make.deps （这是每次 make all 或者 make build 都需要）

<strong>Go 源文件</strong>

<strong></strong>在每个源码里第一行的名字应该是 Makefile 里面定义的 package 名，这里的 name 是作为默认的名字导入。（包里的每个 package 名都应该是同样的名字）Go的惯例是用路径的最后一个元素作为名字，比如 "crypto/rot13" 应该是 rot13。到目前为止，Go 是依靠 package 名字来确定一个二进制的文件，当然可能会很快的取消。

Go 是在一个包内编译源码文件，在一个文件定义常量，变量，类型或者函数，在其他文件内适用不需要再定义和声明。

想写一个干净而优美的 Go 代码不在本文范围。请参考<a href="http://golang.org/doc/effective_go.html" target="_blank">深入 Go 文档</a>吧。

<strong>测试</strong>

<strong></strong>Go 有一个轻量级的测试代码框架：gotest。编写一个测试代码，只需要新建一个跟你源码名字一样，加上：_test.go 即可，测试函数一般是 func TestXXX (t *testing.T)。每次运行测试其中的函数。如果想返回错误的话一般是返回： t.Error 或 t.Fail，测试时候就会抛错。详细 gotest 测试方法请参考：<a href="http://golang.org/cmd/gotest/" target="_blank">http://golang.org/pkg/testing/</a>

*_test.go 不需要在 Makefile 中声明。

运行测试，编译时候 make test 即可，和 gotest 效果一样。如果想单独测试某一个源码，比如：one_test.go，则运行：gotest one_test.go。

如果你的修改影响性能，可以添加一个性能测试函数（参考：<a href="http://golang.org/cmd/gotest/" target="_blank">http://golang.org/pkg/testing/</a>），然后运行：gotest -benchmarks=.

当你新的代码已经通过测试，也能运行，你就可以 review 和 commit.  <a href="http://golang.org/doc/contribute.html" target="_blank">http://golang.org/doc/contribute.html</a>。

<strong>一个测试的例子</strong>

这是一个名字叫 numbers 测试 package ，定义了一个叫 Double 的函数，返回一个整型，结果是输入的参数乘以2。一共有三个文件。

第一个是 numbers.go
<pre>package numbers

func Double(i int) int {
	return i * 2
}</pre>
第二个是测试文件 numbers_test.go
<pre>package numbers

import (
	"testing"
)

type doubleTest struct {
	in, out int
}

var doubleTests = []doubleTest{
	doubleTest{1, 2},
	doubleTest{2, 4},
	doubleTest{-5, -10},
}

func TestDouble(t *testing.T) {
	for _, dt := range doubleTests {
		v := Double(dt.in)
		if v != dt.out {
			t.Errorf("Double(%d) = %d, want %d.", dt.in, v, dt.out)
		}
	}
}</pre>
最后是 Makefile 文件
<pre>include $(GOROOT)/src/Make.$(GOARCH)

TARG=numbers
GOFILES=\
	numbers.go\

include $(GOROOT)/src/Make.</pre>
运行 make install 将会构建和安装包到 GOROOT/pkg/ 文件夹内（他在系统的任何地方导入调用）。

运行 make test （或者 gotest）将会重新构建包，并会运行 numbers_test.go 中的 TestDouble 函数。如果输出 "PASS" 则表示测试成功通过。如果不是2到3的倍数，将会看到错误报告。

更详细的请查看<a href="http://golang.org/cmd/gotest/" target="_blank"> gotest 文档</a>和<a href="http://golang.org/pkg/testing/" target="_blank">测试package</a>文档。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2010-06-29 21:03:54</wp:post_date>
		<wp:post_date_gmt>2010-06-29 13:03:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a6%82%e4%bd%95%e5%86%99-go-%e4%bb%a3%e7%a0%81%ef%bc%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1279185452]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[990]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>121</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish's log » 如何写 Go 代码？ 关注 Python, Perl, Go, PostgreSQL, MySQL, MongoDB, Linux... -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/chenxiaoyu.org/blog/archives/297?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-06-29 21:22:35</wp:comment_date>
		<wp:comment_date_gmt>2010-06-29 13:22:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Tux Yeates and Henry Huang, smallfish. smallfish said: 《如何写 Go 代码？》 http://chenxiaoyu.org/blog/archives/297 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>122</wp:comment_id>
		<wp:comment_author><![CDATA[MadGo]]></wp:comment_author>
		<wp:comment_author_email>maddogfyg@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>122.86.91.39</wp:comment_author_IP>
		<wp:comment_date>2010-06-29 23:16:18</wp:comment_date>
		<wp:comment_date_gmt>2010-06-29 15:16:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[很好，Go现在的中文文档确实太匮乏了]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>123</wp:comment_id>
		<wp:comment_author><![CDATA[Chingli]]></wp:comment_author>
		<wp:comment_author_email>chingli@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://gocoding.org</wp:comment_author_url>
		<wp:comment_author_IP>61.186.152.106</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 10:31:15</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 02:31:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[你好，刚弄了一个Go语言社区：gocoding.org，你能不能把这篇文章发到社区Wiki上？]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>124</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.237</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 10:35:40</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 02:35:40</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[额。。你可以转载嘛：）]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>123</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>125</wp:comment_id>
		<wp:comment_author><![CDATA[Chingli]]></wp:comment_author>
		<wp:comment_author_email>chingli@126.com</wp:comment_author_email>
		<wp:comment_author_url>http://gocoding.org</wp:comment_author_url>
		<wp:comment_author_IP>61.186.152.106</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 11:59:35</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 03:59:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[因为是wiki，将来会有改动的，没有授权是不能原封不动地放上去的。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>126</wp:comment_id>
		<wp:comment_author><![CDATA[hoorace]]></wp:comment_author>
		<wp:comment_author_email>longtask@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.longtask.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.239</wp:comment_author_IP>
		<wp:comment_date>2010-07-15 12:42:46</wp:comment_date>
		<wp:comment_date_gmt>2010-07-15 04:42:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼哥不是葱白go么？继续多谢几篇。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>127</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>121.0.29.237</wp:comment_author_IP>
		<wp:comment_date>2010-07-15 17:17:27</wp:comment_date>
		<wp:comment_date_gmt>2010-07-15 09:17:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[会的。。。嘿嘿。稍后继续。:)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>126</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Pylons 入门实例教程 – 表单和文件上传</title>
		<link>http://ddbean.wordpress.com/2010/06/30/pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e8%a1%a8%e5%8d%95%e5%92%8c%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0/</link>
		<pubDate>Wed, 30 Jun 2010 12:19:56 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pylons]]></category>

		<category domain="tag" nicename="pylons"><![CDATA[Pylons]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=306</guid>
		<description></description>
		<content:encoded><![CDATA[继续上一篇《<a href="http://chenxiaoyu.org/blog/archives/294" target="_blank">Pylons 入门实例教程 - Hello</a>》，现在开始讲在 Pylons 里如何提交表单和上传文件。

继续延用上篇里面的 hello 工程，在 HiController 里添加 form 方法：
<pre>    def form(self):
        return render('/form.mako')</pre>
加完以后可以访问：http://127.0.0.1:5000/hi/form，会报错。

Server Error，根据报错内容大致就知道模板文件不存在了。如果有其他错误，也可以通过这个页面查看，当然还有很强大的 Debug 个功能哦。当然正式环境一般都是关闭这个功能的。这个，你懂得。。。

好吧，写一个表单的模板，只包含一个简单的文本框和提交按钮示例。
<pre>&lt;form action="/hi/submit" method="post"&gt;
name: &lt;input type="text" name="name" /&gt;
&lt;br /&gt;
&lt;input type="submit" value="submit" /&gt;
&lt;/form&gt;</pre>
再添加一个 submit 方法来处理表单提交，
<pre>    def submit(self):
        return "hello, name: %s" % request.params['name']</pre>
request.params 包含了表单或者URL提交的参数，建议 POST 数据参照下面的上传部分。想获取更详细的列表，可以查看文档或者自己手动 dir()查阅。

下面尝试一下文件上传，首先在 development.ini 添加一个变量，用来存放文件上传后的文件夹。
<pre>[app:main]
upload_dir = %(here)s/upload</pre>
%(here) 启动后 server 会替换到当前目录地址，上面的地址就是当前路径下的upload文件夹。

修改一下刚才的表单，加一个 file 上传，注意 multipart/form-data 这句，上传必须。
<pre>&lt;form action="/hi/submit" method="post"  enctype= "multipart/form-data"&gt;
name: &lt;input type="text" name="name" /&gt;
&lt;br /&gt;
file: &lt;input type="file" name="file" /&gt;
&lt;br /&gt;
&lt;input type="submit" value="submit" /&gt;
&lt;/form&gt;</pre>
修改 submit 方法，添加文件内容：
<pre>    def submit(self):
        name   = request.POST['name']
        myfile = request.POST['file']
        import os
        import shutil
        from pylons import config
        local_name = os.path.join(config['app_conf']['upload_dir'], myfile.filename)
        local_file = open(local_name, "wb")
        shutil.copyfileobj(myfile.file, local_file)
        myfile.file.close()
        local_file.close()
        return "hello, name: %s, upload: %s" % (name, myfile.filename)</pre>
里面 import 部分这里仅仅为了示例，正式的代码请放入程序开头部分，POST 内容可以从 request.POST 获取。

config['app_conf']['upload_dir'] 就是刚才配置里 development.ini 定义的地址。这个目录需要自己手动创建哦。
<pre>smallfish@debian:~/workspace/python/hello$ mkdir upload</pre>
OK，到这里程序部分都已经修改完成。重新访问一下：http://127.0.0.1:5000/hi/form

尝试一下上传，上传后可以在 upload 文件夹下看到文件了吧。。

当然这里只是示例，还需要处理一下上传的名字，防止有特殊符号哦。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2010-06-30 20:19:56</wp:post_date>
		<wp:post_date_gmt>2010-06-30 12:19:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e8%a1%a8%e5%8d%95%e5%92%8c%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1277900773]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[785]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>128</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish's log » Pylons 入门实例教程 – 表单和文件上传 关注 Python, Perl, Go, PostgreSQL, MySQL, MongoDB, Linux... -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/chenxiaoyu.org/blog/archives/306?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-06-30 20:57:12</wp:comment_date>
		<wp:comment_date_gmt>2010-06-30 12:57:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by TIMpro, smallfish. smallfish said: Pylons 入门实例教程 – 表单和文件上传 http://chenxiaoyu.org/blog/archives/306 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Pylons 入门实例教程 – 数据库操作</title>
		<link>http://ddbean.wordpress.com/2010/07/01/pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%93%8d%e4%bd%9c/</link>
		<pubDate>Thu, 01 Jul 2010 12:43:01 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pylons]]></category>

		<category domain="tag" nicename="pylons"><![CDATA[Pylons]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[前面两篇入门，讲述了 Pylons 大致开发的流程、表单以及文件上传，思路大致跟传统的开发类似。本篇简单讲述下在 Pylons 如何使用数据库。

本篇侧重点是使用 ORM 框架 <a href="http://www.sqlalchemy.org/" target="_blank">SQLAlchemy</a>。现在 Python 社区里关注度比较高的大概有三：<a href="http://www.sqlalchemy.org/" target="_blank">SQLAlchemy</a>、<a href="http://www.sqlobject.org/" target="_blank">SQLObject</a> 和 <a href="https://storm.canonical.com/" target="_blank">Storm</a>。其实本人最早是研究了一下 Storm，后来听虾哥（@marchliu）在应用里不是很爽之，遂关注了下他推荐的 SQLAlchemy。当然，你也可以对应数据库的 DB-API 库来进行操作。

示例代码的数据库是 <a href="http://www.postgresql.org" target="_blank">PostgreSQL</a>，对应的 Python 库使用的是 <a href="http://initd.org/projects/" target="_blank">psycopg2</a>。至于 Pg 配置和使用这里不再累赘，请狗之。

Debian/Ubuntu 安装很简单：
<pre>sudo aptitude install python-psycopg2</pre>
建立一个测试数据库，比如 test：
<pre>smallfish@debian:~/workspace/python/hello$ su postgres
postgres@debian:/home/smallfish/workspace/python/hello$ createdb -O smallfish test
postgres@debian:/home/smallfish/workspace/python/hello$ exit
smallfish@debian:~/workspace/python/hello$ psql -h 127.0.0.1 -p 5432 -U smallfish test
用户 smallfish 的口令：
psql (8.4.4)
SSL连接 (加密：DHE-RSA-AES256-SHA，位元：256)

输入 "help" 来获取帮助信息.

test=#</pre>
数据库的部分已经OK，下面就是来倒腾 Pylons 啦。

建立新项目，加入支持数据库部分，注意 Enter sqlalchemy那个选项，默认是 False，改成 True：
<pre>smallfish@debian:~/workspace/python$ paster create -t pylons hellodb
Selected and implied templates:
  Pylons#pylons  Pylons application template

Variables:
  egg:      hellodb
  package:  hellodb
  project:  hellodb
Enter template_engine (mako/genshi/jinja2/etc: Template language) ['mako']:
Enter sqlalchemy (True/False: Include SQLAlchemy 0.5 configuration) [False]: True
Creating template pylons
Creating directory ./hellodb</pre>
改成 True 之后在自动生成的 development.ini 里就有对应的数据库配置选项了。

再建立新的 db controller：
<pre>smallfish@debian:~/workspace/python$ cd hellodb/
smallfish@debian:~/workspace/python/hellodb$ paster controller db
Creating /home/smallfish/workspace/python/hellodb/hellodb/controllers/db.py
Creating /home/smallfish/workspace/python/hellodb/hellodb/tests/functional/test_db.py</pre>
编辑 development.ini，添加数据库配置部分。smallfish:123456 是对应的 PostgreSQL 用户名/密码，127.0.0.1:5432 是对应的主机地址/端口号，最后的test则是数据库名。
<pre># SQLAlchemy database URL
sqlalchemy.url = postgresql://smallfish:123456@127.0.0.1:5432/test</pre>
编辑 hellodb/model/__init__.py，加上一个叫 msg 的表和字段的定义：
<pre>"""The application's model objects"""
from hellodb.model.meta import Session, metadata

from sqlalchemy import orm, schema, types
from datetime import datetime

def init_model(engine):
    """Call me before using any of the tables or classes in the model"""
    Session.configure(bind=engine)

def now():
    return datetime.now()

msg_table = schema.Table('msg', metadata,
    schema.Column('id', types.Integer, schema.Sequence('msg_seq_id', optional=True), primary_key=True),
    schema.Column('content', types.Text(), nullable=False),
    schema.Column('addtime', types.DateTime(), default=now),
)

class Msg(object):
    pass

orm.mapper(Msg, msg_table)</pre>
示例 Msg 表很简单，三个字段：ID、内容和时间。

上面的代码除去导入 sqlclchemy 包里几个库，基本上有一个对应表的字段定义，还有一个空的 Msg 对象。

最后一行，则是做一个 map 的动作，把 Msg 映射到 msg_table 上。

下面是不是要在数据库里建立对应的表呢？有个简单的办法 可以初始化数据库：paster setup-app development.ini：
<pre>smallfish@debian:~/workspace/python/hellodb$ paster setup-app development.ini
Running setup_config() from hellodb.websetup
20:08:43,619 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] select version()
20:08:43,619 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] {}
20:08:43,625 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] select current_schema()
20:08:43,625 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] {}
20:08:43,631 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=current_schema() and lower(relname)=%(name)s
20:08:43,631 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] {'name': u'msg'}
20:08:43,637 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread]
CREATE TABLE msg (
        id SERIAL NOT NULL,
        content TEXT NOT NULL,
        addtime TIMESTAMP WITHOUT TIME ZONE,
        PRIMARY KEY (id)
)

20:08:43,637 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] {}
20:08:43,732 INFO  [sqlalchemy.engine.base.Engine.0x...854c] [MainThread] COMMIT</pre>
可以看到上面的输出日志，包括了建表的SQL语句。其中 SERIAL 对应上面 __init__.py 里 Column 的 Seq 定义。serial 类型 在 PostgreSQL 可以看成类似 MySQL 的自增ID（auto_increment） 。

现在进入 PostgreSQL 查询数据库，就可以看到表以及序列已经建立。
<pre>test=# \d
                  关联列表
 架构模式 |    名称    |  型别  |  拥有者
----------+------------+--------+-----------
 public   | msg        | 资料表 | smallfish
 public   | msg_id_seq | 序列数 | smallfish
(2 行记录)</pre>
到这里，准备工作已经完毕，包括了初始化数据库，配置文件还有示例 controller。

下面就在 controller 代码里增加读写数据库的功能吧。

首先建立一个表单模板 db.htm ，用来添加并保存到数据库表中：
<pre>&lt;form action="/db/add" method="post"&gt;
    &lt;input type="text" name="content" /&gt;
    &lt;br /&gt;
    &lt;input type="submit" value="save" /&gt;
&lt;/form&gt;</pre>
对应 controller index 修改成，很简单。返回到模板：
<pre>class DbController(BaseController):

    def index(self):
        return render('/db.htm')</pre>
添加 add 方法，对应上面 form 中的 /db/add 路径：
<pre>    def add(self):
        content = request.POST['content']
        from hellodb import model
        msg = model.Msg()
        msg.content = content
        model.meta.Session.add(msg)
        model.meta.Session.commit()
        return "add %s ok..." % content</pre>
添加部分简单完成。获取 POST 文本框，然后初始化一个 Msg 对象（上面 model 里定义的）。

注意 add 之后，必须手动 commit，这样才会真正保存到数据库。

浏览器访问一下：http://127.0.0.1:5000/db/index，随意添加一点数据吧，这个时候你可以在 PostgreSQL 里查询已经数据已经加进来了。

下面在 index 方法传递一些值到模板，输出刚才已经添加的数据：
<pre>    def index(self):
        from hellodb import model
        c.msgs = model.meta.Session.query(model.Msg).all()
        return render('/db.htm')</pre>
c.msgs 可以理解成全局变量，关于 c 的定义在 controller前几行就应该看到了。修改模板 db.htm 显示记录：
<pre>% for msg in c.msgs:
&lt;p&gt;${msg.id}: ${msg.content} / ${msg.addtime}&lt;/p&gt;
% endfor</pre>
很简单，只是一个普通 for 循环，遍历 index 方式里传递的 c.msgs。Mako模板还是很易读的吧？

继续刷新下：http://127.0.0.1:5000/db/index，可以在页面上看到已经添加的数据了。

在狂输入了几十条之后，在一页里显示是不是忒土鳖了？

下面再介绍下 Pylons 里 webhelper 里一个分页组件的用法，当然你也可以自己写分页算法。下面是示例：
<pre>    def list(self):
        from webhelpers import paginate
        from hellodb import model
        msgs = model.meta.Session.query(model.Msg)
        c.paginator = paginate.Page(
            msgs,
            page=int(request.params.get('page', 1)),
            items_per_page = 10,
        )
        return render("/list.htm")</pre>
导入 paginate，然后把查询的数据库对象当参数传递给 paginate.Page，里面的page则是页面的传递的页数参数，items_per_page 就好理解多了，就是多少条一页。这里是10条。

对应的模板 list.htm 如下：
<pre>&lt;pre&gt;
% if len(c.paginator):

% for msg in c.paginator:
&lt;p&gt;${msg.id}: ${msg.content}&lt;/p&gt;
% endfor

&lt;p&gt; ${c.paginator.pager("count: $item_count $first_item to $last_item , $link_first $link_previous $link_next $link_last")} &lt;/p&gt;
% endif</pre>
for 部分如同上面示例，下面加了一行pager。里面一些变量从名字上就可以看出功能了。包括了总条数、当前是第几到第几条，然后就是常用的首页、上页、下页和最后一页。

这里链接的文字都是&lt;&lt;， &lt;， &gt;， &gt;&gt;。想改成文字请查看文档吧。。如果是第一页，是不会显示首页和上一页的。这个做过分页的一般都写过类似的代码吧。

现在访问：http://127.0.0.1:5000/db/list，想看到效果当然你得多填点数据哦。10条才会显示分页的挖。

好了，这里对数据库增加和显示部分都已经有示例代码了，当然最后还有一个分页用法。至于删除和更新之类请参考 SQLAlchemy 文档吧。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2010-07-01 20:43:01</wp:post_date>
		<wp:post_date_gmt>2010-07-01 12:43:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%93%8d%e4%bd%9c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[510]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1278091161]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Pylons 入门实例教程 – cookie 和 session</title>
		<link>http://ddbean.wordpress.com/2010/07/03/pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-cookie-%e5%92%8c-session/</link>
		<pubDate>Sat, 03 Jul 2010 12:38:58 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pylons]]></category>

		<category domain="tag" nicename="pylons"><![CDATA[Pylons]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[本篇讲述在 Pylons 里使用 cookie 和 session。

示例还是在上篇《<a href="http://chenxiaoyu.org/blog/archives/312" target="_blank">Pylons 入门实例教程 - 数据库操作</a>》的代码里继续添加。先来尝试下  cookie，添加新的 cookietest controller。

修改 index 方法，添加显示部分：
<pre>    def index(self):
        name = 'NULL'
        if request.cookies.has_key('name'):
            name = request.cookies['name']
        return 'cookie name=%s' % name</pre>
cookie 读取可以通过 request.cookies 对象，类似一个字典结构。需要注意的是读取时候用最好 has_key 判断下，这样避免抛 KeyError 异常。当然你也可以 try...catch 捕获一下。

再重新写一个方法，用来写 cookie。
<pre>    def writecookie(self):
        response.set_cookie("name", "smallfish")
        return "write cookie ok"</pre>
这里只是简单设置一个值得，set_cookie 还有其他参数，具体如下：
<pre>set_cookie(self, key, value='', max_age=None, path='/', domain=None, secure=None,
                 httponly=False, version=None, comment=None, expires=None, overwrite=False)</pre>
基本一般需要设置：max_age，path，domain，expires 这几个参数。

下面再来尝试一下 session：
<pre>smallfish@debian:~/workspace/python/hellodb$ paster controller sessiontest
Creating /home/smallfish/workspace/python/hellodb/hellodb/controllers/sessiontest.py
Creating /home/smallfish/workspace/python/hellodb/hellodb/tests/functional/test_sessiontest.py</pre>
和上面 cookie 例子类似，在 controller 里有两个方法，index 负责显示 session，writesession 负责写。
<pre>    def index(self):
        name = session.get('name', 'NULL')
        return 'session name=%s' % name

    def writesession(self):
        session['name'] = 'smallfish'
        session.save()
        return "save session ok"</pre>
index 方法里 get 后面的 NULL 是默认值。writesession 里需要注意下设置 session 之后需要 save。

删除 session 可以尝试如下：
<pre>del session['name']
# 删除所有
session.delete()</pre>
到这里，WEB 常用的一些东西在 Pylons 里基本走了一圈，包含 URL、模板、数据库和会话部分。

下一节将会涉及怎么在 Nginx 上发布 Pylons 应用。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2010-07-03 20:38:58</wp:post_date>
		<wp:post_date_gmt>2010-07-03 12:38:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-cookie-%e5%92%8c-session</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[651]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1278173859]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>129</wp:comment_id>
		<wp:comment_author><![CDATA[dosou]]></wp:comment_author>
		<wp:comment_author_email>njujyf@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.dosou.net</wp:comment_author_url>
		<wp:comment_author_IP>121.229.97.72</wp:comment_author_IP>
		<wp:comment_date>2010-07-05 00:19:22</wp:comment_date>
		<wp:comment_date_gmt>2010-07-04 16:19:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[顶鱼哥。不懂技术的我飘过]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>130</wp:comment_id>
		<wp:comment_author><![CDATA[jiaion]]></wp:comment_author>
		<wp:comment_author_email>jiaion21@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>124.42.99.34</wp:comment_author_IP>
		<wp:comment_date>2010-08-04 10:25:39</wp:comment_date>
		<wp:comment_date_gmt>2010-08-04 02:25:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[顶一下smallfish_xy 听seek老大说在这里能找到你希望能加下我Gtalk : jiaion21@gmail.com 或者QQ279425006 想和你请教一些python的问题.. 谢谢]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>131</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>60.177.239.156</wp:comment_author_IP>
		<wp:comment_date>2010-08-04 23:23:12</wp:comment_date>
		<wp:comment_date_gmt>2010-08-04 15:23:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[我的gt是smallfish.xy#gmail.com]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>130</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>132</wp:comment_id>
		<wp:comment_author><![CDATA[婚礼]]></wp:comment_author>
		<wp:comment_author_email>afen@afen.cn</wp:comment_author_email>
		<wp:comment_author_url>http://www.hun99.com</wp:comment_author_url>
		<wp:comment_author_IP>61.185.204.187</wp:comment_author_IP>
		<wp:comment_date>2010-08-27 11:11:43</wp:comment_date>
		<wp:comment_date_gmt>2010-08-27 03:11:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[基本不用py写web，写底层还是比较好]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>134</wp:comment_id>
		<wp:comment_author><![CDATA[白发先生]]></wp:comment_author>
		<wp:comment_author_email>mava@yahoo.cn</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>221.182.46.22</wp:comment_author_IP>
		<wp:comment_date>2010-09-09 20:58:25</wp:comment_date>
		<wp:comment_date_gmt>2010-09-09 12:58:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[写得不错，你说的下节“在Nginx 上发布 Pylons 应用”怎么还没出来啊。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Pythonic 分享</title>
		<link>http://ddbean.wordpress.com/2010/08/07/%e6%9d%ad%e5%b7%9e-%e7%ac%ac%e5%9b%9b%e6%9c%9f%e7%a8%8b%e5%ba%8f%e5%91%98%e5%9c%86%e6%a1%8c%e4%bc%9a%e8%ae%ae%e5%bd%92%e6%9d%a5/</link>
		<pubDate>Sat, 07 Aug 2010 09:55:52 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://chenxiaoyu.org/?p=333</guid>
		<description></description>
		<content:encoded><![CDATA[很荣幸收到龙哥 @hoorace  邀请去参加了杭州第四期程序员圆桌会议，顺带介绍了下最近在公司内部做的关于《Pythonic》分享。喜欢Python的可以下载看看把。
<div id="__ss_4919596" style="width:425px;"><strong><a title="Pythonic" href="http://www.slideshare.net/nnfish/pythonic">Pythonic</a></strong><a href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=pythonic-100807044344-phpapp02&amp;stripped_title=pythonic&amp;userName=nnfish">http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=pythonic-100807044344-phpapp02&amp;stripped_title=pythonic&amp;userName=nnfish</a>&nbsp;
<div style="padding:5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/nnfish">small fish</a>.</div>
</div>
收获还是颇丰，多接触了点其他工种的朋友。

话题比较宽泛，基本我就是纯酱油飘过。感谢网新的朋友做的Vim的分享，另外威猛的升哥topic也不错，对RedHat系统安装和启动加载有了更多的了解。

另外很遗憾的就是威大师竟然没说点啥，可惜了那么好的水果茶啊。。。残念残念。。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2010-08-07 17:55:52</wp:post_date>
		<wp:post_date_gmt>2010-08-07 09:55:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9d%ad%e5%b7%9e-%e7%ac%ac%e5%9b%9b%e6%9c%9f%e7%a8%8b%e5%ba%8f%e5%91%98%e5%9c%86%e6%a1%8c%e4%bc%9a%e8%ae%ae%e5%bd%92%e6%9d%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298122523:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[902]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>135</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention smallfish logs » Pythonic 分享 关注 Python, Perl, Go, PostgreSQL, MySQL, MongoDB, Linux... -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/chenxiaoyu.org/blog/archives/333?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 18:08:44</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 10:08:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Jasey Wang, 谭东扬 and 谭东扬, smallfish. smallfish said: 《Pythonic 分享》PPT http://chenxiaoyu.org/blog/archives/333 #杭州第四期程序员圆桌会议 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>136</wp:comment_id>
		<wp:comment_author><![CDATA[hoorace]]></wp:comment_author>
		<wp:comment_author_email>longtask@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.longtask.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>125.118.84.188</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 18:20:16</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 10:20:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼哥V5，很多东西还是需要听讲，看PPT收获木有听的收获多。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>137</wp:comment_id>
		<wp:comment_author><![CDATA[我不是大师]]></wp:comment_author>
		<wp:comment_author_email>woo.wei@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://powerwu.info</wp:comment_author_url>
		<wp:comment_author_IP>124.90.130.139</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 18:45:35</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 10:45:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[鱼总V5

你就别寒碜我了，积淀太少了，真的说不出什么。争取下次参加能说点啥]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>138</wp:comment_id>
		<wp:comment_author><![CDATA[Zoom.Quiet]]></wp:comment_author>
		<wp:comment_author_email>Zoom.Quiet@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://zoomquiet.org</wp:comment_author_url>
		<wp:comment_author_IP>61.143.45.179</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 21:23:42</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 13:23:42</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[有录音配套理解就好...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>139</wp:comment_id>
		<wp:comment_author><![CDATA[南芝]]></wp:comment_author>
		<wp:comment_author_email>nanzhienai@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.12sui.cn</wp:comment_author_url>
		<wp:comment_author_IP>125.120.166.52</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 22:07:44</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 14:07:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[额，下次再有能不能带我去听听。。。初学者求旁听。。。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>140</wp:comment_id>
		<wp:comment_author><![CDATA[Coogi Jeans]]></wp:comment_author>
		<wp:comment_author_email>coogi@jeans.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.pickmyjeans.com/coogi-jeans-c-23</wp:comment_author_url>
		<wp:comment_author_IP>59.60.126.55</wp:comment_author_IP>
		<wp:comment_date>2010-08-12 23:43:12</wp:comment_date>
		<wp:comment_date_gmt>2010-08-12 15:43:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[喜欢版主的风格，哈哈~· 期待更好的文章。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>141</wp:comment_id>
		<wp:comment_author><![CDATA[alex]]></wp:comment_author>
		<wp:comment_author_email>updatanow@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://blog.sina.com/newliver</wp:comment_author_url>
		<wp:comment_author_IP>123.124.185.162</wp:comment_author_IP>
		<wp:comment_date>2010-08-13 10:44:52</wp:comment_date>
		<wp:comment_date_gmt>2010-08-13 02:44:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[兄台 文采不错 ，拜读python大作。。。。哈哈哈]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>142</wp:comment_id>
		<wp:comment_author><![CDATA[毛孔变粗怎么办]]></wp:comment_author>
		<wp:comment_author_email>jy02412237@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.942meili.com</wp:comment_author_url>
		<wp:comment_author_IP>218.0.52.131</wp:comment_author_IP>
		<wp:comment_date>2010-08-17 21:30:27</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 13:30:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[很好！特来支持下！]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>143</wp:comment_id>
		<wp:comment_author><![CDATA[ubunoon]]></wp:comment_author>
		<wp:comment_author_email>netubu@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.cnblogs.com/ubunoon</wp:comment_author_url>
		<wp:comment_author_IP>115.195.136.100</wp:comment_author_IP>
		<wp:comment_date>2010-08-17 22:26:15</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 14:26:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[很有感觉的说法，文采超级有……
填写验证码时，怎么感觉想要我们来破解似的，很囧的是手工填写了n多次验证码都没有通过……]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>144</wp:comment_id>
		<wp:comment_author><![CDATA[美瞳隐形眼镜]]></wp:comment_author>
		<wp:comment_author_email>327370853@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://amokon.com</wp:comment_author_url>
		<wp:comment_author_IP>122.195.202.149</wp:comment_author_IP>
		<wp:comment_date>2010-08-17 23:35:02</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 15:35:02</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[快睡觉了，再来看看有更新没]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>145</wp:comment_id>
		<wp:comment_author><![CDATA[曹操包 设计外包]]></wp:comment_author>
		<wp:comment_author_email>lanjintr@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.caocaobao.com</wp:comment_author_url>
		<wp:comment_author_IP>110.245.33.85</wp:comment_author_IP>
		<wp:comment_date>2010-08-18 00:12:30</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 16:12:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[仔细看了看你的博客，觉得，还不错。如果有机会在外包领域合作。我很期待。]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>146</wp:comment_id>
		<wp:comment_author><![CDATA[飓风营销]]></wp:comment_author>
		<wp:comment_author_email>909021410@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.yxceo.net</wp:comment_author_url>
		<wp:comment_author_IP>183.13.74.74</wp:comment_author_IP>
		<wp:comment_date>2010-08-18 04:20:14</wp:comment_date>
		<wp:comment_date_gmt>2010-08-17 20:20:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[好久没有来看博主了]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>147</wp:comment_id>
		<wp:comment_author><![CDATA[淘宝网]]></wp:comment_author>
		<wp:comment_author_email>136689191@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.wojiumai.com</wp:comment_author_url>
		<wp:comment_author_IP>58.210.13.18</wp:comment_author_IP>
		<wp:comment_date>2010-08-19 01:03:59</wp:comment_date>
		<wp:comment_date_gmt>2010-08-18 17:03:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[文章写的很不错，已经订阅了RSS.]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>148</wp:comment_id>
		<wp:comment_author><![CDATA[qvod高清电影]]></wp:comment_author>
		<wp:comment_author_email>a12323443@356688.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.356688.com/</wp:comment_author_url>
		<wp:comment_author_IP>119.178.137.225</wp:comment_author_IP>
		<wp:comment_date>2010-08-19 07:40:31</wp:comment_date>
		<wp:comment_date_gmt>2010-08-18 23:40:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[就玩过新浪博客和微薄，还真没自己弄过博客，学习学习^_^]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>149</wp:comment_id>
		<wp:comment_author><![CDATA[游戏名字]]></wp:comment_author>
		<wp:comment_author_email>www@youximinzi.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.youximinzi.com</wp:comment_author_url>
		<wp:comment_author_IP>58.45.65.44</wp:comment_author_IP>
		<wp:comment_date>2010-08-19 09:45:48</wp:comment_date>
		<wp:comment_date_gmt>2010-08-19 01:45:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[确实写得不错]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>150</wp:comment_id>
		<wp:comment_author><![CDATA[smallfish]]></wp:comment_author>
		<wp:comment_author_email>smallfish.xy@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>125.120.168.173</wp:comment_author_IP>
		<wp:comment_date>2010-08-19 20:51:20</wp:comment_date>
		<wp:comment_date_gmt>2010-08-19 12:51:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[@ubunoon
不好意思，随意找了一个spam的插件。。。羞愧一下，回头我改改。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>151</wp:comment_id>
		<wp:comment_author><![CDATA[很嗨音乐]]></wp:comment_author>
		<wp:comment_author_email>henhei@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.henhei.net/</wp:comment_author_url>
		<wp:comment_author_IP>220.162.49.209</wp:comment_author_IP>
		<wp:comment_date>2010-08-26 10:16:14</wp:comment_date>
		<wp:comment_date_gmt>2010-08-26 02:16:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[还以为你挂了哦~~]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>152</wp:comment_id>
		<wp:comment_author><![CDATA[岁月无痕官方网站]]></wp:comment_author>
		<wp:comment_author_email>xyliang@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.taobaoze.cn/</wp:comment_author_url>
		<wp:comment_author_IP>115.58.134.149</wp:comment_author_IP>
		<wp:comment_date>2010-08-28 13:07:05</wp:comment_date>
		<wp:comment_date_gmt>2010-08-28 05:07:05</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[第一次来观摩此博客 留个记号 方便下次造访 谢谢博主]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>157</wp:comment_id>
		<wp:comment_author><![CDATA[落水门]]></wp:comment_author>
		<wp:comment_author_email>luoshuimen@luoshuimen.tk</wp:comment_author_email>
		<wp:comment_author_url>http://www.luoshuimen.tk</wp:comment_author_url>
		<wp:comment_author_IP>121.207.33.175</wp:comment_author_IP>
		<wp:comment_date>2010-09-05 12:55:29</wp:comment_date>
		<wp:comment_date_gmt>2010-09-05 04:55:29</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这世界太疯狂了，博主也疯狂下]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>169</wp:comment_id>
		<wp:comment_author><![CDATA[快乐网赚]]></wp:comment_author>
		<wp:comment_author_email>s7684@sogou.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.paintighere.com</wp:comment_author_url>
		<wp:comment_author_IP>59.62.34.176</wp:comment_author_IP>
		<wp:comment_date>2010-09-09 17:51:10</wp:comment_date>
		<wp:comment_date_gmt>2010-09-09 09:51:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[加油啊，什么时候出新的]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>170</wp:comment_id>
		<wp:comment_author><![CDATA[减肥药排行榜]]></wp:comment_author>
		<wp:comment_author_email>3@3.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.kk3800.com/</wp:comment_author_url>
		<wp:comment_author_IP>122.235.96.223</wp:comment_author_IP>
		<wp:comment_date>2010-09-10 13:55:17</wp:comment_date>
		<wp:comment_date_gmt>2010-09-10 05:55:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[对我帮助很大]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Python Story</title>
		<link>http://ddbean.wordpress.com/2011/02/19/python-story/</link>
		<pubDate>Sat, 19 Feb 2011 09:28:29 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=339</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size:13px;line-height:19px;"><strong><a title="Python story" href="http://www.slideshare.net/nnfish/python-story" target="_blank">http://www.slideshare.net/nnfish/python-story</a></strong></span>

<strong> </strong>

<strong> </strong>
<a href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=pythonstory-100920035248-phpapp01&amp;stripped_title=python-story&amp;userName=nnfish">http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=pythonstory-100920035248-phpapp01&amp;stripped_title=python-story&amp;userName=nnfish</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date>2011-02-19 17:28:29</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:28:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-story</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107710]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298122551:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>开源网页截屏工具 CutyCapt Linux 下安装和使用</title>
		<link>http://ddbean.wordpress.com/2011/02/19/%e5%bc%80%e6%ba%90%e7%bd%91%e9%a1%b5%e6%88%aa%e5%b1%8f%e5%b7%a5%e5%85%b7-cutycapt-linux-%e4%b8%8b%e5%ae%89%e8%a3%85%e5%92%8c%e4%bd%bf%e7%94%a8/</link>
		<pubDate>Sat, 19 Feb 2011 09:29:50 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Linux]]></category>

		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>

		<category domain="tag"><![CDATA[Linux]]></category>

		<category domain="tag" nicename="linux"><![CDATA[Linux]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=341</guid>
		<description></description>
		<content:encoded><![CDATA[目的是想在服务器端生成某个网页的缩略图。Google了好久，发现一个好开源东西：CutyCapt。

系统：CentOS 5.5
官网：<a href="http://cutycapt.sourceforge.net/" target="_blank">http://cutycapt.sourceforge.net/</a>
依赖：QT <a href="http://www.qtsoftware.com/" target="_blank">http://www.qtsoftware.com/</a>

首次是在Debian下测试的，很顺利。换了CentOS不是太爽。具体安装和使用步骤如下：

<strong>1. 下载RPM包</strong>
<pre>(64位)
wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-4.4.3-10_4.el5.x86_64.rpm
wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-x11-4.4.3-10_4.el5.x86_64.rpm
wget http://dl.atrpms.net/el5-x86_64/atrpms/testing/qt44-devel-4.4.3-10_4.el5.x86_64.rpm

(32位)
wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-4.4.3-10_4.el5.i386.rpm
wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-x11-4.4.3-10_4.el5.i386.rpm
wget http://ftp.riken.go.jp/Linux/atrpms/el5-i386/atrpms/testing/qt44-devel-4.4.3-10_4.el5.i386.rpm</pre>
<strong>2. 安装 qt-devel 依赖包</strong>
<pre>yum install libXi-devel
yum install libXinerama-devel</pre>
<strong>3. 安装 qt 相关</strong>
<pre>rpm -ivh qt44-4.4.3-10*
rpm -ivh qt44-x11-4.4.3-10*
# rpm -e qt-devel --nodeps --allmatches
rpm -ivh qt44-devel-4.4.3-10*</pre>
<strong>4. 修改 /etc/profile，最后并：source /etc/profile</strong>
<pre>export QTDIR=/usr/lib64/qt44
export QTLIB=/usr/lib64/qt44/lib
export QTINC=/usr/lib64/qt44/include
export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
export PATH=$QTDIR/bin:$PATH</pre>
<strong>5. 安装 cutycapt</strong>
<pre>svn co https://cutycapt.svn.sourceforge.net/svnroot/cutycapt
mv cutycapt/CutyCapt /usr/local/CutyCapt
cd /usr/local/CutyCapt
qmake
make</pre>
<strong>6. 安装模拟 x-server 服务端</strong>
<pre>wget http://www.flexthinker.com/wp-content/uploads/2009/11/xvfb-run.sh.txt
mv ./xvfb-run.sh.txt /usr/local/CutyCapt/xvfb-run.sh
chmod u+x /usr/local/CutyCapt/xvfb-run.sh</pre>
<strong>7. 开始欢快的截图吧</strong>
<pre>/usr/local/CutyCapt/xvfb-run.sh --server-args="-screen 0, 1024x768x24" /usr/local/CutyCapt/CutyCapt --url=http://www.163.com --out=163.jpg</pre>
<strong>8. 如果看不到汉字或乱码，需要安装chinese字体</strong>
<pre>yum install fonts-chinese</pre>
<strong>9. 由于截屏的是整个网站的页面，只需要第一屏幕</strong>
<pre>convert -crop 1024x768+0+0 163.jpg 1632.jpg</pre>
<strong>10. 缩小图片</strong>
<pre>convert -resize 40%x40% 1632.jpg 1632.jpg</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2011-02-19 17:29:50</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:29:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%bc%80%e6%ba%90%e7%bd%91%e9%a1%b5%e6%88%aa%e5%b1%8f%e5%b7%a5%e5%85%b7-cutycapt-linux-%e4%b8%8b%e5%ae%89%e8%a3%85%e5%92%8c%e4%bd%bf%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107790]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298107794:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>PostgreSQL Key-Value 数据类型 hstore 使用教程</title>
		<link>http://ddbean.wordpress.com/2011/02/19/postgresql-key-value-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b-hstore-%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b/</link>
		<pubDate>Sat, 19 Feb 2011 09:31:00 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[PostgreSQL]]></category>

		<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<category domain="tag"><![CDATA[PostgreSQL]]></category>

		<category domain="tag" nicename="postgresql"><![CDATA[PostgreSQL]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[现在满地都是KV数据库的文字，PostgreSQL 也有类似的结构。不过是通过其强大的扩展方式实现的。

官网文档请参考：<a href="http://www.postgresql.org/docs/current/static/hstore.html" target="_blank">http://www.postgresql.org/docs/current/static/hstore.html</a>

本文测试环境在 Mac OS 下，Pg采用源码编译。

<strong>编译 hstore 扩展</strong>
<pre>mac:~ smallfish$ cd Downloads/postgresql-9.0.1/contrib/hstore/
mac:hstore smallfish$ make
... 一堆编译信息
mac:hstore smallfish$ sudo make install</pre>
<strong>导入到数据库中，注意必须以 postgres 用户，如果需要装入到指定数据库，请指明。这里采用默认数据库。</strong>
<pre>mac:hstore smallfish$ ls /opt/postgresql/share/contrib/
hstore.sql		uninstall_hstore.sql
mac:hstore smallfish$ psql -U postgres -f /opt/postgresql/share/contrib/hstore.sql
... 一堆导入命令</pre>
<strong>进入数据库，建一个测试表</strong>
<pre>postgres=# CREATE TABLE testhstore (id SERIAL, value hstore);
NOTICE:  CREATE TABLE will create implicit sequence "testhstore_id_seq" for serial column "testhstore.id"
CREATE TABLE</pre>
<strong>查看下表结构</strong>
<pre>postgres=# \d
                List of relations
 Schema |       Name        |   Type   |  Owner
--------+-------------------+----------+----------
 public | testhstore        | table    | postgres
 public | testhstore_id_seq | sequence | postgres
(2 rows)

postgres=# \d testhstore;
                         Table "public.testhstore"
 Column |  Type   |                        Modifiers
--------+---------+---------------------------------------------------------
 id     | integer | not null default nextval('testhstore_id_seq'::regclass)
 value  | hstore  |</pre>
<strong>尝试下简单 hstore类型</strong>
<pre>postgres=# select 'a=&gt;1, b=&gt;2'::hstore;
       hstore
--------------------
 "a"=&gt;"1", "b"=&gt;"2"
(1 row)

postgres=# select 'a=&gt;1, b=&gt;a'::hstore;
       hstore
--------------------
 "a"=&gt;"1", "b"=&gt;"a"
(1 row)</pre>
<strong>写几条测试数据先</strong>
<pre>postgres=# INSERT INTO testhstore (value) VALUES ('name=&gt;smallfish, age=&gt;29'::hstore);
INSERT 0 1
postgres=# SELECT * FROM testhstore;
 id |              value
----+----------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
(1 row)

postgres=# INSERT INTO testhstore (value) VALUES ('name=&gt;nnfish, age=&gt;20'::hstore);
INSERT 0 1
postgres=# INSERT INTO testhstore (value) VALUES ('name=&gt;aaa, age=&gt;30, addr=&gt;China'::hstore);
INSERT 0 1</pre>
<strong>查看下所有数据</strong>
<pre>postgres=# SELECT * FROM testhstore;
 id |                    value
----+---------------------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
  2 | "age"=&gt;"20", "name"=&gt;"nnfish"
  3 | "age"=&gt;"30", "addr"=&gt;"China", "name"=&gt;"aaa"
(3 rows)</pre>
<strong>查询列里面的指定 key</strong>
<pre>postgres=# SELECT id, value-&gt;'name' AS name FROM testhstore;
 id |   name
----+-----------
  1 | smallfish
  2 | nnfish
  3 | aaa
(3 rows)

postgres=# SELECT id, value-&gt;'name', value-&gt;'age' AS age FROM testhstore;
 id | ?column?  | age
----+-----------+-----
  1 | smallfish | 29
  2 | nnfish    | 20
  3 | aaa       | 30
(3 rows)</pre>
<strong>修改列某 key 值</strong>
<pre>postgres=# UPDATE testhstore SET value=value||('addr=&gt;Shanghai') WHERE id = 2;
UPDATE 1

postgres=# SELECT * FROM testhstore;
 id |                       value
----+---------------------------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
  3 | "age"=&gt;"30", "addr"=&gt;"China", "name"=&gt;"aaa"
  2 | "age"=&gt;"20", "addr"=&gt;"Shanghai", "name"=&gt;"nnfish"
(3 rows)</pre>
<strong>删除列里某 key</strong>
<pre>postgres=# UPDATE testhstore SET value=delete(value, 'addr') WHERE id = 3;
UPDATE 1

postgres=# SELECT * FROM testhstore;
 id |                       value
----+---------------------------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
  2 | "age"=&gt;"20", "addr"=&gt;"Shanghai", "name"=&gt;"nnfish"
  3 | "age"=&gt;"30", "name"=&gt;"aaa"
(3 rows)</pre>
<strong>按条件查询列里某 key ，注意要数据类型，CAST 强转。默认都是字符串的值。</strong>
<pre>postgres=# SELECT * FROM testhstore WHERE (value-&gt;'age')::INT &gt; 20;
 id |              value
----+----------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
  3 | "age"=&gt;"30", "name"=&gt;"aaa"
(2 rows)

postgres=# SELECT * FROM testhstore WHERE value-&gt;'name' = 'smallfish';
 id |              value
----+----------------------------------
  1 | "age"=&gt;"29", "name"=&gt;"smallfish"
(1 row)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2011-02-19 17:31:00</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:31:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postgresql-key-value-%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b-hstore-%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298107864:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107860]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Pylons 入门实例教程 – 发布应用</title>
		<link>http://ddbean.wordpress.com/2011/02/19/pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e5%8f%91%e5%b8%83%e5%ba%94%e7%94%a8/</link>
		<pubDate>Sat, 19 Feb 2011 09:31:47 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category domain="tag"><![CDATA[Pylons]]></category>

		<category domain="tag" nicename="pylons"><![CDATA[Pylons]]></category>

		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[前面几篇教程简单讲述了如何使用 Pylons 进行 WEB 方面开发的步骤，包括简单的 Hello、表单和数据库操作等内容。本篇将描述一下如何在正式环境中发布基于 Pylons 的 WEB 应用。

测试环境：Nginx 0.8.53 + FastCGI 模式 （需要安装 flup 模块）
<pre>pip install flup
# easy_install -U flup</pre>
测试代码，延用前面的 Hello 示例。
<pre>mac:python smallfish$ paster create -t pylons hello
mac:python smallfish$ cd hello/
mac:hello smallfish$ paster controller hi
mac:hello smallfish$ paster serve --reload development.ini</pre>
确保以上过程无错，访问：http://127.0.0.1:5000 可以看到默认页面。

好把，开始配置发布环境。
需要修改 development.ini 配置文件，找到 [server:main] 节点，修改其中的 use 方式（默认是 egg:Paste#http）。
<pre>[server:main]
use = egg:PasteScript#flup_fcgi_thread
host = 0.0.0.0
port = 5000</pre>
另外建议修改 [DEFAULT] 节点中 debug = false，以免错误会打印具体的环境和堆栈信息。

到这里 Pylons 部分以及设置好了，如果出现一下错误：
<pre>LookupError: Entry point 'flup_fcgi_thread' not found in egg 'Paste'</pre>
请注意上面的 use 部分里是 PasteScript 而不是 Paste哦。淡定淡定，别光看后面的 http 改成 flup_fcgi_thread。

下面修改 Nginx 的配置 nginx.conf，修改其中 / 部分设置。
<pre>        location / {
            fastcgi_pass   127.0.0.1:5000;
            fastcgi_index  index;
            fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_intercept_errors off;
        }</pre>
其中 fastcgi_pass 中 host 和 port 对应 development.ini 中的配置。

好把，这里可以启动，看看是否正确，请注意相应的目录。

启动 Pylons 部分（启动 daemon 进程，或参考搜狐邮箱使用的 <a href="http://mailteam.blog.sohu.com/136961251.html" target="_blank">zdaemon</a> 来管理进程）：
<pre>mac:hello smallfish$ paster serve --reload development.ini  --daemon start
# 注意，正式环境中请去除 reload 参数
# daemon 后面参数有 start | stop | restart | status，可以很方便的管理进程</pre>
启动 Nginx 部分：
<pre>mac:~ smallfish$ sudo /opt/nginx/sbin/nginx</pre>
尝试一下访问： http://localhost/ 和 http://localhost/hi/index 。是不是都可以了？OK，到这里已经整合好了。

这里是采用 FastCGI 方式发布，当然还可以用默认 http 或者本地 socket 方式，然后通过 proxy_pass 方式转发过去也是可以的。

当然，这个只是简单示例，可能正式发布时候需要注意的事项比这个复杂的多。这里只是介绍一种方式而已。

希望通过这一系列的教程，希望能对喜欢 Python 和关注 Pylons 框架的朋友能有所帮助。

前几篇链接分别如下：

<a href="http://chenxiaoyu.org/blog/archives/294" target="_blank">1. Pylons 入门实例教程 – Hello</a>
<a href="http://chenxiaoyu.org/blog/archives/306" target="_blank">2. Pylons 入门实例教程 – 表单和文件上传</a>
<a href="http://chenxiaoyu.org/blog/archives/312" target="_blank">3. Pylons 入门实例教程 – 数据库操作</a>
<a href="http://chenxiaoyu.org/blog/archives/327" target="_blank">4. Pylons 入门实例教程 – cookie 和 session</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2011-02-19 17:31:47</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:31:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pylons-%e5%85%a5%e9%97%a8%e5%ae%9e%e4%be%8b%e6%95%99%e7%a8%8b-%e2%80%93-%e5%8f%91%e5%b8%83%e5%ba%94%e7%94%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107910]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298107915:20566148]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>194</wp:comment_id>
		<wp:comment_author><![CDATA[liaoyong]]></wp:comment_author>
		<wp:comment_author_email>lywan434@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>123.147.251.123</wp:comment_author_IP>
		<wp:comment_date>2011-04-12 00:58:09</wp:comment_date>
		<wp:comment_date_gmt>2011-04-11 16:58:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[你好，为什么我配置后，nginx日志里面怎么出现了
FastCGI sent in stderr :"WARNING:SCRIPT_NAME does not match REQUEST_URL"  while reaing upstream ,client:127.0.0.1,server:localhost,request:"GET /index.html/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index/index" fastcgi://127.0.0.1:8085 ..........]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>互联网产品与技术的那些杂事儿</title>
		<link>http://ddbean.wordpress.com/2011/02/19/%e4%ba%92%e8%81%94%e7%bd%91%e4%ba%a7%e5%93%81%e4%b8%8e%e6%8a%80%e6%9c%af%e7%9a%84%e9%82%a3%e4%ba%9b%e6%9d%82%e4%ba%8b%e5%84%bf/</link>
		<pubDate>Sat, 19 Feb 2011 09:32:23 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=349</guid>
		<description></description>
		<content:encoded><![CDATA[杂谈一下，我不是搞产品的也不是搞技术的，只是一个打杂的。随便扯谈一下。

作为一个产品，既然有这个名称，必定有其定位。在构思之前，就必须有明确的针对人群。比如是针对年轻人（80、90），抑或者上班族等等。模糊与笼统的定位，带来的只是无谓的“探索”。定位不是靠摸索出来的，也不是磨打出来的，是在你的脑海里，在你的产品里。即使现在模仿风气如此浓厚的时候，需要的也是定位。你的定位在哪儿，注定成就怎样的结果。

有了想法，下面就是一些调查和思考。你的这些针对人群在你的产品你会喜欢什么，会怎样的习惯？这个时候需要做的就是多和你的目标与非目标受众多去聊天，多去发觉他们的喜好与需求。或许你的改动只在某时一句话。所谓的走出去，这一步是必须的。闭门造车，最后可能出来就是一个自个儿意淫的杯具。

初期的实现与原型。很多时候喜欢在白板或者纸上写点什么，画点什么。记住！这一些都不能丢弃，或者擦掉。或许只是一些顺手涂鸦，或者解乏的简笔画。原型设计不需要一个完整的流程图，应该突出其顺序和关键点，以及部分UI的展示。这个过程中可以适当让受众面参与进来，设计出非自己主观的思路。

好吧，其实这些过程是可以修改和整合的。毕竟咱写的是互联网应用，不会给你完整的需求文档，完整的流程图，那样还叫互联网么？那是外包（无贬义，含笑）。

到现在为止应该糅合一些技术的关键字，比如哪些可以做到，哪些比较复杂。哪些技术可取，哪些可以折中。在考虑这个阶段的时候，技术人员需要的更多的是倾听，而不是纠结在某个环节，或者抵制某些习惯与思路。你可以说下自己的观点与想法，但是记住这些只是你自己的主观出发点，代表不了什么（如果正好受众面就是你，那恭喜了！）。需要做的就是记录下需求，转为脑海中虚拟的实现与流淌。一切心中有谱之后，可以适当“讨价还价”。毕竟每个人说出的都是自己的想法。

该画出流程图了。和上面原型一样，记住，别随意擦掉。用小人也可以，用箭头也可以，或者圆圈。你描述的只是过程，不是漫画和小说。当然加上这些元素会显得你的设计更加有爱。流程图的初衷在于走通整个流程，以及画出关键点。大致抽象出各个模型、结构和交互情况。适当写些文档把，这个总没有坏处的。或许这就是设计文档的初稿。

选型。有了需求，有了流程。下面当然是选择怎么去实现。说到用什么，仁者见仁，智者见智。啥好？啥不好？不是道听途说。关键在于自己。这些年来，喜欢的一句话就是：用自己熟悉的、用自己顺手的。看看外面的世界，好东西太多了，难不成有兴趣什么都来用一下？清醒吧哥们。你不是科学家，不是搞研究的。有这个时间，完全可以把你自己熟悉的搞的更透彻。这里并不是抵制新的或者好的工具，要明白一点，这些工具的作用域在哪儿，如果对自己实在可能起不到啥作用，或者只是存在你的假想中，放放把。未来再尝试也不迟。

关键点的实现与雏形。套句时髦的话，这个是不是应该算架构和设计？抽象出大致的模块，划分出结构。不必太在意其完整性和准确性，只要能走通就好。一次都给你写完了，其他人都去喝茶看报纸？雏形嘛，你懂得。当然，还得明确具体的工具，比如语言、数据库、系统等等。一个准则：用自己熟悉的，外加一条：简单就好。

是不是有了大体的架子了？可能下面就是大工作量的体力活啦。当然，分配体力活也是一个很体力的事情。没有一个好的管理者，这个产品就是大家拆东墙补西墙，互相推诿的产物。大致的职责有：传承需求和变化，分配与监察。消化和理解需求，确实是个跟天赋有关的事情，如果都是一个顺序跑下来的，那也不叫互联网了。需要很好的沟通能力，纸面或者口头的描述，随时可能千变万化，一成不变，继续去做外包把（囧）。分配这个环节就跟经验有关了，多去发觉你团队中的兴趣与擅长，用其长处，适当补短。合适的人干合适的事情，嘛效率？这就出来了。大家都在干活，进度就需要自己不断的监控与调整，适当多给自己宽裕的时间，哪怕只是那么一两小时。凡事没绝对，多想，多看，总是对的。

实现。设计数据库，写类库，写页面。详细罗列的话估计一长串。然后就是拆分逻辑，拆分页面，拆分功能点，然后就是与之对应的整合和补充。说到这边，可能就有人会说，用某某类库，或者某某框架，某某工具。这一切都建立在对其了解的基础上。不要太迷信，同样的刀在不同人手上是不一样的，用的好才是好刀，用不好连茅草都不如。折腾的滋味自己尝把。不是用了啥就牛逼，而是解决了啥，针对性的解决才是牛逼的关键。所有的一切，都只不过是实现的一种手段。条条大路，都可以。不要太迷信××，那只是一个传说。没有万能的实现，只有不断的解决与重新审视。实现细节滤过。。。

测试。不是写几个TestCase就是测试，那个只是证明你的代码看起来没啥问题，当然也不仅仅是用了啥测试框架，多专业。都只是辅助工具。除去功能性的测试，需要的是注意细节上。如果仅仅只是能用，没错没bug。这个不是产品，或许就是留言版。当然应该提供更多的可用性、流畅性以及体验。

唉，一不小心快十二点了，洗洗睡吧。未完再补充。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2011-02-19 17:32:23</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:32:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%ba%92%e8%81%94%e7%bd%91%e4%ba%a7%e5%93%81%e4%b8%8e%e6%8a%80%e6%9c%af%e7%9a%84%e9%82%a3%e4%ba%9b%e6%9d%82%e4%ba%8b%e5%84%bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107945]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298107948:20566148]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>2010 – 继续前行的路上</title>
		<link>http://ddbean.wordpress.com/2011/02/19/2010-%e2%80%93-%e7%bb%a7%e7%bb%ad%e5%89%8d%e8%a1%8c%e7%9a%84%e8%b7%af%e4%b8%8a/</link>
		<pubDate>Sat, 19 Feb 2011 09:32:59 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=351</guid>
		<description></description>
		<content:encoded><![CDATA[每一天都在前行的路上，而这一年似乎去的特别的快，特别的短暂。

一年的时间辗转三个城市，从南京到杭州，再到上海。一切的一切似乎都是昨天，那般的清晰。

其实很早就想离开工作快五年的公司，只不过是自己一直下不了决心。性格和患得患失一直左右着自己的思绪。时间的流逝，青春不再，或许再过些时间，或许什么都不是了。

偶然的机会，很荣幸的进入淘宝工作。能够从自己的小圈子走出来，去接触外面的世界。短短的几个月中，成长的内容明显的超过了前几年的积累。这不仅仅是技术的成长，更多的是人，是视野，是想法。这一切的一切，都得感谢淘宝的师兄和主管。回想前几年，自己的世界里只有去完成一些事情，而现在更多的是应该觉得自己主动解决一些事情。当然，沟通上面来的更为明显。程序久了，思维的方式都会定死，而接触其他的岗位，去了解他们人的思路和想法，很多思绪都会豁然开朗。

杭州之行匆匆而逝，来到了大上海，这个充满魔力和摩登的都市。说真的，自己尚未体会。换了新环境，适应是必须的。在试用期内很快直接切入项目，几个月很快过去了。虽然在一些问题上自己不能决定什么，但是还是很幸运，可以从项目最初的雏形，到现在已经测试发布，自己都在其中。其实这个正是自己所擅长的。我想的就是自己能够决定更多，能够参与的更多，当然，或许这个可能性还需要自己去努力，或许现实总是那般无力，或许。

一年的流水账，想说，并不容易。希望自己一直能够如此前行，走自己的路，知道自己需要什么，能够得到什么。足矣。

零点的钟声已过，回忆这一年，许许多多的人，给了自己很多很多的帮助，感谢一下。
<pre>何伟平：很感谢何老师的推荐，才能有机会进入淘宝这样的大公司。何老师的谦虚和热心，很值得自己去学习。很遗憾，至今未有机会请何老师吃顿饭。

康伯：在淘宝时候我的主管。很感谢他跟自己多次的交流，有想法就说，就交流。给了自己很多机会。他是我至今为止唯一一个在系统方面很膜拜的人。

大舞：淘宝入职时候的师兄。试用期内给了自己很多建议和指导，一个很帅很帅的男人。@kemin_ukl

春哥：非芒果台的那位。感谢春哥推荐了自己来盛大，还混了不少饭，春哥工作和生活的太多很值得码农学习和借鉴。@mcspring

道神：灰常牛叉的DD，感谢刚来魔都时候收留了俺这个码农。回头还要多搭讪，求其在Debian方面的经验。@lidaobing

群众：鄙人群里那些哥们，你们都是神一样的男人！因为有了你们，才有了欢乐！@marchliu @xiaoxiaolu @guangfengio 等等大牛们。</pre>
话不多说，祝愿那些把帮助和关心过我的人，新年能够身体健康，幸福快乐！

去迎接新的一年，我，继续在路上。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2011-02-19 17:32:59</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:32:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2010-%e2%80%93-%e7%bb%a7%e7%bb%ad%e5%89%8d%e8%a1%8c%e7%9a%84%e8%b7%af%e4%b8%8a</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298107986:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298107981]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>187</wp:comment_id>
		<wp:comment_author><![CDATA[LI Daobing]]></wp:comment_author>
		<wp:comment_author_email>lidaobing@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>114.92.134.138</wp:comment_author_IP>
		<wp:comment_date>2011-02-21 23:09:56</wp:comment_date>
		<wp:comment_date_gmt>2011-02-21 15:09:56</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[看到我的名字了, 科科]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>tornado 自动加载（autoreload）</title>
		<link>http://ddbean.wordpress.com/2011/02/19/tornado-%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd%ef%bc%88autoreload%ef%bc%89/</link>
		<pubDate>Sat, 19 Feb 2011 09:33:44 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[tornado]]></category>

		<category domain="tag" nicename="tornado"><![CDATA[tornado]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[自动加载主要用于开发和测试阶段，要不每次修改，都重启tornado服务，太囧。

tornado源码有autoreload模块。参考：<a href="https://github.com/facebook/tornado/blob/master/tornado/autoreload.py" target="_blank">autoreload.py</a>

可以看到一个私有方法：_reload_on_update，其实只要引入这个模块，调用它即可。示例如下：
<pre>import tornado.autoreload
def main():
    server = tornado.httpserver.HTTPServer(application)
    server.listen(8888)
    instance = tornado.ioloop.IOLoop.instance()
    tornado.autoreload.start(instance)
    instance.start()</pre>
这样还是很麻烦，或者通过option参数来选择是否autoreload。偶然查看其 <a href="https://github.com/facebook/tornado/blob/master/tornado/web.py" target="_blank">web.py</a> 1000多行有这么一句：
<pre>        # Automatically reload modified modules
        if self.settings.get("debug") and not wsgi:
            import autoreload
            autoreload.start()</pre>
这个是读取Application里settings是否有debug变量，有则调用autoreload。简化后代码如下：
<pre> settings = {'debug' : True}

 application = tornado.web.Application([
     (r"/", MainHandler),
     ], **settings)

def main():
    server = tornado.httpserver.HTTPServer(application)
    server.listen(8888)
    tornado.ioloop.IOLoop.instance().start()</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2011-02-19 17:33:44</wp:post_date>
		<wp:post_date_gmt>2011-02-19 09:33:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tornado-%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd%ef%bc%88autoreload%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1298108026]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1298108029:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>190</wp:comment_id>
		<wp:comment_author><![CDATA[大观网]]></wp:comment_author>
		<wp:comment_author_email>icecresalt@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.daguan365.com</wp:comment_author_url>
		<wp:comment_author_IP>124.162.128.4</wp:comment_author_IP>
		<wp:comment_date>2011-03-13 21:13:29</wp:comment_date>
		<wp:comment_date_gmt>2011-03-13 13:13:29</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[哈哈，到访过。学习啦]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>safecss</title>
		<link>http://ddbean.wordpress.com/safecss/safecss/</link>
		<pubDate>Sat, 19 Feb 2011 13:24:37 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<guid isPermaLink="false">http://ddbean.wordpress.com/safecss/safecss/</guid>
		<description></description>
		<content:encoded><![CDATA[.pre {
border:1px solid black;
}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2011-02-19 21:24:37</wp:post_date>
		<wp:post_date_gmt>2011-02-19 13:24:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>safecss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>safecss</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>pythonbrew - Python多版本管理利器</title>
		<link>http://ddbean.wordpress.com/2011/04/03/pythonbrew-python%e5%a4%9a%e7%89%88%e6%9c%ac%e7%ae%a1%e7%90%86%e5%88%a9%e5%99%a8/</link>
		<pubDate>Sun, 03 Apr 2011 13:05:58 +0000</pubDate>
		<dc:creator><![CDATA[smallfish]]></dc:creator>
		
		<category><![CDATA[Python]]></category>

		<category domain="category" nicename="python"><![CDATA[Python]]></category>

		<category domain="tag"><![CDATA[Python]]></category>

		<category domain="tag" nicename="python"><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://ddbean.wordpress.com/?p=364</guid>
		<description></description>
		<content:encoded><![CDATA[相信不少人在自己机器上有多个Python版本，我的机器上Python有四个版本：2.5.x、2.6.x、2.7和stackless。

测试Google App Engine时候需要切换到2.5，正式调试时候回归到2.6，自己玩的时候会选择2.7或者stackless，每次都是通过bash profile来调整，或者手动加link。真麻烦那。。。

无意间看到有一个Perl版本的brew工具：<a href="http://search.cpan.org/~gugod/App-perlbrew-0.18/bin/perlbrew" target="_blank">perlbrew</a>，可以自由选择Perl版本，很是羡慕，遂想自己动手写一个类似的，可以根据参数修改profile，加载合适的Python版本。动手之前很明智的Google了一把，果然，有人先一步搞定：<a href="http://pypi.python.org/pypi/pythonbrew/" target="_blank">pythonbrew</a>！

安装：
<pre>$ easy_install pythonbrew
$ pythonbrew_install

# 或手动下载
$ curl -kLO http://github.com/utahta/pythonbrew/raw/master/pythonbrew-install
$ chmod +x pythonbrew-install
$ ./pythonbrew-install</pre>
把 source /xxx/.pythonbrew/etc/bashrc 加入到自己profile或者bashrc中去（xxx是自己的用户目录）

pythonbrew 常用命令如下：

<strong>install 安装版本：</strong>
<pre>$ pythonbrew install 2.6.6
过程可以参考安装日志：~/.pythonbrew/log/build.log
如果最后看到make error失败，应该是test过程失败。可以采取：
$ pythonbrew install --force 2.6.6</pre>
<strong>switch 选择版本：</strong>
<pre>$ pythonbrew switch 2.6.6</pre>
<strong>list 查看版本：</strong>
<pre>$ pythonbrew list       # 列出目前已安装的版本
pythonbrew list -k  # 列出可以下载和安装的版本</pre>
<strong>uninstall 卸载版本：</strong>
<pre>$ pythonbrew uninstall 2.6.6</pre>
参数还是很简单的。详见help或者<a href="http://pypi.python.org/pypi/pythonbrew/" target="_blank">pythonbrew</a>。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date>2011-04-03 21:05:58</wp:post_date>
		<wp:post_date_gmt>2011-04-03 13:05:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pythonbrew-python%e5%a4%9a%e7%89%88%e6%9c%ac%e7%ae%a1%e7%90%86%e5%88%a9%e5%99%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1301835963:20566148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1301835959]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>192</wp:comment_id>
		<wp:comment_author><![CDATA[alvayang]]></wp:comment_author>
		<wp:comment_author_email>netyang@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>114.243.66.140</wp:comment_author_IP>
		<wp:comment_date>2011-04-04 15:47:09</wp:comment_date>
		<wp:comment_date_gmt>2011-04-04 07:47:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[profile中alias几下不就行了，switch多费劲啊]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>193</wp:comment_id>
		<wp:comment_author><![CDATA[Insion]]></wp:comment_author>
		<wp:comment_author_email>tinsion@foxmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://garning.com</wp:comment_author_url>
		<wp:comment_author_IP>14.145.152.105</wp:comment_author_IP>
		<wp:comment_date>2011-04-06 20:55:39</wp:comment_date>
		<wp:comment_date_gmt>2011-04-06 12:55:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[不知道这个在Windows下能不能用～]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>191</wp:comment_id>
		<wp:comment_author><![CDATA[nio]]></wp:comment_author>
		<wp:comment_author_email>o@iclue.net</wp:comment_author_email>
		<wp:comment_author_url>http://www.oulan.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.212.197.236</wp:comment_author_IP>
		<wp:comment_date>2011-04-03 22:16:44</wp:comment_date>
		<wp:comment_date_gmt>2011-04-03 14:16:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[如果是ubuntu直接用update-alternatives --config python就可以了。不过记得安装软件的时候要切换回2.6。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
	</channel>
</rss>
